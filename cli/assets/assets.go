// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\xab\xe3\x36\x10\x7d\xdf\x5f\x21\x54\xca\xbe\xd4\x52\x76\xbb\xd0\xc5\xd7\xbe\x50\x5a\x4a\x4b\x5b\xd8\x87\x4d\x5f\x97\x89\x3c\xb6\x27\x2b\x4b\xae\x46\x49\xae\x7b\xf1\x7f\x2f\xfe\x4a\x9c\xa4\x50\x7a\xe9\x92\x97\x99\x33\x63\x9d\x39\x23\x71\x92\xd5\xb1\xb1\xc2\x82\xab\x72\x89\x2e\x39\xb0\x7c\x7c\x25\x44\x56\x23\x14\x43\x20\x44\x66\xc9\x7d\x16\x01\x6d\x2e\xc9\x78\x27\x45\xec\x5a\xcc\x25\x35\x50\xa1\x6e\x5d\x25\x45\x1d\xb0\xcc\x65\x1d\x63\xcb\xa9\xd6\x1c\x7d\x80\x0a\x55\xe5\x7d\x65\x11\x5a\x62\x65\x7c\xa3\x6b\xe0\x43\x80\xa4\x0a\xd0\xd6\x7f\xda\x04\x5d\x45\x0e\xb5\xf1\x8e\xbd\x45\x0d\xcc\x18\x59\x97\x70\x1c\x38\xd4\x78\xac\x9e\xf9\xd9\x04\x6a\xe3\x94\x88\x13\xb9\xc2\x9f\xd4\xa7\x4f\xe8\x8e\x22\x17\xcf\x13\x2a\x04\xb4\xf4\xb3\xe7\x98\x8a\xe7\x67\x35\xc7\x7d\xff\xcd\xaa\xfa\xc1\x87\x98\x0a\x39\x95\x87\xa4\xef\xe5\xb9\x6e\x2c\xfd\x81\x81\xc9\xbb\xf1\x80\x4b\xba\x3a\xa3\x80\x08\xdf\xb7\xb4\x0d\x76\xec\xb9\xa4\xf7\x3d\xeb\xb3\xae\xa1\xf5\x4c\xc6\x20\xf3\xaf\xd8\x4d\x33\x2f\xd9\xaa\xe3\x10\xec\x87\x80\x25\x3d\xa5\x42\xea\xd5\xb0\xd3\xce\x7e\xf7\x05\xa6\x42\x1a\x4b\x57\x3a\xb6\xdb\x5f\x7e\x5c\x44\x0c\xf1\x7a\x3a\x62\xd8\x59\xfc\x88\x16\x1b\x8c\x61\x22\xbe\x05\xfb\x7e\x6a\xef\x1f\xa6\xed\xeb\xcb\xfa\x33\xbd\xbc\x8a\x6c\xe7\x8b\x6e\xb9\x9e\xd8\x59\x9c\x62\xd5\x00\xb9\x1f\xbc\x8b\xe8\xe2\xf9\x6a\x0a\xe2\xd6\x42\x97\x8a\xd7\xce\x3b\x7c\xfd\x30\xc3\xbe\x05\x43\xb1\x4b\xc5\x66\x41\x62\x00\xc7\x14\xc7\xc5\xcd\x55\xa1\xde\x6e\x58\x58\x72\x08\x61\x6a\xeb\xef\x88\x14\xd7\xfe\xf4\x0f\x6c\x3b\xeb\xcd\xe7\x7b\xba\x37\x2f\xa0\xcb\xf4\x2c\x72\xca\x0a\x3a\x0a\x2a\x72\x69\x3d\x14\xe4\x2a\x39\x3f\xcd\xa9\x60\x2c\x30\xe7\xb2\x85\x0a\x93\xa5\x41\x8c\x9f\xe7\x72\xee\x6b\xc8\x25\x35\x52\x55\xc7\x54\xbc\xd9\x6c\x8e\xf5\x32\xd2\x89\x8a\x58\x8f\xd8\xd7\x0f\xb7\x7a\x4a\x8b\x4f\x0b\x08\x96\x2a\x97\x50\xc4\x86\x53\x61\xd0\x45\x0c\x4b\xa9\xf4\x2e\x26\x25\x34\x64\xbb\x54\x30\x38\x4e\x18\x03\x95\x4b\x79\x7f\xe0\x48\x65\x97\x98\x69\x77\xb7\x5f\x9f\xa5\x0c\xf7\xda\x82\x5b\xd4\xdc\x2a\x98\x79\x98\xfe\xc2\x54\xbc\xc5\xe6\xe1\x8c\x37\x10\x2a\x72\x49\xf4\x6d\x2a\x92\x6f\xd7\x15\xe3\xad\x0f\xa9\xf8\xea\xfd\xbb\xe1\x77\xc1\x57\x9c\xbf\x4d\xfb\x52\x4a\x2d\x1b\xd5\xc3\x14\xe7\xfd\xea\x82\x8e\xf3\xab\x5b\x85\xcb\x75\xcc\x9a\xe4\x32\xf4\xea\x8d\xc8\xc7\xf5\x07\x17\x43\x1b\x55\x71\x8d\x18\x6f\x5d\xcc\x14\x6e\xcf\xca\x58\x7f\x28\x4a\x0b\x01\x47\x0f\x83\x3d\x3c\x69\x4b\x3b\xd6\xa3\x7c\x38\x21\xfb\x06\xf5\x3b\xf5\x9d\xda\x68\xc3\xd7\xb0\x6a\xc8\x29\xc3\x2c\xf5\x7f\xa0\x7d\x91\x79\x0e\xf6\x31\xfa\xe7\xd9\x64\xf4\xa0\x7d\x24\x17\xa6\x86\xc0\x18\x73\xb9\xfd\xf8\x53\xf2\x5e\x5e\x9b\xaa\xe0\x60\xfe\x7f\xf2\x23\xba\xc2\x07\xb5\xbf\x67\x7f\x5c\xdb\xc9\x17\x9e\x62\x5c\xc1\xbf\xcd\x90\xe9\xc9\xc9\x32\x3d\xfc\x0d\x3e\xbe\xfa\x3b\x00\x00\xff\xff\xe5\x5b\xc2\xb9\x0e\x07\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 1806, mode: os.FileMode(420), modTime: time.Unix(1547032925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\xab\xe3\x36\x10\x7d\xdf\x5f\x21\x54\xca\xbe\xd4\x52\x76\xbb\xd0\xc5\xd7\xbe\x50\x5a\x4a\x4b\x5b\xd8\x87\x4d\x5f\x97\x89\x3c\xb6\x27\x2b\x4b\xae\x46\x49\xae\x7b\xf1\x7f\x2f\xfe\x4a\x9c\xa4\x50\x7a\xe9\x92\x97\x99\x33\x63\x9d\x39\x23\x71\x92\xd5\xb1\xb1\xc2\x82\xab\x72\x89\x2e\x39\xb0\x7c\x7c\x25\x44\x56\x23\x14\x43\x20\x44\x66\xc9\x7d\x16\x01\x6d\x2e\xc9\x78\x27\x45\xec\x5a\xcc\x25\x35\x50\xa1\x6e\x5d\x25\x45\x1d\xb0\xcc\x65\x1d\x63\xcb\xa9\xd6\x1c\x7d\x80\x0a\x55\xe5\x7d\x65\x11\x5a\x62\x65\x7c\xa3\x6b\xe0\x43\x80\xa4\x0a\xd0\xd6\x7f\xda\x04\x5d\x45\x0e\xb5\xf1\x8e\xbd\x45\x0d\xcc\x18\x59\x97\x70\x1c\x38\xd4\x78\xac\x9e\xf9\xd9\x04\x6a\xe3\x94\x88\x13\xb9\xc2\x9f\xd4\xa7\x4f\xe8\x8e\x22\x17\xcf\x13\x2a\x04\xb4\xf4\xb3\xe7\x98\x8a\xe7\x67\x35\xc7\x7d\xff\xcd\xaa\xfa\xc1\x87\x98\x0a\x39\x95\x87\xa4\xef\xe5\xb9\x6e\x2c\xfd\x81\x81\xc9\xbb\xf1\x80\x4b\xba\x3a\xa3\x80\x08\xdf\xb7\xb4\x0d\x76\xec\xb9\xa4\xf7\x3d\xeb\xb3\xae\xa1\xf5\x4c\xc6\x20\xf3\xaf\xd8\x4d\x33\x2f\xd9\xaa\xe3\x10\xec\x87\x80\x25\x3d\xa5\x42\xea\xd5\xb0\xd3\xce\x7e\xf7\x05\xa6\x42\x1a\x4b\x57\x3a\xb6\xdb\x5f\x7e\x5c\x44\x0c\xf1\x7a\x3a\x62\xd8\x59\xfc\x88\x16\x1b\x8c\x61\x22\xbe\x05\xfb\x7e\x6a\xef\x1f\xa6\xed\xeb\xcb\xfa\x33\xbd\xbc\x8a\x6c\xe7\x8b\x6e\xb9\x9e\xd8\x59\x9c\x62\xd5\x00\xb9\x1f\xbc\x8b\xe8\xe2\xf9\x6a\x0a\xe2\xd6\x42\x97\x8a\xd7\xce\x3b\x7c\xfd\x30\xc3\xbe\x05\x43\xb1\x4b\xc5\x66\x41\x62\x00\xc7\x14\xc7\xc5\xcd\x55\xa1\xde\x6e\x58\x58\x72\x08\x61\x6a\xeb\xef\x88\x14\xd7\xfe\xf4\x0f\x6c\x3b\xeb\xcd\xe7\x7b\xba\x37\x2f\xa0\xcb\xf4\x2c\x72\xca\x0a\x3a\x0a\x2a\x72\x69\x3d\x14\xe4\x2a\x39\x3f\xcd\xa9\x60\x2c\x30\xe7\xb2\x85\x0a\x93\xa5\x41\x8c\x9f\xe7\x72\xee\x6b\xc8\x25\x35\x52\x55\xc7\x54\xbc\xd9\x6c\x8e\xf5\x32\xd2\x89\x8a\x58\x8f\xd8\xd7\x0f\xb7\x7a\x4a\x8b\x4f\x0b\x08\x96\x2a\x97\x50\xc4\x86\x53\x61\xd0\x45\x0c\x4b\xa9\xf4\x2e\x26\x25\x34\x64\xbb\x54\x30\x38\x4e\x18\x03\x95\x4b\x79\x7f\xe0\x48\x65\x97\x98\x69\x77\xb7\x5f\x9f\xa5\x0c\xf7\xda\x82\x5b\xd4\xdc\x2a\x98\x79\x98\xfe\xc2\x54\xbc\xc5\xe6\xe1\x8c\x37\x10\x2a\x72\x49\xf4\x6d\x2a\x92\x6f\xd7\x15\xe3\xad\x0f\xa9\xf8\xea\xfd\xbb\xe1\x77\xc1\x57\x9c\xbf\x4d\xfb\x52\x4a\x2d\x1b\xd5\xc3\x14\xe7\xfd\xea\x82\x8e\xf3\xab\x5b\x85\xcb\x75\xcc\x9a\xe4\x32\xf4\xea\x8d\xc8\xc7\xf5\x07\x17\x43\x1b\x55\x71\x8d\x18\x6f\x5d\xcc\x14\x6e\xcf\xca\x58\x7f\x28\x4a\x0b\x01\x47\x0f\x83\x3d\x3c\x69\x4b\x3b\xd6\xa3\x7c\x38\x21\xfb\x06\xf5\x3b\xf5\x9d\xda\x68\xc3\xd7\xb0\x6a\xc8\x29\xc3\x2c\xf5\x7f\xa0\x7d\x91\x79\x0e\xf6\x31\xfa\xe7\xd9\x64\xf4\xa0\x7d\x24\x17\xa6\x86\xc0\x18\x73\xb9\xfd\xf8\x53\xf2\x5e\x5e\x9b\xaa\xe0\x60\xfe\x7f\xf2\x23\xba\xc2\x07\xb5\xbf\x67\x7f\x5c\xdb\xc9\x17\x9e\x62\x5c\xc1\xbf\xcd\x90\xe9\xc9\xc9\x32\x3d\xfc\x0d\x3e\xbe\xfa\x3b\x00\x00\xff\xff\xe5\x5b\xc2\xb9\x0e\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1806, mode: os.FileMode(420), modTime: time.Unix(1547032947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xe3\x44\x10\x7e\xef\x5f\x31\x5a\x84\xee\x05\xef\xe6\x8e\x93\x38\xb9\x49\x25\xc4\x09\x81\x00\xe9\x24\xae\xbc\x9e\xa6\xeb\xb1\x3d\xbd\xf5\xae\xd9\xd9\x24\x0d\x91\xff\x77\xe4\x5f\x89\x9b\x02\x07\x05\xd4\x97\x9d\x5f\xfb\xcd\xf7\xcd\x66\xdc\x75\x9d\x1a\x07\x0e\x7d\xb5\x51\xe4\xb3\xad\xa8\x9b\x2b\x80\x75\x4d\x58\xf4\x07\x80\xb5\x63\xff\x11\x22\xb9\x8d\x62\x1b\xbc\x82\x74\x68\x69\xa3\xb8\xc1\x8a\x4c\xeb\x2b\x05\x75\xa4\x72\xa3\xea\x94\x5a\xc9\x8d\x91\x14\x22\x56\xa4\xab\x10\x2a\x47\xd8\xb2\x68\x1b\x1a\x53\xa3\x6c\x23\x66\x55\xc4\xb6\xfe\xd5\x65\xe4\x2b\xf6\x64\x6c\xf0\x12\x1c\x19\x14\xa1\x24\xa6\xc4\x5d\x8f\xa1\x87\x6b\xcd\x84\x2f\x36\x72\x9b\x46\x03\xf6\xec\x8b\xb0\xd7\x1f\x3e\x90\xdf\xc1\x06\x8e\xa3\x17\x00\x5b\xfe\x2e\x48\xca\xe1\x78\xd4\xd3\xb9\xeb\xbe\x58\x44\xdf\x85\x98\x72\x50\x63\xb8\x37\xba\x4e\x9d\xe2\xd6\xf1\x2f\x14\x85\x83\x1f\x2e\x38\x9b\x8b\x3b\x0a\x4c\xf8\x75\xcb\xb7\xd1\x0d\x39\x67\xf3\x69\xce\xf2\xae\xc7\xae\x65\x4f\xd6\x92\xc8\x0f\x74\x18\x7b\x9e\xad\x45\xc6\x36\xba\x77\x91\x4a\x7e\xc8\x41\x99\x45\xb3\xa3\x66\x3f\x85\x82\x72\x50\xd6\xf1\x23\x1e\xb7\xb7\xdf\xbf\x9d\x49\xf4\xe7\x65\x77\x2c\x78\xe7\xe8\x3d\x39\x6a\x28\xc5\x11\xf8\xd2\xd9\x75\x63\x7a\x77\x3d\xaa\x6f\xce\xf2\xaf\xcd\xfc\x2a\xd6\x77\xa1\x38\xcc\xe3\x49\x07\x47\xe3\x59\x37\xc8\xfe\x9b\xe0\x13\xf9\x74\x1a\x4d\xc1\xd2\x3a\x3c\xe4\xf0\xc2\x07\x4f\x2f\xae\x27\x77\x68\xd1\x72\x3a\xe4\xb0\x9a\x3d\x29\xa2\x17\x4e\x83\x70\x53\x14\xf4\xab\x95\x80\x63\x4f\x18\xc7\xb4\xee\x09\x90\x96\x3a\xec\xff\x00\xed\xce\x05\xfb\xf1\x29\xdc\xcb\x67\xc0\xad\xcd\x44\x72\xb4\x0a\xde\x01\x17\x1b\xe5\x02\x16\xec\x2b\x35\x3d\xcd\x31\x60\x1d\x8a\x6c\x54\x8b\x15\x65\x73\x02\x0c\xe5\x1b\x35\xe5\x35\xec\xb3\x9a\xb8\xaa\x53\x0e\x2f\x57\xab\x5d\x3d\xb7\xb4\xe7\x22\xd5\x83\xef\xf3\xeb\x4b\x3e\xa5\xa3\x87\xd9\x89\x8e\x2b\x9f\x71\xa2\x46\x72\xb0\xe4\x13\xc5\x39\x54\x06\x9f\xb2\x12\x1b\x76\x87\x1c\x04\xbd\x64\x42\x91\xcb\x39\x7c\xbf\x95\xc4\xe5\x21\xb3\xa3\x76\x97\xd5\x27\x2a\xfd\x5c\x5b\xf4\x33\x9b\x4b\x06\x13\x8e\xf0\x6f\x94\xc3\x2b\x6a\xae\x4f\xfe\x06\x63\xc5\x3e\x4b\xa1\xcd\x21\xfb\x72\x19\xb1\xc1\x85\x98\xc3\x67\x6f\x5e\xf7\x7f\x67\xff\x02\xf3\xc7\x51\x2f\xad\xf5\xac\xa8\xe9\xbb\x38\xe9\x6b\x0a\xde\x4d\xaf\x6e\x71\x9c\xc7\x31\x71\x52\x73\xd3\x8b\x37\xa2\x6e\x96\x05\xe7\x85\x36\xb0\x92\x9a\x28\x5d\x6e\x31\x5b\xf8\x7b\xd1\xd6\x85\x6d\x51\x3a\x8c\x34\xec\x30\xbc\xc7\x07\xe3\xf8\x4e\xcc\x40\x1f\xf7\x24\xa1\x21\xf3\x5a\x7f\xa5\x57\xc6\xca\x63\xb7\x6e\xd8\x6b\x2b\xa2\xcc\xf4\x6e\x8e\x47\xe0\x12\xfa\xdf\xe5\xcf\x09\x13\xdb\xb7\x1c\xa1\xeb\xae\x3e\xdd\x93\x91\x21\xdf\xf4\x84\x86\x1b\xc1\xd6\x18\x85\xd2\x46\xdd\xbe\xff\x36\x7b\xa3\x1e\x6f\x4a\x90\x68\xcf\x45\x3b\xf2\x45\x88\xfa\xfe\x69\xd5\xcd\xf2\xb7\xfd\x27\xd5\x03\xe4\x5f\xd7\xce\xdc\xc8\x09\xfd\x3d\x3e\xff\xea\x4b\xd1\xef\xca\xe1\x63\x71\xda\xa8\xff\x4c\x97\xff\x1a\xfc\x79\xfa\xfe\x2f\x12\x7c\x7a\x4e\xfd\x98\x7c\x31\x4d\x69\x6d\xc6\x2d\xbe\x36\xfd\xbf\x00\x37\x57\xbf\x07\x00\x00\xff\xff\x33\xd6\x3e\xe4\x0a\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2058, mode: os.FileMode(420), modTime: time.Unix(1547032918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

