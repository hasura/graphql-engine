import React from 'react';
import Dropdown from '../../../../Common/Dropdown/Dropdown';
import Button from '../../../../Common/Button/Button';
import { Dispatch } from '../../../../../types';
import { Column } from '../../../../../utils/postgresColumnTypes';

type ColumnAction = 'add' | 'modify';
interface FrequentlyUsedColumn {
  name: string;
  validFor: ColumnAction[];
  type: Column | string;
  typeText: string;
  primary?: boolean;
  default?: string;
  defaultText?: string;
  dependentSQLGenerator?: (
    schemaName: string,
    tableName: string,
    columnName: string
  ) => { upSql: string; downSql: string };
  minPGVersion?: number;
}

const frequentlyUsedColumns: FrequentlyUsedColumn[] = [
  {
    name: 'id',
    validFor: ['add'],
    type: 'serial',
    typeText: 'integer (auto-increment)',
    primary: true,
  },
  {
    name: 'id',
    validFor: ['add'],
    type: 'bigserial',
    typeText: 'bigint (auto-increment)',
    primary: true,
  },
  {
    name: 'id',
    validFor: ['add'],
    type: 'int GENERATED BY DEFAULT AS IDENTITY',
    typeText: 'int (identity, generated by default)',
    primary: true,
    minPGVersion: 10,
  },
  {
    name: 'id',
    validFor: ['add'],
    type: 'uuid',
    typeText: 'UUID',
    primary: true,
    default: 'gen_random_uuid()',
  },
  {
    name: 'created_at',
    validFor: ['add', 'modify'],
    type: 'timestamptz',
    typeText: 'timestamp',
    default: 'now()',
  },
  {
    name: 'updated_at',
    validFor: ['add', 'modify'],
    type: 'timestamptz',
    typeText: 'timestamp',
    default: 'now()',
    defaultText: 'now() + trigger to set value on update',
    dependentSQLGenerator: (schemaName, tableName, columnName) => {
      const upSql = `
CREATE OR REPLACE FUNCTION "${schemaName}"."set_current_timestamp_${columnName}"()
RETURNS TRIGGER AS $$
DECLARE
  _new record;
BEGIN
  _new := NEW;
  _new."${columnName}" = NOW();
  RETURN _new;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER "set_${schemaName}_${tableName}_${columnName}"
BEFORE UPDATE ON "${schemaName}"."${tableName}"
FOR EACH ROW
EXECUTE PROCEDURE "${schemaName}"."set_current_timestamp_${columnName}"();
COMMENT ON TRIGGER "set_${schemaName}_${tableName}_${columnName}" ON "${schemaName}"."${tableName}" 
IS 'trigger to set value of column "${columnName}" to current timestamp on row update';
`;

      const downSql = `DROP TRIGGER IF EXISTS "set_${schemaName}_${tableName}_${columnName}" ON "${schemaName}"."${tableName}";`;

      return {
        upSql,
        downSql,
      };
    },
  },
];

const getFreqUsedColDisplayInfo = (c: FrequentlyUsedColumn) => {
  const title = c.name;

  const typeText = `${c.typeText}; `;
  const defaultText =
    c.defaultText || c.default
      ? `default: ${c.defaultText || c.default}; `
      : '';
  const pkText = c.primary ? 'primary key; ' : '';

  const subTitle = typeText + defaultText + pkText;

  return {
    title,
    subTitle,
  };
};

interface FrequentlyUsedColumnSelectorProps {
  onSelect: any;
  action: ColumnAction | null;
  dispatch: Dispatch | null;
  postgresVersion: string | null;
}

const FrequentlyUsedColumnSelector = ({
  onSelect,
  action = null,
  dispatch = null,
  postgresVersion,
}: FrequentlyUsedColumnSelectorProps) => {
  const frequentlyUsedColumnsOptions = frequentlyUsedColumns
    .filter(fuc => !action || fuc.validFor.includes(action))
    .filter(col =>
      postgresVersion && col.minPGVersion
        ? parseFloat(postgresVersion) >= col.minPGVersion
        : true
    )
    .map(fuc => {
      const { title, subTitle } = getFreqUsedColDisplayInfo(fuc);
      return {
        content: (
          <div>
            <div>
              <b>{title}</b>
            </div>
            <div>{subTitle}</div>
          </div>
        ),
        onClick: () => (dispatch ? dispatch(onSelect(fuc)) : onSelect(fuc)),
      };
    });

  return (
    <Dropdown
      testId="frequently-used-columns"
      options={frequentlyUsedColumnsOptions}
      position="bottom"
      key="frequently-used-columns"
      keyPrefix="frequently-used-columns"
    >
      <Button color="white" size="xs">
        + Frequently used columns
      </Button>
    </Dropdown>
  );
};

export default FrequentlyUsedColumnSelector;
