// Code generated by go-bindata.
// sources:
// assets/latest/console.html
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsLatestConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\xe0\x17\x5f\xf4\x65\x22\x9d\xae\xc0\x0a\xd9\x0a\x50\xac\x18\x36\x6c\x03\x02\xb4\xd9\x6b\xc0\x50\x27\xe9\x52\x8a\xd4\x78\xb4\x13\xd7\xf0\xff\x3e\xe8\xb7\xec\x64\x4d\x57\x14\x7e\x21\xef\xf7\xe7\x73\xc7\x93\x37\x55\xac\x2d\x58\xed\xca\x4c\xa0\x4b\xb6\x2c\xae\x2e\x00\x36\x15\xea\xbc\x3d\x00\x6c\x2c\xb9\x4f\x10\xd0\x66\x82\x8c\x77\x02\xe2\xbe\xc1\x4c\x50\xad\x4b\x54\x8d\x2b\x05\x54\x01\x8b\x4c\x54\x31\x36\x9c\x2a\x55\x06\xdd\x54\x7f\xdb\x04\x5d\x49\x0e\x13\x93\x3b\x59\x69\xde\x06\x2d\xc9\x2b\xe3\x1d\x7b\x8b\x4a\x33\x63\x64\x65\x7c\x5d\x7b\xa7\xa8\x2e\x55\xa1\x77\x6d\xf8\xdb\x32\x20\x3a\xd9\xc5\x55\x43\x01\x6c\x02\x35\xb1\xbf\x00\x3c\x90\xcb\xfd\x83\xbc\xbd\x45\xb7\x83\x0c\x0e\x83\x18\x40\x37\xf4\xab\xe7\x98\xc2\xe1\x20\x87\xf3\xf1\xf8\xc3\x52\x7d\xed\x43\x4c\x41\xf4\xfa\xf6\x72\x3c\x8a\xd9\xc0\x58\xfa\x0b\x03\x93\x77\x5d\x88\xf9\xba\x8c\x92\xeb\xa8\xdf\x35\x74\x13\x6c\x67\x34\x5f\x9f\x31\x5a\x46\x3b\x15\x2d\x8d\x0f\x87\x04\xa8\x80\x96\xa4\x77\xc6\x20\xf3\xef\xb8\x87\xe3\x71\xae\x7b\x14\xf6\xc0\xf2\x9a\xdc\x07\x34\x01\xe3\x69\x10\x40\xcb\x78\xe2\x37\x5b\xbe\xe4\xe9\x72\x48\x16\x9e\xdb\x60\xaf\x03\x16\xf4\x98\x82\x50\x4b\x82\xfa\xe6\xfd\xe9\x73\x4c\x41\x18\x4b\xa7\xe4\xdd\xdc\xfc\xf6\x7e\x64\xae\x3d\x2f\xb3\xa0\xd3\x77\x16\x3f\xa2\xc5\x1a\x63\xe8\xa1\x9c\xc9\x4e\x7a\xd5\x8d\xc7\xb5\x8e\x55\x0a\xdf\x32\x58\x8b\xc2\x18\xc3\x0e\xc3\xd4\x8a\xb6\xf9\x27\xa2\xc5\x08\x1c\xd7\xfd\xbc\xa9\x79\xe0\x36\x6a\x7c\x08\x9b\x3b\x9f\xef\xc7\x81\x8c\x7b\x8b\xfd\x59\xd6\x9a\xdc\xcf\xde\x45\x74\x71\x9a\xc5\x9c\xb8\xb1\x7a\x9f\xc2\x2b\xe7\x1d\xbe\x5a\x0f\x62\xdf\x68\x43\x71\x9f\xc2\x6a\x94\xc4\xa0\x1d\x53\xec\x2a\x1b\xb4\x20\x5f\xaf\x18\x2c\x39\xd4\xa1\x37\x3b\x3e\x49\x24\xb9\xf2\x0f\xcf\x64\xbb\xb3\xde\x7c\x7a\x9a\xee\xf2\x1b\xd2\x6d\xd4\x00\xb2\xbf\xe5\xb4\x03\xca\x33\x61\xbd\xce\xc9\x95\x62\x7c\x8c\x9d\xc2\x58\xcd\x9c\x89\x46\x97\x98\x8c\x06\xd0\xb9\x67\x62\xb0\xab\xc9\x25\x15\x52\x59\xc5\x14\x2e\x57\xab\x5d\xb5\x9e\x5e\x73\xde\x36\xf9\x72\xb5\xfa\xff\xfa\x1c\x4f\x61\xf1\x71\x14\x6a\x4b\xa5\x4b\x28\x62\xcd\x29\x18\x74\x11\xc3\xa8\x2a\xbc\x8b\x49\xa1\x6b\xb2\xfb\x14\x58\x3b\x4e\x18\x03\x15\xa3\xfa\x7e\xcb\x91\x8a\x7d\x62\x7a\xee\xce\xbd\x27\x28\x6d\x5f\x1b\xed\x46\x34\xe7\x08\x86\x3c\x4c\x9f\x31\x85\xd7\x58\xaf\x27\x79\xad\x43\x49\x2e\x89\xbe\x49\x21\xf9\x71\xa9\x31\xde\xfa\x90\xc2\xff\xde\xbe\x69\x7f\xb3\x7c\x91\xf3\x8f\x9e\x2f\x29\xe5\xc8\xa8\x6a\xab\x98\xf8\x55\x39\xed\x86\xa9\x5b\x1c\xc7\x76\x0c\x98\xc4\x58\xf4\x62\x46\xc4\xd5\xd2\x61\xde\xe1\x1d\x2a\xae\x10\xe3\xf9\xe2\x36\xb9\xbb\x67\x69\xac\xdf\xe6\x85\xd5\x01\xa5\xf1\xb5\xd2\xf7\xfa\x51\x59\xba\x63\xd5\xc1\xd7\x0f\xc8\xbe\x46\xf5\x46\xfe\x24\x57\xca\xf0\xa9\x58\xd6\xe4\xa4\x61\x16\x6a\x98\x9b\xc3\xa1\x5b\x6d\xc6\xd2\x87\xa8\x23\x99\xf7\x14\xda\x15\xf5\x72\x4d\x8a\x3b\x7b\xd5\x02\xea\x22\x82\xa9\x74\x60\x8c\x99\xb8\xf9\xf8\x4b\xf2\x56\x9c\x7e\x1b\x80\x83\x99\x9d\x76\xe8\x72\x1f\xe4\xfd\x53\xaf\xab\xe5\xdb\xfe\x17\xef\x2e\xe5\x97\x7d\x47\x6c\xe3\xca\xfd\x7a\x8e\xff\xcb\xc7\xb1\xdd\xd9\xdd\x69\xda\x54\x13\x1d\xb2\xfc\xfc\x55\x8c\x7c\xa7\xb4\x13\xa1\xcf\xe5\xfd\x12\xa7\xdf\x13\xf6\x8b\xd9\x2f\xe6\xaf\x59\xdf\x93\x8d\xea\x77\xf6\x46\xb5\xff\x71\xae\x2e\xfe\x09\x00\x00\xff\xff\xdd\xc2\x97\xba\xeb\x08\x00\x00")

func assetsLatestConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsLatestConsoleHtml,
		"assets/latest/console.html",
	)
}

func assetsLatestConsoleHtml() (*asset, error) {
	bytes, err := assetsLatestConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/latest/console.html", size: 2283, mode: os.FileMode(420), modTime: time.Unix(1582640407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\xe0\x17\x5f\xf4\x65\x22\x9d\xae\xc0\x0a\xd9\x0a\x50\xac\x18\x36\x6c\x03\x02\xb4\xd9\x6b\xc0\x50\x27\xe9\x52\x8a\xd4\x78\xb4\x13\xd7\xf0\xff\x3e\xe8\xb7\xec\x64\x4d\x57\x14\x7e\x21\xef\xf7\xe7\x73\xc7\x93\x37\x55\xac\x2d\x58\xed\xca\x4c\xa0\x4b\xb6\x2c\xae\x2e\x00\x36\x15\xea\xbc\x3d\x00\x6c\x2c\xb9\x4f\x10\xd0\x66\x82\x8c\x77\x02\xe2\xbe\xc1\x4c\x50\xad\x4b\x54\x8d\x2b\x05\x54\x01\x8b\x4c\x54\x31\x36\x9c\x2a\x55\x06\xdd\x54\x7f\xdb\x04\x5d\x49\x0e\x13\x93\x3b\x59\x69\xde\x06\x2d\xc9\x2b\xe3\x1d\x7b\x8b\x4a\x33\x63\x64\x65\x7c\x5d\x7b\xa7\xa8\x2e\x55\xa1\x77\x6d\xf8\xdb\x32\x20\x3a\xd9\xc5\x55\x43\x01\x6c\x02\x35\xb1\xbf\x00\x3c\x90\xcb\xfd\x83\xbc\xbd\x45\xb7\x83\x0c\x0e\x83\x18\x40\x37\xf4\xab\xe7\x98\xc2\xe1\x20\x87\xf3\xf1\xf8\xc3\x52\x7d\xed\x43\x4c\x41\xf4\xfa\xf6\x72\x3c\x8a\xd9\xc0\x58\xfa\x0b\x03\x93\x77\x5d\x88\xf9\xba\x8c\x92\xeb\xa8\xdf\x35\x74\x13\x6c\x67\x34\x5f\x9f\x31\x5a\x46\x3b\x15\x2d\x8d\x0f\x87\x04\xa8\x80\x96\xa4\x77\xc6\x20\xf3\xef\xb8\x87\xe3\x71\xae\x7b\x14\xf6\xc0\xf2\x9a\xdc\x07\x34\x01\xe3\x69\x10\x40\xcb\x78\xe2\x37\x5b\xbe\xe4\xe9\x72\x48\x16\x9e\xdb\x60\xaf\x03\x16\xf4\x98\x82\x50\x4b\x82\xfa\xe6\xfd\xe9\x73\x4c\x41\x18\x4b\xa7\xe4\xdd\xdc\xfc\xf6\x7e\x64\xae\x3d\x2f\xb3\xa0\xd3\x77\x16\x3f\xa2\xc5\x1a\x63\xe8\xa1\x9c\xc9\x4e\x7a\xd5\x8d\xc7\xb5\x8e\x55\x0a\xdf\x32\x58\x8b\xc2\x18\xc3\x0e\xc3\xd4\x8a\xb6\xf9\x27\xa2\xc5\x08\x1c\xd7\xfd\xbc\xa9\x79\xe0\x36\x6a\x7c\x08\x9b\x3b\x9f\xef\xc7\x81\x8c\x7b\x8b\xfd\x59\xd6\x9a\xdc\xcf\xde\x45\x74\x71\x9a\xc5\x9c\xb8\xb1\x7a\x9f\xc2\x2b\xe7\x1d\xbe\x5a\x0f\x62\xdf\x68\x43\x71\x9f\xc2\x6a\x94\xc4\xa0\x1d\x53\xec\x2a\x1b\xb4\x20\x5f\xaf\x18\x2c\x39\xd4\xa1\x37\x3b\x3e\x49\x24\xb9\xf2\x0f\xcf\x64\xbb\xb3\xde\x7c\x7a\x9a\xee\xf2\x1b\xd2\x6d\xd4\x00\xb2\xbf\xe5\xb4\x03\xca\x33\x61\xbd\xce\xc9\x95\x62\x7c\x8c\x9d\xc2\x58\xcd\x9c\x89\x46\x97\x98\x8c\x06\xd0\xb9\x67\x62\xb0\xab\xc9\x25\x15\x52\x59\xc5\x14\x2e\x57\xab\x5d\xb5\x9e\x5e\x73\xde\x36\xf9\x72\xb5\xfa\xff\xfa\x1c\x4f\x61\xf1\x71\x14\x6a\x4b\xa5\x4b\x28\x62\xcd\x29\x18\x74\x11\xc3\xa8\x2a\xbc\x8b\x49\xa1\x6b\xb2\xfb\x14\x58\x3b\x4e\x18\x03\x15\xa3\xfa\x7e\xcb\x91\x8a\x7d\x62\x7a\xee\xce\xbd\x27\x28\x6d\x5f\x1b\xed\x46\x34\xe7\x08\x86\x3c\x4c\x9f\x31\x85\xd7\x58\xaf\x27\x79\xad\x43\x49\x2e\x89\xbe\x49\x21\xf9\x71\xa9\x31\xde\xfa\x90\xc2\xff\xde\xbe\x69\x7f\xb3\x7c\x91\xf3\x8f\x9e\x2f\x29\xe5\xc8\xa8\x6a\xab\x98\xf8\x55\x39\xed\x86\xa9\x5b\x1c\xc7\x76\x0c\x98\xc4\x58\xf4\x62\x46\xc4\xd5\xd2\x61\xde\xe1\x1d\x2a\xae\x10\xe3\xf9\xe2\x36\xb9\xbb\x67\x69\xac\xdf\xe6\x85\xd5\x01\xa5\xf1\xb5\xd2\xf7\xfa\x51\x59\xba\x63\xd5\xc1\xd7\x0f\xc8\xbe\x46\xf5\x46\xfe\x24\x57\xca\xf0\xa9\x58\xd6\xe4\xa4\x61\x16\x6a\x98\x9b\xc3\xa1\x5b\x6d\xc6\xd2\x87\xa8\x23\x99\xf7\x14\xda\x15\xf5\x72\x4d\x8a\x3b\x7b\xd5\x02\xea\x22\x82\xa9\x74\x60\x8c\x99\xb8\xf9\xf8\x4b\xf2\x56\x9c\x7e\x1b\x80\x83\x99\x9d\x76\xe8\x72\x1f\xe4\xfd\x53\xaf\xab\xe5\xdb\xfe\x17\xef\x2e\xe5\x97\x7d\x47\x6c\xe3\xca\xfd\x7a\x8e\xff\xcb\xc7\xb1\xdd\xd9\xdd\x69\xda\x54\x13\x1d\xb2\xfc\xfc\x55\x8c\x7c\xa7\xb4\x13\xa1\xcf\xe5\xfd\x12\xa7\xdf\x13\xf6\x8b\xd9\x2f\xe6\xaf\x59\xdf\x93\x8d\xea\x77\xf6\x46\xb5\xff\x71\xae\x2e\xfe\x09\x00\x00\xff\xff\xdd\xc2\x97\xba\xeb\x08\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 2283, mode: os.FileMode(420), modTime: time.Unix(1585823869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8b\xe3\x36\x10\x7e\xbf\xbf\x62\x50\x29\xf7\x52\x4b\xb9\xeb\x41\x0f\x27\x5e\x38\x5a\x4a\x4b\x5b\x38\xe8\x6d\x5f\x17\xad\x3c\xb6\x67\x4f\x1e\xb9\x1a\x25\xbb\x69\xc8\xff\x5e\xfc\x2b\x71\xb2\x07\x4b\x4b\x4b\x5e\xa4\xf9\xf5\xcd\x37\x23\x7f\xd9\x34\xa9\xf5\xe0\x2d\xd7\x85\x42\xce\xb6\xa2\x6e\x5e\x01\x6c\x1a\xb4\x65\x7f\x00\xd8\x78\xe2\xcf\x10\xd1\x17\x8a\x5c\x60\x05\x69\xdf\x61\xa1\xa8\xb5\x35\x9a\x8e\x6b\x05\x4d\xc4\xaa\x50\x4d\x4a\x9d\xe4\xc6\xd4\xd1\x76\xcd\x9f\x3e\x43\xae\x89\x31\x73\x25\xeb\xc6\xca\x36\x5a\x4d\xc1\xb8\xc0\x12\x3c\x1a\x2b\x82\x49\x8c\x0b\x6d\x1b\xd8\x50\x5b\x9b\xca\xee\xfa\xf2\x77\x75\x44\x64\x3d\xd4\x35\x53\x03\xe2\x22\x75\x69\xbc\x00\x3c\x12\x97\xe1\x51\xdf\xdd\x21\xef\xa0\x80\xc3\x64\x06\xb0\x1d\xfd\x14\x24\xe5\x70\x38\xe8\xe9\x7c\x3c\x7e\xb3\x74\x7f\x0c\x31\xe5\xa0\x46\x7f\x7f\x39\x1e\xd5\x39\xc0\x79\xfa\x03\xa3\x50\xe0\xa1\xc4\xf9\xba\xac\x52\xda\x64\x3f\x74\x74\x1b\xfd\x10\x74\xbe\x7e\x21\x68\x59\xed\xd2\xb4\x0c\x3e\x1c\x32\xa0\x0a\xfa\x21\x7d\x70\x0e\x45\x7e\xc1\x3d\x1c\x8f\xe7\xbe\x67\xe3\x48\xac\x6c\x89\x7f\x47\x17\x31\x5d\x16\x01\xf4\x82\x17\x79\xe7\xc8\x97\x32\xb9\x84\x6c\x91\xb9\x8d\xfe\x63\xc4\x8a\x9e\x72\x50\x66\x39\xa0\x71\x79\xbf\x85\x12\x73\x50\xce\xd3\xe5\xf0\x6e\x6f\x7f\xfe\x61\x9e\x5c\x7f\x5e\xa2\x20\xdb\x7b\x8f\x9f\xd0\x63\x8b\x29\x8e\x54\xae\x6c\xa7\x06\x8e\xeb\x71\xed\xe6\xbc\xf7\x8d\x99\xdf\xe3\xe6\x3e\x94\xfb\xf9\x5d\xa4\xbd\xc7\xf1\xac\x5b\x4b\xfc\x7d\xe0\x84\x9c\x4e\x4f\xa2\x24\xe9\xbc\xdd\xe7\xf0\x9a\x03\xe3\xeb\xf5\x64\x0e\x9d\x75\x94\xf6\x39\xac\x66\x4b\x8a\x96\x85\xd2\xb0\xab\xc9\x0b\xfa\xed\x4a\xc0\x13\xa3\x8d\x63\xd8\xf1\x19\x90\x96\x26\x3c\x7e\x01\xed\xde\x07\xf7\xf9\x39\xdc\x9b\x7f\x01\xb7\x31\x13\xc9\xf1\x56\xd2\x0e\xa8\x2c\x94\x0f\xb6\x24\xae\xd5\xfc\x4d\x0c\x0e\xe7\xad\x48\xa1\x3a\x5b\x63\x36\x07\xc0\x90\x5e\xa8\x29\xae\x25\xce\x1a\xa4\xba\x49\x39\xbc\x59\xad\x76\xcd\xfa\xf4\x51\x95\xa9\x19\x6c\x5f\xaf\xaf\xf9\x54\x1e\x9f\x66\xa3\xf5\x54\x73\x46\x09\x5b\xc9\xc1\x21\x27\x8c\xb3\xab\x0a\x9c\xb2\xca\xb6\xe4\xf7\x39\x88\x65\xc9\x04\x23\x55\xb3\xfb\x61\x2b\x89\xaa\x7d\xe6\xc6\xd9\x5d\x67\x9f\xa8\xf4\x7b\xed\x2c\xcf\x6c\xae\x19\x4c\x38\x42\x7f\x61\x0e\x6f\xb1\x5d\x9f\xec\xad\x8d\x35\x71\x96\x42\x97\x43\xf6\xed\xd2\xe3\x82\x0f\x31\x87\xaf\xde\xbf\xeb\x7f\x67\xfb\x02\xf3\xd7\x71\x5e\x5a\xeb\x79\xa2\xa6\xef\xe2\x34\x5f\x53\xd2\x6e\x7a\x75\x8b\xe3\xbc\x8e\x89\x93\x9a\x9b\x5e\xbc\x11\x75\xb3\x4c\x38\x4b\xe9\xc0\x4a\x1a\xc4\x74\xad\x9f\xae\xe4\x07\xd1\xce\x87\x6d\x59\x79\x1b\x51\xbb\xd0\x1a\xfb\x60\x9f\x8c\xa7\x7b\x31\x03\x7d\xfb\x88\x12\x5a\x34\xef\xf4\x77\x7a\x65\x9c\x5c\x9a\x75\x4b\xac\x9d\x88\x32\xff\x00\x56\x52\x88\xb6\x46\x5d\x87\x50\x7b\xb4\x1d\xc9\x00\x3c\x4a\x77\x76\x29\xea\x27\x19\xef\x65\x65\x50\xf2\x93\xae\x99\x9e\xfb\x00\x0e\xae\xb1\x51\x30\x15\xea\xf6\xd3\x8f\xd9\x7b\x75\xa9\xe6\x20\xd1\xfd\xf7\xe0\x3b\xe4\x32\x44\xfd\xf0\x1c\xfd\x66\x29\x27\xff\x73\x17\xc3\x08\x5e\xea\x61\x63\x46\x25\xdb\x98\xfe\x0f\xf8\xe6\xd5\xdf\x01\x00\x00\xff\xff\xad\xa2\xb0\x4a\x88\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1928, mode: os.FileMode(420), modTime: time.Unix(1581328275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\xe0\x17\x5f\xf4\x65\x22\x9d\xae\xc0\x0a\xd9\x0a\x50\xac\x18\x36\x6c\x03\x02\xb4\xd9\x6b\xc0\x50\x27\xe9\x52\x8a\xd4\x78\xb4\x13\xd7\xf0\xff\x3e\xe8\xb7\xec\x64\x4d\x57\x14\x7e\x21\xef\xf7\xe7\x73\xc7\x93\x37\x55\xac\x2d\x58\xed\xca\x4c\xa0\x4b\xb6\x2c\xae\x2e\x00\x36\x15\xea\xbc\x3d\x00\x6c\x2c\xb9\x4f\x10\xd0\x66\x82\x8c\x77\x02\xe2\xbe\xc1\x4c\x50\xad\x4b\x54\x8d\x2b\x05\x54\x01\x8b\x4c\x54\x31\x36\x9c\x2a\x55\x06\xdd\x54\x7f\xdb\x04\x5d\x49\x0e\x13\x93\x3b\x59\x69\xde\x06\x2d\xc9\x2b\xe3\x1d\x7b\x8b\x4a\x33\x63\x64\x65\x7c\x5d\x7b\xa7\xa8\x2e\x55\xa1\x77\x6d\xf8\xdb\x32\x20\x3a\xd9\xc5\x55\x43\x01\x6c\x02\x35\xb1\xbf\x00\x3c\x90\xcb\xfd\x83\xbc\xbd\x45\xb7\x83\x0c\x0e\x83\x18\x40\x37\xf4\xab\xe7\x98\xc2\xe1\x20\x87\xf3\xf1\xf8\xc3\x52\x7d\xed\x43\x4c\x41\xf4\xfa\xf6\x72\x3c\x8a\xd9\xc0\x58\xfa\x0b\x03\x93\x77\x5d\x88\xf9\xba\x8c\x92\xeb\xa8\xdf\x35\x74\x13\x6c\x67\x34\x5f\x9f\x31\x5a\x46\x3b\x15\x2d\x8d\x0f\x87\x04\xa8\x80\x96\xa4\x77\xc6\x20\xf3\xef\xb8\x87\xe3\x71\xae\x7b\x14\xf6\xc0\xf2\x9a\xdc\x07\x34\x01\xe3\x69\x10\x40\xcb\x78\xe2\x37\x5b\xbe\xe4\xe9\x72\x48\x16\x9e\xdb\x60\xaf\x03\x16\xf4\x98\x82\x50\x4b\x82\xfa\xe6\xfd\xe9\x73\x4c\x41\x18\x4b\xa7\xe4\xdd\xdc\xfc\xf6\x7e\x64\xae\x3d\x2f\xb3\xa0\xd3\x77\x16\x3f\xa2\xc5\x1a\x63\xe8\xa1\x9c\xc9\x4e\x7a\xd5\x8d\xc7\xb5\x8e\x55\x0a\xdf\x32\x58\x8b\xc2\x18\xc3\x0e\xc3\xd4\x8a\xb6\xf9\x27\xa2\xc5\x08\x1c\xd7\xfd\xbc\xa9\x79\xe0\x36\x6a\x7c\x08\x9b\x3b\x9f\xef\xc7\x81\x8c\x7b\x8b\xfd\x59\xd6\x9a\xdc\xcf\xde\x45\x74\x71\x9a\xc5\x9c\xb8\xb1\x7a\x9f\xc2\x2b\xe7\x1d\xbe\x5a\x0f\x62\xdf\x68\x43\x71\x9f\xc2\x6a\x94\xc4\xa0\x1d\x53\xec\x2a\x1b\xb4\x20\x5f\xaf\x18\x2c\x39\xd4\xa1\x37\x3b\x3e\x49\x24\xb9\xf2\x0f\xcf\x64\xbb\xb3\xde\x7c\x7a\x9a\xee\xf2\x1b\xd2\x6d\xd4\x00\xb2\xbf\xe5\xb4\x03\xca\x33\x61\xbd\xce\xc9\x95\x62\x7c\x8c\x9d\xc2\x58\xcd\x9c\x89\x46\x97\x98\x8c\x06\xd0\xb9\x67\x62\xb0\xab\xc9\x25\x15\x52\x59\xc5\x14\x2e\x57\xab\x5d\xb5\x9e\x5e\x73\xde\x36\xf9\x72\xb5\xfa\xff\xfa\x1c\x4f\x61\xf1\x71\x14\x6a\x4b\xa5\x4b\x28\x62\xcd\x29\x18\x74\x11\xc3\xa8\x2a\xbc\x8b\x49\xa1\x6b\xb2\xfb\x14\x58\x3b\x4e\x18\x03\x15\xa3\xfa\x7e\xcb\x91\x8a\x7d\x62\x7a\xee\xce\xbd\x27\x28\x6d\x5f\x1b\xed\x46\x34\xe7\x08\x86\x3c\x4c\x9f\x31\x85\xd7\x58\xaf\x27\x79\xad\x43\x49\x2e\x89\xbe\x49\x21\xf9\x71\xa9\x31\xde\xfa\x90\xc2\xff\xde\xbe\x69\x7f\xb3\x7c\x91\xf3\x8f\x9e\x2f\x29\xe5\xc8\xa8\x6a\xab\x98\xf8\x55\x39\xed\x86\xa9\x5b\x1c\xc7\x76\x0c\x98\xc4\x58\xf4\x62\x46\xc4\xd5\xd2\x61\xde\xe1\x1d\x2a\xae\x10\xe3\xf9\xe2\x36\xb9\xbb\x67\x69\xac\xdf\xe6\x85\xd5\x01\xa5\xf1\xb5\xd2\xf7\xfa\x51\x59\xba\x63\xd5\xc1\xd7\x0f\xc8\xbe\x46\xf5\x46\xfe\x24\x57\xca\xf0\xa9\x58\xd6\xe4\xa4\x61\x16\x6a\x98\x9b\xc3\xa1\x5b\x6d\xc6\xd2\x87\xa8\x23\x99\xf7\x14\xda\x15\xf5\x72\x4d\x8a\x3b\x7b\xd5\x02\xea\x22\x82\xa9\x74\x60\x8c\x99\xb8\xf9\xf8\x4b\xf2\x56\x9c\x7e\x1b\x80\x83\x99\x9d\x76\xe8\x72\x1f\xe4\xfd\x53\xaf\xab\xe5\xdb\xfe\x17\xef\x2e\xe5\x97\x7d\x47\x6c\xe3\xca\xfd\x7a\x8e\xff\xcb\xc7\xb1\xdd\xd9\xdd\x69\xda\x54\x13\x1d\xb2\xfc\xfc\x55\x8c\x7c\xa7\xb4\x13\xa1\xcf\xe5\xfd\x12\xa7\xdf\x13\xf6\x8b\xd9\x2f\xe6\xaf\x59\xdf\x93\x8d\xea\x77\xf6\x46\xb5\xff\x71\xae\x2e\xfe\x09\x00\x00\xff\xff\xdd\xc2\x97\xba\xeb\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2283, mode: os.FileMode(420), modTime: time.Unix(1582640407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/latest/console.html": assetsLatestConsoleHtml,
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"latest": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsLatestConsoleHtml, map[string]*bintree{}},
		}},
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

