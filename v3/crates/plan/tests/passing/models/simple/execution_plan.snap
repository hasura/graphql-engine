---
source: crates/plan/tests/plan_golden_tests.rs
expression: execution_plan
input_file: crates/plan/tests/passing/models/simple/query.json
---
Queries(
    {
        Alias(
            Identifier(
                "authors",
            ),
        ): QueryExecutionTree {
            remote_predicates: PredicateQueryTrees(
                {},
            ),
            query_execution_plan: QueryExecutionPlan {
                query_node: QueryNode {
                    limit: Some(
                        5,
                    ),
                    offset: None,
                    order_by: None,
                    predicate: None,
                    aggregates: None,
                    fields: Some(
                        FieldsSelection {
                            fields: {
                                NdcFieldAlias(
                                    "album_id",
                                ): Column {
                                    column: DataConnectorColumnName(
                                        "AlbumId",
                                    ),
                                    fields: None,
                                    arguments: {},
                                },
                                NdcFieldAlias(
                                    "album_title",
                                ): Column {
                                    column: DataConnectorColumnName(
                                        "Title",
                                    ),
                                    fields: None,
                                    arguments: {},
                                },
                            },
                        },
                    ),
                    group_by: None,
                },
                collection: CollectionName(
                    "Album",
                ),
                arguments: {},
                collection_relationships: {},
                variables: None,
                data_connector: DataConnectorLink {
                    name: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: DataConnectorName(
                            Identifier(
                                "db",
                            ),
                        ),
                    },
                    url: SingleUrl(
                        SerializableUrl(
                            Url {
                                scheme: "http",
                                cannot_be_a_base: false,
                                username: "",
                                password: None,
                                host: Some(
                                    Domain(
                                        "localhost",
                                    ),
                                ),
                                port: Some(
                                    8080,
                                ),
                                path: "/",
                                query: None,
                                fragment: None,
                            },
                        ),
                    ),
                    headers: SerializableHeaderMap(
                        {
                            "hasura-m-auth-token": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~!#$&'()*+,/:;=?@[]\"",
                        },
                    ),
                    response_config: None,
                    capabilities: DataConnectorCapabilities {
                        supported_ndc_version: V01,
                        supports_explaining_queries: true,
                        supports_explaining_mutations: false,
                        supports_nested_object_filtering: true,
                        supports_nested_object_ordering: true,
                        supports_nested_object_array_filtering: false,
                        supports_nested_scalar_array_filtering: false,
                        supports_aggregates: Some(
                            DataConnectorAggregateCapabilities {
                                supports_nested_object_aggregations: false,
                                aggregate_count_scalar_type: None,
                                supports_grouping: None,
                            },
                        ),
                        supports_query_variables: true,
                        supports_relationships: Some(
                            DataConnectorRelationshipCapabilities {
                                supports_relation_comparisons: true,
                                supports_nested_relationships: Some(
                                    DataConnectorNestedRelationshipCapabilities {
                                        supports_nested_array_selection: true,
                                        supports_nested_in_filtering: false,
                                        supports_nested_in_ordering: false,
                                    },
                                ),
                            },
                        ),
                        supports_relational_queries: None,
                    },
                },
            },
            remote_join_executions: JoinLocations {
                locations: {},
            },
        },
    },
)
