### See README.md
#
# This tells graphql-bench that it's testing a hasura instance and should
# collect some additional metrics:
extended_hasura_checks: true
headers:
  X-Hasura-Admin-Secret: my-secret
  X-Hasura-Role: employee
  X-Hasura-User-Id: 4
  # On cloud about 95% of requests incoming Accept gzip (which as of writing
  # means we unconditionally compress, which has significant performance
  # impact), so it's important that we include it in all benchmarks unless we
  # have an intentional reason not to.
  Accept-Encoding: gzip

# Anchors to help us DRY below; settings here may be overridden selectively
constants:
  scalars:
    # We'll measure at just two consistent load levels, which makes comparing
    # benchmarks within the same run useful.
    #
    # NOTE: a load of 500 may cause hasura to fall over on a laptop. On our
    # beefy CI benchmark runner we cannot sustain 1,000 RPS for the
    # "large_result" queries.
    - &low_load 20
    - &high_load 500

  k6_custom: &k6_custom
    tools: [k6]
    execution_strategy: CUSTOM

  settings: &settings
    # This is equivalent to wrk2's approach:
    executor: 'constant-arrival-rate'
    timeUnit: '1s'
    maxVUs: 500 # NOTE: required, else defaults to `preAllocatedVUs`
    # NOTE: ideally we'd test all of the queries with the same *number of requests*
    # but that would mean running the "low_load" queries for much longer than
    # is acceptable.
    duration: '60s'

queries:
  - name: very_slow_query
    <<: *k6_custom
    options:
      k6:
        # NOTE: setting this to true will ignore graphql-layer errors, which
        # still return a 200 HTTP status code.  Unfortunately we need to set to
        # `true` so that we aren't measuring e.g. decompression on the k6 side
        # (see: https://github.com/grafana/k6/issues/2685)
        discardResponseBodies: true
        scenarios:
          main:
            <<: *settings
            rate: *low_load
            # tune this so it's just high enough that we can expect to not need
            # to allocate during the test:
            preAllocatedVUs: 10
    query:
       query LongQuery {
         Track {
           Name
           Milliseconds
           Album {
             ArtistId
             AlbumId
             Title
             Artist {
               ArtistId
               Name
               Albums {
                 AlbumId
                 Title
                 Tracks {
                   AlbumId
                   Bytes
                   Composer
                 }
               }
             }
             Tracks {
               InvoiceLines {
                 Quantity
                 InvoiceId
               }
               Genre {
                 Name
                 GenreId
               }
               PlaylistTracks {
                 TrackId
                 PlaylistId
                 Playlist {
                   Name
                   PlaylistId
                 }
               }
             }
           }
         }
       }
