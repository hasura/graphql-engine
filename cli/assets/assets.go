// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5f\x6b\xfb\x36\x14\x7d\xff\x7d\x8a\x8b\xc6\xe8\xcb\x2c\xa5\x5d\x61\xc5\xb1\x03\x63\x30\x06\xdb\xa0\x0f\xeb\x5e\x8b\x2a\x5f\xdb\x37\x95\x25\x4f\x57\x49\xea\x95\x7c\xf7\xe1\x7f\x89\x9b\x0c\xc6\xca\x46\x5e\x74\xff\x48\xe7\x9e\x23\xe5\x38\xab\x63\x63\xc1\x6a\x57\xe5\x02\x5d\xb2\x63\xb1\xf9\x02\x90\xd5\xa8\x8b\x7e\x01\x90\x59\x72\xaf\x10\xd0\xe6\x82\x8c\x77\x02\x62\xd7\x62\x2e\xa8\xd1\x15\xaa\xd6\x55\x02\xea\x80\x65\x2e\xea\x18\x5b\x4e\x95\xe2\xe8\x83\xae\x50\x56\xde\x57\x16\x75\x4b\x2c\x8d\x6f\x54\xad\x79\x17\x74\x52\x05\xdd\xd6\x7f\xd8\x04\x5d\x45\x0e\x95\xf1\x8e\xbd\x45\xa5\x99\x31\xb2\x2a\xf5\xbe\xc7\x90\xc3\xb1\x6a\xc2\x67\x13\xa8\x8d\x63\x00\x07\x72\x85\x3f\xc8\xe7\x67\x74\x7b\xc8\xe1\x7d\xcc\x02\xe8\x96\x7e\xf2\x1c\x53\x78\x7f\x97\xd3\xfa\x78\xfc\x66\x51\x7d\xf4\x21\xa6\x20\xc6\x72\x1f\x1c\x8f\xe2\x54\x37\x96\x7e\xc7\xc0\xe4\xdd\x70\xc0\x39\x5c\x9c\x51\xe8\xa8\xbf\x6f\xe9\x29\xd8\xa1\xe7\x1c\x5e\xf7\x2c\xcf\xfa\x98\x5a\xce\x64\x0c\x32\xff\x8c\xdd\x38\xf3\x1c\x2d\x3a\x76\xc1\x3e\x06\x2c\xe9\x2d\x05\xa1\x16\xc3\x8e\x9a\xfd\xea\x0b\x4c\x41\x18\x4b\x62\xac\x1c\xd7\xa3\x5e\xea\x2c\x58\xa6\xe6\x7b\xcc\x5e\x7c\xd1\xcd\x82\xc6\xce\xe2\xb8\x96\x8d\x26\xf7\x83\x77\x11\x5d\x3c\x89\x59\x10\xb7\x56\x77\x29\xdc\x38\xef\xf0\x66\x3d\xa5\x7d\xab\x0d\xc5\x2e\x85\xd5\x9c\x89\x41\x3b\xa6\x38\x50\x9d\xaa\x20\xef\x56\x0c\x96\x1c\xea\x30\xb6\x1d\xaf\x80\x24\xd7\xfe\xf0\x37\x68\x2f\xd6\x9b\xd7\x6b\xb8\xdb\x4f\xc0\x65\x6a\x22\x39\x46\x05\xed\x81\x8a\x5c\x58\xaf\x0b\x72\x95\x98\x1e\xd3\x58\x30\x56\x33\xe7\xa2\xd5\x15\x26\x73\x03\x0c\xdb\xf3\x49\x59\x68\xc8\x25\x35\x52\x55\xc7\x14\x6e\x57\xab\x7d\x3d\x8f\x74\xa0\x22\xd6\x43\xee\xeb\xf5\x25\x9f\xd2\xe2\xdb\x9c\xd4\x96\x2a\x97\x50\xc4\x86\x53\x30\xe8\x22\x86\xb9\x54\x7a\x17\x93\x52\x37\x64\xbb\x14\x58\x3b\x4e\x18\x03\x95\x73\x79\xbb\xe3\x48\x65\x97\x98\x51\xbb\xcb\xdd\x27\x2a\xfd\xbd\xb6\xda\xcd\x6c\x2e\x19\x4c\x38\x4c\x7f\x62\x0a\x77\xd8\xac\x4f\xf9\x46\x87\x8a\x5c\x12\x7d\x9b\x42\xf2\xed\xb2\x62\xbc\xf5\x21\x85\xaf\x1e\xee\xfb\xdf\x39\xbf\xc0\xfc\x65\xd4\x4b\x4a\x39\x2b\xaa\xfa\x29\x4e\xfa\xaa\x82\xf6\xd3\xab\x5b\x2c\xe7\xeb\x98\x38\x89\x79\xe8\xc5\x1b\x11\x9b\xe5\x86\xb3\x05\x0d\xac\xb8\x46\x8c\x97\xbe\x63\x0a\xb7\x65\x69\xac\xdf\x15\xa5\xd5\x01\x07\xd7\xd1\x5b\xfd\xa6\x2c\xbd\xb0\x1a\xe8\xeb\x03\xb2\x6f\x50\xdd\xcb\xef\xe4\x4a\x19\xfe\x98\x96\x0d\x39\x69\x98\x85\xfa\x17\xb0\x9f\xb2\xbb\xfe\x0f\x3f\x38\xde\xc9\x16\x54\xcf\x7d\x00\x07\x53\xeb\xc0\x18\x73\xf1\xf4\xdb\x8f\xc9\x83\xf8\x68\x83\xc0\xc1\xfc\xf7\xe0\x7b\x74\x85\x0f\x72\x7b\x8d\xbe\x59\xda\xc9\xff\x3c\xc5\x20\xc1\x3f\xcd\x90\xa9\xd1\xc9\x32\xd5\x7f\xb8\x36\x5f\xfe\x0a\x00\x00\xff\xff\xdf\x70\xc8\xd7\xc0\x06\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 1728, mode: os.FileMode(420), modTime: time.Unix(1530784921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\xab\xe3\x36\x10\x7d\xdf\x5f\x21\x54\xca\xbe\xd4\x52\x76\xbb\xd0\xc5\xb1\x03\xa5\x50\x0a\x6d\x61\x1f\x76\xfb\x7a\x99\xc8\x63\x7b\x72\x65\xc9\xd5\x28\xc9\x75\x2f\xfe\xef\xc5\x5f\x89\x6f\x52\x28\xbd\x74\xc9\x8b\xe6\xcc\x78\xce\xcc\x91\x38\xc9\xea\xd8\x58\x61\xc1\x55\xb9\x44\x97\x1c\x59\xee\xde\x08\x91\xd5\x08\xc5\x70\x10\x22\xb3\xe4\x1e\x45\x40\x9b\x4b\x32\xde\x49\x11\xbb\x16\x73\x49\x0d\x54\xa8\x5b\x57\x49\x51\x07\x2c\x73\x59\xc7\xd8\x72\xaa\x35\x47\x1f\xa0\x42\x55\x79\x5f\x59\x84\x96\x58\x19\xdf\xe8\x1a\xf8\x18\x20\xa9\x02\xb4\xf5\x9f\x36\x41\x57\x91\x43\x6d\xbc\x63\x6f\x51\x03\x33\x46\xd6\x25\x9c\x06\x0e\x35\xb6\xd5\x33\x3f\x9b\x40\x6d\x9c\x02\x71\x26\x57\xf8\xb3\x7a\x78\x40\x77\x12\xb9\x78\x9e\x50\x21\xa0\xa5\x5f\x3c\xc7\x54\x3c\x3f\xab\xf9\xdc\xf7\xdf\xad\xb2\x9f\x7c\x88\xa9\x90\x53\x7a\x08\xfa\x5e\x5e\xf2\xc6\xd2\x1f\x18\x98\xbc\x1b\x1b\x5c\xc3\x55\x8f\x02\x22\xfc\xd8\xd2\x97\x60\xc7\x9a\x6b\x78\x5f\xb3\xee\xf5\x12\x5a\xcf\x64\x0c\x32\xff\x8a\xdd\x34\xf3\x12\xad\x2a\x8e\xc1\x7e\x0a\x58\xd2\x53\x2a\xa4\x5e\x0d\x3b\x69\xf6\xbb\x2f\x30\x15\xd2\x58\xba\xa6\x0a\x62\xd8\x5b\xfc\x8c\x16\x1b\x8c\x61\x6a\x7d\x0b\xf6\xfd\x54\xde\x6f\x27\x7d\xf5\x55\xe0\x4c\x2f\xf7\x9e\xed\x7d\xd1\x2d\x17\x10\x3b\x8b\xd3\x59\x35\x40\xee\x27\xef\x22\xba\x78\x11\xbf\x20\x6e\x2d\x74\xa9\x78\xeb\xbc\xc3\xb7\xdb\x19\xf6\x2d\x18\x8a\x5d\x2a\x36\x0b\x12\x03\x38\xa6\x38\x4a\x33\x67\x85\x7a\xbf\x61\x61\xc9\x21\x84\xa9\xac\xbf\x23\x52\x5c\xfb\xf3\x3f\xb0\xed\xad\x37\x8f\xf7\x74\xef\x5e\x41\x97\xe9\x79\xc9\x29\x2a\xe8\x24\xa8\xc8\xa5\xf5\x50\x90\xab\xe4\xfc\xf8\xa6\x84\xb1\xc0\x9c\xcb\x16\x2a\x4c\x96\x02\x31\x7e\x9e\xcb\xb9\xae\x21\x97\xd4\x48\x55\x1d\x53\xf1\x6e\xb3\x39\xd5\xcb\x48\x67\x2a\x62\x3d\x62\xdf\x6e\x6f\xf7\x29\x2d\x3e\x2d\x20\x58\xaa\x5c\x42\x11\x1b\x4e\x85\x41\x17\x31\x2c\xa9\xd2\xbb\x98\x94\xd0\x90\xed\x52\xc1\xe0\x38\x61\x0c\x54\x2e\xe9\xc3\x91\x23\x95\x5d\x62\x26\xed\x6e\xbf\xbe\xac\x32\xdc\x6b\x0b\x6e\xd9\xe6\x76\x83\x99\x87\xe9\x2f\x4c\xc5\x7b\x6c\xb6\x17\xbc\x81\x50\x91\x4b\xa2\x6f\x53\x91\x7c\xbf\xce\x18\x6f\x7d\x48\xc5\x37\x1f\x3f\x0c\xbf\x2b\xbe\xe2\xfc\x6d\xd2\x4b\x29\xb5\x28\xaa\x87\x29\x2e\xfa\xea\x82\x4e\xf3\xab\x5b\x1d\x97\xeb\x98\x77\x92\xcb\xd0\xab\x37\x22\x77\xeb\x0f\xae\x96\x35\x6e\xc5\x35\x62\xbc\xf5\x29\x53\xb8\x03\x2b\x63\xfd\xb1\x28\x2d\x04\x1c\x5d\x0a\x0e\xf0\xa4\x2d\xed\x59\x8f\xeb\xc3\x19\xd9\x37\xa8\x3f\xa8\x1f\xd4\x46\x1b\x7e\x09\xab\x86\x9c\x32\xcc\x52\xff\x07\xda\x57\xd9\xe3\x60\x10\xa3\x43\x5e\x6c\x44\x0f\xbb\x8f\xe4\xc2\xd4\x10\x18\x63\x2e\xbf\x7c\xfe\x39\xf9\x28\x5f\xda\xa6\xe0\x60\xfe\x7f\xf2\x13\xba\xc2\x07\x75\xb8\x67\xdf\xad\xed\xe4\x2b\x4f\x31\x4a\xf0\x6f\x33\x64\x7a\x72\xb2\x4c\x0f\x7f\x74\xbb\x37\x7f\x07\x00\x00\xff\xff\x55\x3e\x1f\x59\xf0\x06\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1776, mode: os.FileMode(420), modTime: time.Unix(1544700282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5f\x8f\xdc\x34\x10\x7f\xef\xa7\x18\x19\xa1\xbe\x10\x7b\x5b\x2a\x51\xe5\x36\x27\x21\x10\x42\x02\xa4\x4a\xb4\xbc\x56\x73\xce\x24\x99\xab\x63\x07\x8f\x77\xf7\x96\x55\xbe\x3b\xca\xbf\xdd\xdc\x1e\x50\x28\xa0\xbc\x78\xfe\xcf\xef\x37\xce\x78\xdb\xa4\xd6\x81\x43\x5f\x17\x8a\x7c\xb6\x13\x75\xfb\x0c\x60\xdb\x10\x96\xc3\x01\x60\xeb\xd8\x7f\x80\x48\xae\x50\x6c\x83\x57\x90\x8e\x1d\x15\x8a\x5b\xac\xc9\x74\xbe\x56\xd0\x44\xaa\x0a\xd5\xa4\xd4\x49\x6e\x8c\xa4\x10\xb1\x26\x5d\x87\x50\x3b\xc2\x8e\x45\xdb\xd0\x9a\x06\x65\x17\x31\xab\x23\x76\xcd\xaf\x2e\x23\x5f\xb3\x27\x63\x83\x97\xe0\xc8\xa0\x08\x25\x31\x15\xee\x87\x1a\x7a\x4c\x6b\xe6\xfa\x62\x23\x77\x69\x12\xe0\xc0\xbe\x0c\x07\xfd\xfe\x3d\xf9\x3d\x14\x70\x9a\xb4\x00\xd8\xf1\xf7\x41\x52\x0e\xa7\x93\x9e\xcf\x7d\xff\xc5\xca\xfa\x26\xc4\x94\x83\x9a\xcc\x83\xd0\xf7\xea\x6c\xb7\x8e\x7f\xa1\x28\x1c\xfc\x98\xe0\x22\xae\x72\x94\x98\xf0\xeb\x8e\xdf\x45\x37\xfa\x5c\xc4\xa7\x3e\xeb\x5c\x8f\x55\xeb\x9e\xac\x25\x91\x1f\xe8\x38\xf5\xbc\x48\x2b\x8f\x5d\x74\x6f\x22\x55\xfc\x90\x83\x32\xab\x66\x27\xce\x7e\x0a\x25\xe5\xa0\xac\xe3\x8b\xa9\x64\xc1\x3b\x47\x6f\xc9\x51\x4b\x29\x4e\xa9\xaf\x95\x7d\x3f\xb9\xf7\x37\x13\xbf\xe6\x42\xf0\xd6\x2c\x73\xdf\xde\x85\xf2\xb8\x0c\x20\x1d\x1d\x4d\x67\xdd\x22\xfb\x6f\x82\x4f\xe4\xd3\x99\xfc\x92\xa5\x73\x78\xcc\xe1\xb9\x0f\x9e\x9e\xdf\xcc\xea\xd0\xa1\xe5\x74\xcc\x61\xb3\x68\x52\x44\x2f\x9c\x46\x6a\x66\x2b\xe8\x97\x1b\x01\xc7\x9e\x30\x4e\x6e\xfd\x93\x42\x5a\x9a\x70\xf8\x83\x6a\x77\x2e\xd8\x0f\x4f\xcb\xbd\xf8\x84\x72\x5b\x33\x83\x9c\xa4\x92\xf7\xc0\x65\xa1\x5c\xc0\x92\x7d\xad\xe6\xcb\x37\x19\xac\x43\x91\x42\x75\x58\x53\xb6\x38\xc0\x18\x5e\xa8\xd9\xaf\x65\x9f\x35\xc4\x75\x93\x72\x78\xb1\xd9\xec\x9b\xa5\xa5\x03\x97\xa9\x19\x75\x9f\xdf\x5c\xe3\xa9\x1c\x3d\x2c\x4a\x74\x5c\xfb\x8c\x13\xb5\x92\x83\x25\x9f\x28\x2e\xa6\x2a\xf8\x94\x55\xd8\xb2\x3b\xe6\x20\xe8\x25\x13\x8a\x5c\x2d\xe6\xfb\x9d\x24\xae\x8e\x99\x9d\xb8\xbb\x8e\x3e\x43\x19\xe6\xda\xa1\x5f\xd0\x5c\x23\x98\xeb\x08\xff\x46\x39\xbc\xa4\xf6\xe6\xac\x6f\x31\xd6\xec\xb3\x14\xba\x1c\xb2\x2f\xd7\x16\x1b\x5c\x88\x39\x7c\xf6\xfa\xd5\xf0\x5d\xf4\xab\x9a\x3f\x4e\x7c\x69\xad\x17\x46\xcd\xd0\xc5\x99\x5f\x53\xf2\x7e\xbe\x75\xab\xe3\x32\x8e\x19\x93\x5a\x9a\x5e\xdd\x11\x75\xbb\x0e\xb8\xac\xac\x11\x95\x34\x44\xe9\x7a\x4f\xd9\xd2\xdf\x8b\xb6\x2e\xec\xca\xca\x61\xa4\x71\x4b\xe1\x3d\x3e\x18\xc7\x77\x62\x46\xf8\x78\x20\x09\x2d\x99\x57\xfa\x2b\xbd\x31\x56\x1e\xab\x75\xcb\x5e\x5b\x11\x65\xe6\x7b\x73\x3a\x01\x57\x30\xac\x8f\x9f\x13\x26\xb6\xdf\x72\x84\xbe\x7f\xf6\xf1\x9e\x8c\x8c\xfe\x66\x00\x34\x66\x04\xdb\x60\x14\x4a\x85\x7a\xf7\xf6\xbb\xec\xb5\x7a\xbc\x0b\x41\xa2\xbd\x04\xed\xc9\x97\x21\xea\xfb\xa7\x51\xb7\xeb\x7f\xfb\x4f\xa2\xc7\x92\x7f\x1d\xbb\x60\x23\x27\xf4\xf7\xf0\xfc\xab\xb7\x60\xd8\x86\xe3\x73\x70\xde\x99\xff\x8c\x97\xff\xba\xf8\xa7\xf1\xfb\xbf\x50\xf0\xf1\x39\x0d\x63\xf2\xe5\x3c\xa5\xad\x99\xb6\xf8\xd6\x0c\x8f\xfc\xed\xb3\xdf\x03\x00\x00\xff\xff\x96\xc3\x51\x2d\xec\x07\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2028, mode: os.FileMode(420), modTime: time.Unix(1544700941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

