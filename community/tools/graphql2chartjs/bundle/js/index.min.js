(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.main = {}));
}(this, function (exports) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.6.5' };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });
  var _core_1 = _core.version;

  var _global = createCommonjsModule(function (module) {
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self
    // eslint-disable-next-line no-new-func
    : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var _library = false;

  var _shared = createCommonjsModule(function (module) {
  var SHARED = '__core-js_shared__';
  var store = _global[SHARED] || (_global[SHARED] = {});

  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: _core.version,
    mode: _library ? 'pure' : 'global',
    copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
  });
  });

  var id = 0;
  var px = Math.random();
  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var _wks = createCommonjsModule(function (module) {
  var store = _shared('wks');

  var Symbol = _global.Symbol;
  var USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] =
      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
  };

  $exports.store = store;
  });

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  // Thank's IE8 for his funny defineProperty
  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var document = _global.document;
  // typeof document.createElement is 'object' in old IE
  var is = _isObject(document) && _isObject(document.createElement);
  var _domCreate = function (it) {
    return is ? document.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
  });

  // 7.1.1 ToPrimitive(input [, PreferredType])

  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var _toPrimitive = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;

  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) { /* empty */ }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var _objectDp = {
  	f: f
  };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  // 22.1.3.31 Array.prototype[@@unscopables]
  var UNSCOPABLES = _wks('unscopables');
  var ArrayProto = Array.prototype;
  if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});
  var _addToUnscopables = function (key) {
    ArrayProto[UNSCOPABLES][key] = true;
  };

  var _iterStep = function (done, value) {
    return { value: value, done: !!done };
  };

  var _iterators = {};

  var toString = {}.toString;

  var _cof = function (it) {
    return toString.call(it).slice(8, -1);
  };

  // fallback for non-array-like ES3 and non-enumerable old V8 strings

  // eslint-disable-next-line no-prototype-builtins
  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  };

  // 7.2.1 RequireObjectCoercible(argument)
  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  // to indexed object, toObject with fallback for non-array-like ES3 strings


  var _toIobject = function (it) {
    return _iobject(_defined(it));
  };

  var hasOwnProperty = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var _functionToString = _shared('native-function-to-string', Function.toString);

  var _redefine = createCommonjsModule(function (module) {
  var SRC = _uid('src');

  var TO_STRING = 'toString';
  var TPL = ('' + _functionToString).split(TO_STRING);

  _core.inspectSource = function (it) {
    return _functionToString.call(it);
  };

  (module.exports = function (O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === _global) {
      O[key] = val;
    } else if (!safe) {
      delete O[key];
      _hide(O, key, val);
    } else if (O[key]) {
      O[key] = val;
    } else {
      _hide(O, key, val);
    }
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || _functionToString.call(this);
  });
  });

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  // optional / simple context binding

  var _ctx = function (fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };

  var PROTOTYPE = 'prototype';

  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      // export native or passed
      out = (own ? target : source)[key];
      // bind timers to global for call from export context
      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
      // extend global
      if (target) _redefine(target, key, out, type & $export.U);
      // export
      if (exports[key] != out) _hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };
  _global.core = _core;
  // type bitmap
  $export.F = 1;   // forced
  $export.G = 2;   // global
  $export.S = 4;   // static
  $export.P = 8;   // proto
  $export.B = 16;  // bind
  $export.W = 32;  // wrap
  $export.U = 64;  // safe
  $export.R = 128; // real proto method for `library`
  var _export = $export;

  // 7.1.4 ToInteger
  var ceil = Math.ceil;
  var floor = Math.floor;
  var _toInteger = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

  // 7.1.15 ToLength

  var min = Math.min;
  var _toLength = function (it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;
  var _toAbsoluteIndex = function (index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  };

  // false -> Array#indexOf
  // true  -> Array#includes



  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);
      var length = _toLength(O.length);
      var index = _toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  var shared = _shared('keys');

  var _sharedKey = function (key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function (object, names) {
    var O = _toIobject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

  // IE 8- don't enum bug keys
  var _enumBugKeys = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');

  // 19.1.2.14 / 15.2.3.14 Object.keys(O)



  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);
    var keys = _objectKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
    while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
    return O;
  };

  var document$1 = _global.document;
  var _html = document$1 && document$1.documentElement;

  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



  var IE_PROTO$1 = _sharedKey('IE_PROTO');
  var Empty = function () { /* empty */ };
  var PROTOTYPE$1 = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');
    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
    return createDict();
  };

  var _objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO$1] = O;
    } else result = createDict();
    return Properties === undefined ? result : _objectDps(result, Properties);
  };

  var def = _objectDp.f;

  var TAG = _wks('toStringTag');

  var _setToStringTag = function (it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
  };

  var IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  _hide(IteratorPrototype, _wks('iterator'), function () { return this; });

  var _iterCreate = function (Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
    _setToStringTag(Constructor, NAME + ' Iterator');
  };

  // 7.1.13 ToObject(argument)

  var _toObject = function (it) {
    return Object(_defined(it));
  };

  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


  var IE_PROTO$2 = _sharedKey('IE_PROTO');
  var ObjectProto = Object.prototype;

  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  };

  var ITERATOR = _wks('iterator');
  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function () { return this; };

  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS: return function keys() { return new Constructor(this, kind); };
        case VALUES: return function values() { return new Constructor(this, kind); };
      } return function entries() { return new Constructor(this, kind); };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    // Fix native
    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag(IteratorPrototype, TAG, true);
        // fix for some old engines
        if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() { return $native.call(this); };
    }
    // Define iterator
    if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      _hide(proto, ITERATOR, $default);
    }
    // Plug for library
    _iterators[NAME] = $default;
    _iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }
    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  _iterators.Arguments = _iterators.Array;

  _addToUnscopables('keys');
  _addToUnscopables('values');
  _addToUnscopables('entries');

  var ITERATOR$1 = _wks('iterator');
  var TO_STRING_TAG = _wks('toStringTag');
  var ArrayValues = _iterators.Array;

  var DOMIterables = {
    CSSRuleList: true, // TODO: Not spec compliant, should be false.
    CSSStyleDeclaration: false,
    CSSValueList: false,
    ClientRectList: false,
    DOMRectList: false,
    DOMStringList: false,
    DOMTokenList: true,
    DataTransferItemList: false,
    FileList: false,
    HTMLAllCollection: false,
    HTMLCollection: false,
    HTMLFormElement: false,
    HTMLSelectElement: false,
    MediaList: true, // TODO: Not spec compliant, should be false.
    MimeTypeArray: false,
    NamedNodeMap: false,
    NodeList: true,
    PaintRequestList: false,
    Plugin: false,
    PluginArray: false,
    SVGLengthList: false,
    SVGNumberList: false,
    SVGPathSegList: false,
    SVGPointList: false,
    SVGStringList: false,
    SVGTransformList: false,
    SourceBufferList: false,
    StyleSheetList: true, // TODO: Not spec compliant, should be false.
    TextTrackCueList: false,
    TextTrackList: false,
    TouchList: false
  };

  for (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {
    var NAME = collections[i];
    var explicit = DOMIterables[NAME];
    var Collection = _global[NAME];
    var proto = Collection && Collection.prototype;
    var key;
    if (proto) {
      if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);
      if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
      _iterators[NAME] = ArrayValues;
      if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);
    }
  }

  var inflection = createCommonjsModule(function (module, exports) {
  /*!
   * inflection
   * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>
   * MIT Licensed
   *
   * @fileoverview
   * A port of inflection-js to node.js module.
   */

  ( function ( root, factory ){
    {
      module.exports = factory();
    }
  }( commonjsGlobal, function (){

    /**
     * @description This is a list of nouns that use the same form for both singular and plural.
     *              This list should remain entirely in lower case to correctly match Strings.
     * @private
     */
    var uncountable_words = [
      // 'access',
      'accommodation',
      'adulthood',
      'advertising',
      'advice',
      'aggression',
      'aid',
      'air',
      'aircraft',
      'alcohol',
      'anger',
      'applause',
      'arithmetic',
      // 'art',
      'assistance',
      'athletics',
      // 'attention',

      'bacon',
      'baggage',
      // 'ballet',
      // 'beauty',
      'beef',
      // 'beer',
      // 'behavior',
      'biology',
      // 'billiards',
      'blood',
      'botany',
      // 'bowels',
      'bread',
      // 'business',
      'butter',

      'carbon',
      'cardboard',
      'cash',
      'chalk',
      'chaos',
      'chess',
      'crossroads',
      'countryside',

      // 'damage',
      'dancing',
      // 'danger',
      'deer',
      // 'delight',
      // 'dessert',
      'dignity',
      'dirt',
      // 'distribution',
      'dust',

      'economics',
      'education',
      'electricity',
      // 'employment',
      // 'energy',
      'engineering',
      'enjoyment',
      // 'entertainment',
      'envy',
      'equipment',
      'ethics',
      'evidence',
      'evolution',

      // 'failure',
      // 'faith',
      'fame',
      'fiction',
      // 'fish',
      'flour',
      'flu',
      'food',
      // 'freedom',
      // 'fruit',
      'fuel',
      'fun',
      // 'funeral',
      'furniture',

      'gallows',
      'garbage',
      'garlic',
      // 'gas',
      'genetics',
      // 'glass',
      'gold',
      'golf',
      'gossip',
      'grammar',
      // 'grass',
      'gratitude',
      'grief',
      // 'ground',
      'guilt',
      'gymnastics',

      // 'hair',
      'happiness',
      'hardware',
      'harm',
      'hate',
      'hatred',
      'health',
      'heat',
      // 'height',
      'help',
      'homework',
      'honesty',
      'honey',
      'hospitality',
      'housework',
      'humour',
      'hunger',
      'hydrogen',

      'ice',
      'importance',
      'inflation',
      'information',
      // 'injustice',
      'innocence',
      // 'intelligence',
      'iron',
      'irony',

      'jam',
      // 'jealousy',
      // 'jelly',
      'jewelry',
      // 'joy',
      'judo',
      // 'juice',
      // 'justice',

      'karate',
      // 'kindness',
      'knowledge',

      // 'labour',
      'lack',
      // 'land',
      'laughter',
      'lava',
      'leather',
      'leisure',
      'lightning',
      'linguine',
      'linguini',
      'linguistics',
      'literature',
      'litter',
      'livestock',
      'logic',
      'loneliness',
      // 'love',
      'luck',
      'luggage',

      'macaroni',
      'machinery',
      'magic',
      // 'mail',
      'management',
      'mankind',
      'marble',
      'mathematics',
      'mayonnaise',
      'measles',
      // 'meat',
      // 'metal',
      'methane',
      'milk',
      'minus',
      'money',
      // 'moose',
      'mud',
      'music',
      'mumps',

      'nature',
      'news',
      'nitrogen',
      'nonsense',
      'nurture',
      'nutrition',

      'obedience',
      'obesity',
      // 'oil',
      'oxygen',

      // 'paper',
      // 'passion',
      'pasta',
      'patience',
      // 'permission',
      'physics',
      'poetry',
      'pollution',
      'poverty',
      // 'power',
      'pride',
      // 'production',
      // 'progress',
      // 'pronunciation',
      'psychology',
      'publicity',
      'punctuation',

      // 'quality',
      // 'quantity',
      'quartz',

      'racism',
      // 'rain',
      // 'recreation',
      'relaxation',
      'reliability',
      'research',
      'respect',
      'revenge',
      'rice',
      'rubbish',
      'rum',

      'safety',
      // 'salad',
      // 'salt',
      // 'sand',
      // 'satire',
      'scenery',
      'seafood',
      'seaside',
      'series',
      'shame',
      'sheep',
      'shopping',
      // 'silence',
      'sleep',
      // 'slang'
      'smoke',
      'smoking',
      'snow',
      'soap',
      'software',
      'soil',
      // 'sorrow',
      // 'soup',
      'spaghetti',
      // 'speed',
      'species',
      // 'spelling',
      // 'sport',
      'steam',
      // 'strength',
      'stuff',
      'stupidity',
      // 'success',
      // 'sugar',
      'sunshine',
      'symmetry',

      // 'tea',
      'tennis',
      'thirst',
      'thunder',
      'timber',
      // 'time',
      // 'toast',
      // 'tolerance',
      // 'trade',
      'traffic',
      'transportation',
      // 'travel',
      'trust',

      // 'understanding',
      'underwear',
      'unemployment',
      'unity',
      // 'usage',

      'validity',
      'veal',
      'vegetation',
      'vegetarianism',
      'vengeance',
      'violence',
      // 'vision',
      'vitality',

      'warmth',
      // 'water',
      'wealth',
      'weather',
      // 'weight',
      'welfare',
      'wheat',
      // 'whiskey',
      // 'width',
      'wildlife',
      // 'wine',
      'wisdom',
      // 'wood',
      // 'wool',
      // 'work',

      // 'yeast',
      'yoga',

      'zinc',
      'zoology'
    ];

    /**
     * @description These rules translate from the singular form of a noun to its plural form.
     * @private
     */

    var regex = {
      plural : {
        men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),
        people    : new RegExp( '(pe)ople$'                      , 'gi' ),
        children  : new RegExp( '(child)ren$'                    , 'gi' ),
        tia       : new RegExp( '([ti])a$'                       , 'gi' ),
        analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),
        hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),
        curves    : new RegExp( '(curve)s$'                      , 'gi' ),
        lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),
        aves      : new RegExp( '([a])ves$'                      , 'gi' ),
        foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),
        movies    : new RegExp( '(m)ovies$'                      , 'gi' ),
        aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),
        series    : new RegExp( '(s)eries$'                      , 'gi' ),
        xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),
        mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),
        buses     : new RegExp( '(bus)es$'                       , 'gi' ),
        oes       : new RegExp( '(o)es$'                         , 'gi' ),
        shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),
        crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),
        octopi    : new RegExp( '(octop|vir)i$'                  , 'gi' ),
        aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),
        summonses : new RegExp( '^(summons)es$'                  , 'gi' ),
        oxen      : new RegExp( '^(ox)en'                        , 'gi' ),
        matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),
        vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),
        feet      : new RegExp( '^feet$'                         , 'gi' ),
        teeth     : new RegExp( '^teeth$'                        , 'gi' ),
        geese     : new RegExp( '^geese$'                        , 'gi' ),
        quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),
        whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),
        criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),
        genera    : new RegExp( '^genera$'                       , 'gi' ),
        ss        : new RegExp( 'ss$'                            , 'gi' ),
        s         : new RegExp( 's$'                             , 'gi' )
      },

      singular : {
        man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),
        person    : new RegExp( '(pe)rson$'                    , 'gi' ),
        child     : new RegExp( '(child)$'                     , 'gi' ),
        ox        : new RegExp( '^(ox)$'                       , 'gi' ),
        axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),
        octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),
        alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),
        summons   : new RegExp( '^(summons)$'                  , 'gi' ),
        bus       : new RegExp( '(bu)s$'                       , 'gi' ),
        buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),
        tium      : new RegExp( '([ti])um$'                    , 'gi' ),
        sis       : new RegExp( 'sis$'                         , 'gi' ),
        ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),
        hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),
        aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),
        x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),
        matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),
        vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),
        mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),
        foot      : new RegExp( '^foot$'                       , 'gi' ),
        tooth     : new RegExp( '^tooth$'                      , 'gi' ),
        goose     : new RegExp( '^goose$'                      , 'gi' ),
        quiz      : new RegExp( '(quiz)$'                      , 'gi' ),
        whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),
        criterion : new RegExp( '^(criteri)on$'                , 'gi' ),
        genus     : new RegExp( '^genus$'                      , 'gi' ),
        s         : new RegExp( 's$'                           , 'gi' ),
        common    : new RegExp( '$'                            , 'gi' )
      }
    };

    var plural_rules = [

      // do not replace if its already a plural word
      [ regex.plural.men       ],
      [ regex.plural.people    ],
      [ regex.plural.children  ],
      [ regex.plural.tia       ],
      [ regex.plural.analyses  ],
      [ regex.plural.hives     ],
      [ regex.plural.curves    ],
      [ regex.plural.lrves     ],
      [ regex.plural.foves     ],
      [ regex.plural.aeiouyies ],
      [ regex.plural.series    ],
      [ regex.plural.movies    ],
      [ regex.plural.xes       ],
      [ regex.plural.mice      ],
      [ regex.plural.buses     ],
      [ regex.plural.oes       ],
      [ regex.plural.shoes     ],
      [ regex.plural.crises    ],
      [ regex.plural.octopi    ],
      [ regex.plural.aliases   ],
      [ regex.plural.summonses ],
      [ regex.plural.oxen      ],
      [ regex.plural.matrices  ],
      [ regex.plural.feet      ],
      [ regex.plural.teeth     ],
      [ regex.plural.geese     ],
      [ regex.plural.quizzes   ],
      [ regex.plural.whereases ],
      [ regex.plural.criteria  ],
      [ regex.plural.genera    ],

      // original rule
      [ regex.singular.man      , '$1en' ],
      [ regex.singular.person   , '$1ople' ],
      [ regex.singular.child    , '$1ren' ],
      [ regex.singular.ox       , '$1en' ],
      [ regex.singular.axis     , '$1es' ],
      [ regex.singular.octopus  , '$1i' ],
      [ regex.singular.alias    , '$1es' ],
      [ regex.singular.summons  , '$1es' ],
      [ regex.singular.bus      , '$1ses' ],
      [ regex.singular.buffalo  , '$1oes' ],
      [ regex.singular.tium     , '$1a' ],
      [ regex.singular.sis      , 'ses' ],
      [ regex.singular.ffe      , '$1$2ves' ],
      [ regex.singular.hive     , '$1ves' ],
      [ regex.singular.aeiouyy  , '$1ies' ],
      [ regex.singular.matrix   , '$1ices' ],
      [ regex.singular.vertex   , '$1ices' ],
      [ regex.singular.x        , '$1es' ],
      [ regex.singular.mouse    , '$1ice' ],
      [ regex.singular.foot     , 'feet' ],
      [ regex.singular.tooth    , 'teeth' ],
      [ regex.singular.goose    , 'geese' ],
      [ regex.singular.quiz     , '$1zes' ],
      [ regex.singular.whereas  , '$1es' ],
      [ regex.singular.criterion, '$1a' ],
      [ regex.singular.genus    , 'genera' ],

      [ regex.singular.s     , 's' ],
      [ regex.singular.common, 's' ]
    ];

    /**
     * @description These rules translate from the plural form of a noun to its singular form.
     * @private
     */
    var singular_rules = [

      // do not replace if its already a singular word
      [ regex.singular.man     ],
      [ regex.singular.person  ],
      [ regex.singular.child   ],
      [ regex.singular.ox      ],
      [ regex.singular.axis    ],
      [ regex.singular.octopus ],
      [ regex.singular.alias   ],
      [ regex.singular.summons ],
      [ regex.singular.bus     ],
      [ regex.singular.buffalo ],
      [ regex.singular.tium    ],
      [ regex.singular.sis     ],
      [ regex.singular.ffe     ],
      [ regex.singular.hive    ],
      [ regex.singular.aeiouyy ],
      [ regex.singular.x       ],
      [ regex.singular.matrix  ],
      [ regex.singular.mouse   ],
      [ regex.singular.foot    ],
      [ regex.singular.tooth   ],
      [ regex.singular.goose   ],
      [ regex.singular.quiz    ],
      [ regex.singular.whereas ],
      [ regex.singular.criterion ],
      [ regex.singular.genus ],

      // original rule
      [ regex.plural.men      , '$1an' ],
      [ regex.plural.people   , '$1rson' ],
      [ regex.plural.children , '$1' ],
      [ regex.plural.genera   , 'genus'],
      [ regex.plural.criteria , '$1on'],
      [ regex.plural.tia      , '$1um' ],
      [ regex.plural.analyses , '$1$2sis' ],
      [ regex.plural.hives    , '$1ve' ],
      [ regex.plural.curves   , '$1' ],
      [ regex.plural.lrves    , '$1f' ],
      [ regex.plural.aves     , '$1ve' ],
      [ regex.plural.foves    , '$1fe' ],
      [ regex.plural.movies   , '$1ovie' ],
      [ regex.plural.aeiouyies, '$1y' ],
      [ regex.plural.series   , '$1eries' ],
      [ regex.plural.xes      , '$1' ],
      [ regex.plural.mice     , '$1ouse' ],
      [ regex.plural.buses    , '$1' ],
      [ regex.plural.oes      , '$1' ],
      [ regex.plural.shoes    , '$1' ],
      [ regex.plural.crises   , '$1is' ],
      [ regex.plural.octopi   , '$1us' ],
      [ regex.plural.aliases  , '$1' ],
      [ regex.plural.summonses, '$1' ],
      [ regex.plural.oxen     , '$1' ],
      [ regex.plural.matrices , '$1ix' ],
      [ regex.plural.vertices , '$1ex' ],
      [ regex.plural.feet     , 'foot' ],
      [ regex.plural.teeth    , 'tooth' ],
      [ regex.plural.geese    , 'goose' ],
      [ regex.plural.quizzes  , '$1' ],
      [ regex.plural.whereases, '$1' ],

      [ regex.plural.ss, 'ss' ],
      [ regex.plural.s , '' ]
    ];

    /**
     * @description This is a list of words that should not be capitalized for title case.
     * @private
     */
    var non_titlecased_words = [
      'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',
      'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'
    ];

    /**
     * @description These are regular expressions used for converting between String formats.
     * @private
     */
    var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );
    var underbar          = new RegExp( '_', 'g' );
    var space_or_underbar = new RegExp( '[\ _]', 'g' );
    var uppercase         = new RegExp( '([A-Z])', 'g' );
    var underbar_prefix   = new RegExp( '^_' );

    var inflector = {

    /**
     * A helper method that applies rules based replacement to a String.
     * @private
     * @function
     * @param {String} str String to modify and return based on the passed rules.
     * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement
     * @param {Array: [String]} skip Strings to skip if they match
     * @param {String} override String to return as though this method succeeded (used to conform to APIs)
     * @returns {String} Return passed String modified by passed rules.
     * @example
     *
     *     this._apply_rules( 'cows', singular_rules ); // === 'cow'
     */
      _apply_rules : function ( str, rules, skip, override ){
        if( override ){
          str = override;
        }else{
          var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );

          if( !ignore ){
            var i = 0;
            var j = rules.length;

            for( ; i < j; i++ ){
              if( str.match( rules[ i ][ 0 ])){
                if( rules[ i ][ 1 ] !== undefined ){
                  str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);
                }
                break;
              }
            }
          }
        }

        return str;
      },



    /**
     * This lets us detect if an Array contains a given element.
     * @public
     * @function
     * @param {Array} arr The subject array.
     * @param {Object} item Object to locate in the Array.
     * @param {Number} from_index Starts checking from this position in the Array.(optional)
     * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)
     * @returns {Number} Return index position in the Array of the passed item.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1
     *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0
     */
      indexOf : function ( arr, item, from_index, compare_func ){
        if( !from_index ){
          from_index = -1;
        }

        var index = -1;
        var i     = from_index;
        var j     = arr.length;

        for( ; i < j; i++ ){
          if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){
            index = i;
            break;
          }
        }

        return index;
      },



    /**
     * This function adds pluralization support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {String} plural Overrides normal output with said String.(optional)
     * @returns {String} Singular English language nouns are returned in plural form.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.pluralize( 'person' ); // === 'people'
     *     inflection.pluralize( 'octopus' ); // === 'octopi'
     *     inflection.pluralize( 'Hat' ); // === 'Hats'
     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'
     */
      pluralize : function ( str, plural ){
        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );
      },



    /**
     * This function adds singularization support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {String} singular Overrides normal output with said String.(optional)
     * @returns {String} Plural English language nouns are returned in singular form.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.singularize( 'people' ); // === 'person'
     *     inflection.singularize( 'octopi' ); // === 'octopus'
     *     inflection.singularize( 'Hats' ); // === 'Hat'
     *     inflection.singularize( 'guys', 'person' ); // === 'person'
     */
      singularize : function ( str, singular ){
        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );
      },


    /**
     * This function will pluralize or singularlize a String appropriately based on an integer value
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {Number} count The number to base pluralization off of.
     * @param {String} singular Overrides normal output with said String.(optional)
     * @param {String} plural Overrides normal output with said String.(optional)
     * @returns {String} English language nouns are returned in the plural or singular form based on the count.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.inflect( 'people' 1 ); // === 'person'
     *     inflection.inflect( 'octopi' 1 ); // === 'octopus'
     *     inflection.inflect( 'Hats' 1 ); // === 'Hat'
     *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'
     *     inflection.inflect( 'person', 2 ); // === 'people'
     *     inflection.inflect( 'octopus', 2 ); // === 'octopi'
     *     inflection.inflect( 'Hat', 2 ); // === 'Hats'
     *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'
     */
      inflect : function ( str, count, singular, plural ){
        count = parseInt( count, 10 );

        if( isNaN( count )) return str;

        if( count === 0 || count > 1 ){
          return inflector._apply_rules( str, plural_rules, uncountable_words, plural );
        }else{
          return inflector._apply_rules( str, singular_rules, uncountable_words, singular );
        }
      },



    /**
     * This function adds camelization support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
     *                                 Passing true will lowercase it.
     * @returns {String} Lower case underscored words will be returned in camel case.
     *                  additionally '/' is translated to '::'
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'
     *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'
     */
      camelize : function ( str, low_first_letter ){
        var str_path = str.split( '/' );
        var i        = 0;
        var j        = str_path.length;
        var str_arr, k, l, first;

        for( ; i < j; i++ ){
          str_arr = str_path[ i ].split( '_' );
          k       = 0;
          l       = str_arr.length;

          for( ; k < l; k++ ){
            if( k !== 0 ){
              str_arr[ k ] = str_arr[ k ].toLowerCase();
            }

            first = str_arr[ k ].charAt( 0 );
            first = low_first_letter && i === 0 && k === 0
              ? first.toLowerCase() : first.toUpperCase();
            str_arr[ k ] = first + str_arr[ k ].substring( 1 );
          }

          str_path[ i ] = str_arr.join( '' );
        }

        return str_path.join( '::' );
      },



    /**
     * This function adds underscore support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)
     *                  Passing true will return as entered.
     * @returns {String} Camel cased words are returned as lower cased and underscored.
     *                  additionally '::' is translated to '/'.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'
     *     inflection.underscore( 'messageProperties' ); // === 'message_properties'
     *     inflection.underscore( 'MP', true ); // === 'MP'
     */
      underscore : function ( str, all_upper_case ){
        if( all_upper_case && str === str.toUpperCase()) return str;

        var str_path = str.split( '::' );
        var i        = 0;
        var j        = str_path.length;

        for( ; i < j; i++ ){
          str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );
          str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );
        }

        return str_path.join( '/' ).toLowerCase();
      },



    /**
     * This function adds humanize support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
     *                                 Passing true will lowercase it.
     * @returns {String} Lower case underscored words will be returned in humanized form.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.humanize( 'message_properties' ); // === 'Message properties'
     *     inflection.humanize( 'message_properties', true ); // === 'message properties'
     */
      humanize : function ( str, low_first_letter ){
        str = str.toLowerCase();
        str = str.replace( id_suffix, '' );
        str = str.replace( underbar, ' ' );

        if( !low_first_letter ){
          str = inflector.capitalize( str );
        }

        return str;
      },



    /**
     * This function adds capitalization support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @returns {String} All characters will be lower case and the first will be upper.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'
     *     inflection.capitalize( 'message properties', true ); // === 'Message properties'
     */
      capitalize : function ( str ){
        str = str.toLowerCase();

        return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );
      },



    /**
     * This function replaces underscores with dashes in the string.
     * @public
     * @function
     * @param {String} str The subject string.
     * @returns {String} Replaces all spaces or underscores with dashes.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.dasherize( 'message_properties' ); // === 'message-properties'
     *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'
     */
      dasherize : function ( str ){
        return str.replace( space_or_underbar, '-' );
      },



    /**
     * This function adds titleize support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @returns {String} Capitalizes words as you would for a book title.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.titleize( 'message_properties' ); // === 'Message Properties'
     *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'
     */
      titleize : function ( str ){
        str         = str.toLowerCase().replace( underbar, ' ' );
        var str_arr = str.split( ' ' );
        var i       = 0;
        var j       = str_arr.length;
        var d, k, l;

        for( ; i < j; i++ ){
          d = str_arr[ i ].split( '-' );
          k = 0;
          l = d.length;

          for( ; k < l; k++){
            if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){
              d[ k ] = inflector.capitalize( d[ k ]);
            }
          }

          str_arr[ i ] = d.join( '-' );
        }

        str = str_arr.join( ' ' );
        str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );

        return str;
      },



    /**
     * This function adds demodulize support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @returns {String} Removes module names leaving only class names.(Ruby style)
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'
     */
      demodulize : function ( str ){
        var str_arr = str.split( '::' );

        return str_arr[ str_arr.length - 1 ];
      },



    /**
     * This function adds tableize support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @returns {String} Return camel cased words into their underscored plural form.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'
     */
      tableize : function ( str ){
        str = inflector.underscore( str );
        str = inflector.pluralize( str );

        return str;
      },



    /**
     * This function adds classification support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @returns {String} Underscored plural nouns become the camel cased singular form.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'
     */
      classify : function ( str ){
        str = inflector.camelize( str );
        str = inflector.singularize( str );

        return str;
      },



    /**
     * This function adds foreign key support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,
                                   you can pass true to skip it.(optional)
     * @returns {String} Underscored plural nouns become the camel cased singular form.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'
     *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'
     */
      foreign_key : function ( str, drop_id_ubar ){
        str = inflector.demodulize( str );
        str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';

        return str;
      },



    /**
     * This function adds ordinalize support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @returns {String} Return all found numbers their sequence like '22nd'.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'
     */
      ordinalize : function ( str ){
        var str_arr = str.split( ' ' );
        var i       = 0;
        var j       = str_arr.length;

        for( ; i < j; i++ ){
          var k = parseInt( str_arr[ i ], 10 );

          if( !isNaN( k )){
            var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );
            var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );
            var suf = 'th';

            if( ltd != '11' && ltd != '12' && ltd != '13' ){
              if( ld === '1' ){
                suf = 'st';
              }else if( ld === '2' ){
                suf = 'nd';
              }else if( ld === '3' ){
                suf = 'rd';
              }
            }

            str_arr[ i ] += suf;
          }
        }

        return str_arr.join( ' ' );
      },

    /**
     * This function performs multiple inflection methods on a string
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {Array} arr An array of inflection methods.
     * @returns {String}
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'
     */
      transform : function ( str, arr ){
        var i = 0;
        var j = arr.length;

        for( ;i < j; i++ ){
          var method = arr[ i ];

          if( inflector.hasOwnProperty( method )){
            str = inflector[ method ]( str );
          }
        }

        return str;
      }
    };

  /**
   * @public
   */
    inflector.version = '1.12.0';

    return inflector;
  }));
  });

  const line = {
    data: true,
    borderDash: true,
    pointBackgroundColor: true,
    pointBorderColor: true,
    pointBorderWidth: true,
    pointRadius: true,
    pointStyle: true,
    pointRotation: true,
    pointHitRadius: true,
    pointHoverBackgroundColor: true,
    pointHoverBorderColor: true,
    pointHoverBorderWidth: true,
    pointHoverRadius: true
  };
  const bar = {
    data: true,
    backgroundColor: true,
    borderColor: true,
    borderWidth: true,
    hoverBackgroundColor: true,
    hoverBorderColor: true,
    hoverBorderWidth: true
  };
  const pie = {
    data: true,
    backgroundColor: true,
    borderColor: true,
    borderWidth: true,
    hoverBackgroundColor: true,
    hoverBorderColor: true,
    hoverBorderWidth: true
  };
  const polar = {
    data: true,
    backgroundColor: true,
    borderColor: true,
    borderWidth: true,
    hoverBackgroundColor: true,
    hoverBorderColor: true,
    hoverBorderWidth: true
  };
  const scatter = {
    borderDash: true,
    pointBackgroundColor: true,
    pointBorderColor: true,
    pointBorderWidth: true,
    pointRadius: true,
    pointStyle: true,
    pointRotation: true,
    pointHitRadius: true,
    pointHoverBackgroundColor: true,
    pointHoverBorderColor: true,
    pointHoverBorderWidth: true,
    pointHoverRadius: true
  };
  const bubble = {
    borderDash: true,
    pointBackgroundColor: true,
    pointBorderColor: true,
    pointBorderWidth: true,
    pointRadius: true,
    pointStyle: true,
    pointRotation: true,
    pointHitRadius: true,
    pointHoverBackgroundColor: true,
    pointHoverBorderColor: true,
    pointHoverBorderWidth: true,
    pointHoverRadius: true
  };
  const radar = {
    data: true,
    borderDash: true,
    pointBackgroundColor: true,
    pointBorderColor: true,
    pointBorderWidth: true,
    pointRadius: true,
    pointStyle: true,
    pointRotation: true,
    pointHitRadius: true,
    pointHoverBackgroundColor: true,
    pointHoverBorderColor: true,
    pointHoverBorderWidth: true,
    pointHoverRadius: true
  };
  var arrayFields = {
    line,
    bar,
    scatter,
    bubble,
    pie,
    polar,
    radar
  };

  const chartTypeMap = {
    'line': arrayFields.line,
    'bar': arrayFields.bar,
    'radar': arrayFields.radar,
    'polarArea': arrayFields.polar,
    'doughnut': arrayFields.pie,
    'pie': arrayFields.pie,
    'bubble': arrayFields.bubble,
    'scatter': arrayFields.scatter
  };

  function convert(graphqlData, chartType) {
    const data = {
      labels: [],
      datasets: []
    };
    const dataSets = Object.keys(graphqlData);
    const numDataSets = dataSets.length;

    for (let i = 0; i < numDataSets; i++) {
      const dataSetName = dataSets[i];
      const dataSet = graphqlData[dataSetName];
      data.datasets.push({
        label: inflection.transform(dataSetName, ['underscore', 'humanize']),
        data: []
      });
      const dataSetSize = dataSet.length;

      for (let j = 0; j < dataSetSize; j++) {
        const element = dataSet[j];
        let isRadiusDefined = element.data_r !== undefined;

        if (element.data_x !== undefined || element.data_t !== undefined) {
          if (element.data_x) {
            const dataPoint = {
              x: element.data_x,
              y: element.data_y
            };

            if (isRadiusDefined) {
              dataPoint.r = element.data_r;
            }

            data.datasets[i].data.push(dataPoint);
          } else if (element.data_t !== undefined) {
            data.datasets[i].data.push();
            let dataPoint = {
              t: element.data_t,
              y: element.data_y
            };

            if (isRadiusDefined) {
              dataPoint[r] = element.data_r;
            }

            data.datasets[i].data.push(dataPoint);
          }
        }

        const arrayFieldsByType = element.chartType ? chartTypeMap[element.chartType] : chartTypeMap[chartType];
        Object.keys(element).forEach(property => {
          if (property === 'data_x' || property === 'data_t' || property === 'data_y' || property === 'data_r') {
            return;
          }

          if (property === 'label') {
            if (i === 0) {
              data.labels.push(element[property]);
            }
          } else if (arrayFieldsByType[property]) {
            if (!data.datasets[i][property]) {
              data.datasets[i][property] = [];
            }

            data.datasets[i][property].push(element[property]);
          } else {
            data.datasets[i][property === 'chartType' ? 'type' : property] = element[property];
          }
        });
      }
    }
    return data;
  }

  var converter = convert;

  function convert$1(type, graphqlData) {
    try {
      return converter(graphqlData, type);
    } catch (e) {
      console.error('unexpected error in graphql2chartjs; please check your graphql response');
      console.error(e);
    }
  }

  class Graphql2Chartjs {
    constructor() {
      this.data = {};
    }

    handleInit(graphqlData, arg) {
      this.data = {};

      if (typeof arg === 'string') {
        this.gqlData = graphqlData;
        this.chartType = arg;
        this.data = convert$1(arg, graphqlData);
      } else if (typeof arg === 'function') {
        this.transformer = arg;
        this.gqlData = this.transformGqlData(graphqlData, arg);
        this.data = convert$1(this.chartType, this.gqlData);
      } else {
        console.error('invalid second argument to graphql2chartjs');
      }
    }

    transformGqlData(graphqlData, transformer) {
      const transformedGqlData = {};
      Object.keys(graphqlData).forEach(datasetName => {
        transformedGqlData[datasetName] = graphqlData[datasetName].map(dataPoint => {
          return _objectSpread({}, dataPoint, transformer(datasetName, dataPoint));
        });
      });
      return transformedGqlData;
    }

    reset(graphqlData, arg) {
      this.handleInit(graphqlData, arg);
    }

    add(graphqlData, arg) {
      if (!graphqlData) {
        console.warn('invalid graphql data provided to Graphql2Chartjs');
        return;
      }

      if (!this.gqlData || this.gqlData && Object.keys(this.gqlData).length === 0) {
        this.handleInit(graphqlData, arg);
        return;
      }

      this.mergeData(typeof arg === 'function' ? this.chartType : arg, typeof arg === 'function' ? this.transformGqlData(graphqlData, arg) : graphqlData);
    }

    reform(transformer) {
      this.gqlData = this.transformGqlData(this.gqlData, transformer);
      this.data = convert$1(this.chartType, this.gqlData);
    }

    mergeData(type, graphqlData) {
      const oldGqlData = _objectSpread({}, this.gqlData);

      Object.keys(graphqlData).forEach(dsName => {
        if (oldGqlData[dsName]) {
          graphqlData[dsName].forEach(dp => {
            const oldDs = oldGqlData[dsName];
            let oldDsLength = oldGqlData[dsName].length;
            let refIndex;

            for (var _i = oldDs.length - 1; _i >= 0; _i--) {
              let refDp = oldDs[_i];

              if (refDp.label && refDp.label === dp.label) {
                refIndex = _i;
                break;
              } else if (refDp.data_r !== undefined) {
                if (refDp.data_x === dp.data_x && refDp.data_y === dp.data_y && refDp.data_r === dp.data_r) {
                  refIndex = _i;
                  break;
                }
              } else if (refDp.data_x !== undefined) {
                if (refDp.data_x === dp.data_x && refDp.data_y === dp.data_y) {
                  refIndex = _i;
                  break;
                }
              } else if (refDp.data_t !== undefined) {
                if (refDp.data_t === dp.data_t && refDp.data_y === dp.data_y) {
                  refIndex = _i;
                  break;
                }
              }
            }

            if (!refIndex) {
              refIndex = oldDsLength;
              oldDsLength++;
              oldGqlData[dsName] = [...oldGqlData[dsName], _objectSpread({}, dp)];
            } else {
              oldGqlData[dsName][refIndex] = _objectSpread({}, oldGqlData[dsName][refIndex], dp);
            }
          });
        } else {
          oldGqlData[dsName] = graphqlData[dsName];
        }
      });
      this.gqlData = oldGqlData;
      this.data = convert$1(type, oldGqlData);
    }

  }

  if (typeof window != 'undefined') {
    window.Graphql2Chartjs = Graphql2Chartjs;
    window.graphql2chartjs = Graphql2Chartjs;
    window.GraphQL2ChartJS = Graphql2Chartjs;
    window.Graphql2chartjs = Graphql2Chartjs;
  }

  var src = Graphql2Chartjs;

  exports.__moduleExports = src;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
