# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]

- arguments: -XQuasiQuotes

# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules

- functions:
      - name: "Test.Hspec.focus"
        within: []
        message: "Specs with focusing should only be used during development"

      - name: "Test.Hspec.fit"
        within: []
        message: "Specs with focusing should only be used during development"

      - name: "Test.Hspec.fspecify"
        within: []
        message: "Specs with focusing should only be used during development"

      - name: "Test.Hspec.fdescribe"
        within: []
        message: "Specs with focusing should only be used during development"

      - name: "Test.Hspec.fcontext"
        within: []
        message: "Specs with focusing should only be used during development"

# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}

# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules

- ignore: {name: Reduce duplication}
- ignore: {name: Redundant $}
- ignore: {name: Redundant bracket}
- ignore: {name: Use fmap}
- ignore: {name: Use first}
- ignore: {name: Use if}
- ignore: {name: Redundant <$>}
- ignore: {name: Use ++}
- ignore: {name: Use const}
- ignore: {name: Eta reduce}
- ignore: {name: Redundant multi-way if}
- ignore: {name: Use newtype instead of data}
- ignore: {name: Use bimap}
- ignore: {name: Use fromRight}
- ignore: {name: Use $>}
- ignore: {name: Use <$>}
- ignore: {name: "Use ?~"}
- ignore: {name: Use <=<}
- ignore: {name: Use sequenceA}
- ignore: {name: Use camelCase}
- ignore: {name: Redundant return}
- ignore: {name: Use <$>, within: [Hasura.RQL.DDL.Metadata, Hasura.Backends.MSSQL.Types.Instances]}
- ignore: {name: Functor law, within: Hasura.Server.AuthSpec}
- ignore: {name: Use underscore} # suggests to format port numbers
# These three need to be disabled under 'simplified subsumption' unfortunately.
# If we want to use -XDeepSubsumption these can be reenabled and lints fixed
# See: https://github.com/mpickering/ghc-proposals/blob/deep-subsumption/proposals/0000-deep-subsumption.rst
- ignore: {name: Avoid lambda}
- ignore: {name: Redundant lambda}
- ignore: {name: Avoid lambda using `infix`}

# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml


- group:
    name: hasura-prelude
    enabled: true
    imports:
    - package base
    rules:
    - error: {lhs: "a == []", rhs: "null a"}
    - error: {lhs: "a /= []", rhs: "not (null a)"}
    - error: {lhs: "maybe b return a", rhs: "onNothing a b"}
    - error: {lhs: "maybe b pure a", rhs: "onNothing a b"}
    - error: {lhs: "maybe (return ()) b a", rhs: "onJust a b"}
    - error: {lhs: "maybe (pure ()) b a", rhs: "onJust a b"}
    - error: {lhs: "either b return a", rhs: "onLeft a b"}
    - error: {lhs: "either b pure a", rhs: "onLeft a b"}
    - error: {lhs: "maybe (f x) f", rhs: "f . fromMaybe x"}
    - error: {lhs: "maybe (f x) f", rhs: "f . fromMaybe x"}
    - error: {lhs: "either (f . g) (f . h)", rhs: "f . either g h"}
    - error: {lhs: "either (f . g) (f . h)", rhs: "f . either g h"}
    - error: {lhs: "onNothing x (return y)", rhs: "return (fromMaybe y x)"}
    - error: {lhs: "onNothing x (pure y)", rhs: "pure (fromMaybe y x)"}
    - error: {lhs: "onLeft x (return . f)", rhs: "return (either f id x)"}
    - error: {lhs: "onLeft x (pure . f)", rhs: "pure (either f id x)"}
    - error: {lhs: "case x of {Right a -> pure a; Left c -> d}", rhs: "onLeft x (\\ c -> d)"}
    - error: {lhs: "case x of {Left c -> d; Right a -> pure a}", rhs: "onLeft x (\\ c -> d)"}
    - error: {lhs: "case x of {Right a -> return a; Left c -> d}", rhs: "onLeft x (\\ c -> d)"}
    - error: {lhs: "case x of {Left c -> d; Right a -> return a}", rhs: "onLeft x (\\ c -> d)"}
    - error: {lhs: "case x of {Nothing -> a; Just b -> pure b}", rhs: "onNothing x a"}
    - error: {lhs: "case x of {Just b -> pure b; Nothing -> a}", rhs: "onNothing x a"}
    - error: {lhs: "case x of {Nothing -> a; Just b -> return b}", rhs: "onNothing x a"}
    - error: {lhs: "case x of {Just b -> return b; Nothing -> a}", rhs: "onNothing x a"}
    - error: {lhs: "if x then pure (); else y", rhs: "unless x y"}
    - error: {lhs: "if x then return (); else y", rhs: "unless x y"}
    - error: {lhs: "if x then y; else pure ()", rhs: "when x y"}
    - error: {lhs: "if x then y; else return ()", rhs: "when x y"}
    - error: {lhs: "unless (not x)", rhs: "when x"}
    - error: {lhs: "when (not x)", rhs: "unless x"}
    - suggest: {lhs: "not x && not y", rhs: "not (x || y)"}
    - suggest: {lhs: "not x || not y", rhs: "not (x && y)"}
    - error: {lhs: "Data.Text.pack (Prelude.show x)", rhs: "Hasura.Prelude.tshow x"}
    - error: {lhs: "map f xs == map f ys",   rhs: "liftEq ((==) `on` f)", note: "This is liable to be faster"}
    - suggest: {lhs: "fmap f xs == fmap f ys", rhs: "liftEq ((==) `on` f)", note: "This is liable to be faster"}
    # mapKeys:
    - error: {lhs: "Data.HashMap.Strict.Extended.fromList . map (first f) . Data.HashMap.Strict.Extended.toList", rhs: "mapKeys f"}
    - error: {lhs: "Data.HashMap.Strict.fromList . map (first f) . Data.HashMap.Strict.toList", rhs: "mapKeys f"}
    - error: {lhs: "Data.HashMap.Strict.Extended.fromList $ map (first f) $ Data.HashMap.Strict.Extended.toList x", rhs: "mapKeys f x"}
    - error: {lhs: "Data.HashMap.Strict.fromList $ map (first f) $ Data.HashMap.Strict.toList x", rhs: "mapKeys f x"}
    # MaybeT
    - error: {lhs: "MaybeT (pure x)",         rhs: "hoistMaybe x"}
    - error: {lhs: "MaybeT (return x)",       rhs: "hoistMaybe x"}
    - error: {lhs: "MaybeT (pure Nothing)",   rhs: "Control.Applicative.empty"}
    - error: {lhs: "MaybeT (return Nothing)", rhs: "Control.Applicative.empty"}
    # catMaybes
    - error: {lhs: "Data.HashMap.Strict.mapMaybe id", rhs: "Data.HashMap.Strict.Extended.catMaybes"}
    - error: {lhs: "Data.HashMap.Strict.Extended.mapMaybe id", rhs: "Data.HashMap.Strict.Extended.catMaybes"}
    - error: {lhs: "Data.HashMap.Strict.InsOrd.mapMaybe id", rhs: "Data.HashMap.Strict.InsOrd.Extended.catMaybes"}
    - error: {lhs: "Data.HashMap.Strict.InsOrd.Extended.mapMaybe id", rhs: "Data.HashMap.Strict.InsOrd.Extended.catMaybes"}
    - error: {lhs: "Data.IntMap.Strict.mapMaybe id", rhs: "Data.HashMap.Strict.Extended.catMaybes"}
    - error: {lhs: "Data.IntMap.Strict.Extended.mapMaybe id", rhs: "Data.HashMap.Strict.Extended.catMaybes"}

- group:
    name: data-text-extended
    enabled: true
    imports:
    - package base
    rules:
    - error: {lhs: "Data.Text.intercalate \", \" x", rhs: "commaSeparated x", note: "From Data.Text.Extended"}
    - error: {lhs: "Data.Text.Extended.intercalate \", \" x", rhs: "commaSeparated x"}

- group:
    name: mssql-transaction
    enabled: true
    imports:
    - package base
    rules:
    - error: {lhs: "Database.MSSQL.runTxE id tx pool", rhs: "Database.MSSQL.runTx tx pool"}
    - error: {lhs: "Database.MSSQL.unitQueryE id q", rhs: "Database.MSSQL.unitQuery q"}
    - error: {lhs: "Database.MSSQL.singleRowQueryE id tx pool", rhs: "Database.MSSQL.singleRowQuery tx pool"}
    - error: {lhs: "Database.MSSQL.multiRowQueryE id tx pool", rhs: "Database.MSSQL.multiRowQuery tx pool"}

- group:
    name: unsafe
    enabled: true
    imports:
      - package base
    rules:
      - suggest: {lhs: "Language.GraphQL.Draft.Syntax.unsafeMkName", rhs: "Language.GraphQL.Draft.Syntax.mkName", note: "avoid unsafeMkName if possible"}
      - error: {lhs: "Control.Concurrent.threadDelay", rhs: "Control.Concurrent.Extended.sleep", note: "Please use `sleep` instead (and read the docs!)"}
      - suggest: {lhs: "Control.Concurrent.Async.Lifted.Safe.async", rhs: "Control.Concurrent.Async.Lifted.Safe.withAsync", note: "Please use 'Control.Control.Concurrent.Async.Lifted.Safe.withAsync' or our 'forkImmortal' instead for more robust threading."}
      - suggest: {lhs: "Control.Concurrent.forkIO", rhs: "Control.Concurrent.Async.Lifted.Safe.withAsync", note: "Please use 'Control.Control.Concurrent.Async.Lifted.Safe.withAsync' or our 'forkImmortal' instead for more robust threading."}
