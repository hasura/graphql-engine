// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8b\xe3\x36\x10\x7e\xbf\xbf\x42\xa8\x94\x7b\xa9\xa5\xdc\xf5\xa0\x87\x63\x07\x4a\xa1\x14\xda\xc2\x3d\xdc\xf5\x75\x99\xc8\x63\x7b\xb2\xb2\xe4\x6a\x94\x64\xdd\xc5\xff\x7b\xf1\xaf\xc4\x9b\x14\x4a\x97\x1e\x7e\x99\xf9\x66\x34\xdf\xcc\x48\x7c\xce\xea\xd8\x58\x61\xc1\x55\xb9\x44\x97\x1c\x59\xee\xde\x08\x91\xd5\x08\xc5\x60\x08\x91\x59\x72\x8f\x22\xa0\xcd\x25\x19\xef\xa4\x88\x5d\x8b\xb9\xa4\x06\x2a\xd4\xad\xab\xa4\xa8\x03\x96\xb9\xac\x63\x6c\x39\xd5\x9a\xa3\x0f\x50\xa1\xaa\xbc\xaf\x2c\x42\x4b\xac\x8c\x6f\x74\x0d\x7c\x0c\x90\x54\x01\xda\xfa\x4f\x9b\xa0\xab\xc8\xa1\x36\xde\xb1\xb7\xa8\x81\x19\x23\xeb\x12\x4e\x03\x87\x1a\xcb\xea\x99\x9f\x4d\xa0\x36\x4e\x8e\x38\x93\x2b\xfc\x59\x3d\x3c\xa0\x3b\x89\x5c\x3c\x4f\xa8\x10\xd0\xd2\x2f\x9e\x63\x2a\x9e\x9f\xd5\x6c\xf7\xfd\x77\xab\xe8\x27\x1f\x62\x2a\xe4\x14\x1e\x9c\xbe\x97\x97\xb8\xb1\xf4\x07\x06\x26\xef\xc6\x02\x57\x77\x55\xa3\x80\x08\x3f\xb6\xf4\x25\xd8\x31\xe7\xea\xde\xe7\xac\x6b\xbd\x84\xd6\x3d\x19\x83\xcc\xbf\x62\x37\xf5\xbc\x78\xab\x8c\x63\xb0\x9f\x02\x96\xf4\x94\x0a\xa9\x57\xcd\x4e\x3b\xfb\xdd\x17\x98\x0a\x69\x2c\x5d\x43\xc7\x23\x15\x63\xb9\xc1\x58\xf7\x45\x0c\x7b\x8b\x9f\xd1\x62\x83\x31\x4c\x94\xb7\x60\xdf\x4f\xe9\xfd\x76\xda\xbb\xbe\x2e\x3e\xd3\xcb\x7b\xc8\xf6\xbe\xe8\x96\x8b\x89\x9d\xc5\xc9\x56\x0d\x90\xfb\xc9\xbb\x88\x2e\x5e\x2e\xa5\x20\x6e\x2d\x74\xa9\x78\xeb\xbc\xc3\xb7\xdb\x19\xf6\x2d\x18\x8a\x5d\x2a\x36\x0b\x12\x03\x38\xa6\x38\xae\x6c\x8e\x0a\xf5\x7e\xc3\xc2\x92\x43\x08\x53\x5a\x7f\x47\xa4\xb8\xf6\xe7\x7f\x60\xdb\x5b\x6f\x1e\xef\xe9\xde\xbd\x82\x2e\xd3\xf3\x90\x93\x57\xd0\x49\x50\x91\x4b\xeb\xa1\x20\x57\xc9\xf9\x51\x4e\x01\x63\x81\x39\x97\x2d\x54\x98\x2c\x09\x62\x3c\x9e\xcb\x39\xaf\x21\x97\xd4\x48\x55\x1d\x53\xf1\x6e\xb3\x39\xd5\x4b\x4b\x67\x2a\x62\x3d\x62\xdf\x6e\x6f\xe7\x29\x2d\x3e\x2d\x20\x58\xaa\x5c\x42\x11\x1b\x4e\x85\x41\x17\x31\x2c\xa1\xd2\xbb\x98\x94\xd0\x90\xed\x52\xc1\xe0\x38\x61\x0c\x54\x2e\xe1\xc3\x91\x23\x95\x5d\x62\xa6\xdd\xdd\x9e\xbe\x8c\x32\xdc\x6b\x0b\x6e\x99\xe6\x76\x82\x99\x87\xe9\x2f\x4c\xc5\x7b\x6c\xb6\x17\xbc\x81\x50\x91\x4b\xa2\x6f\x53\x91\x7c\xbf\x8e\x18\x6f\x7d\x48\xc5\x37\x1f\x3f\x0c\xdf\x15\x5f\x71\xfe\x36\xed\x4b\x29\xb5\x6c\x54\x0f\x5d\x5c\xf6\xab\x0b\x3a\xcd\xaf\x6e\x65\x2e\xd7\x31\xcf\x24\x97\xa6\x57\x6f\x44\xee\xd6\x07\xae\x52\x36\x4e\xc5\x35\x62\xbc\xd5\x2f\x53\xb8\x03\x2b\x63\xfd\xb1\x28\x2d\x04\x1c\xd5\x0b\x0e\xf0\xa4\x2d\xed\x59\x8f\xe3\xc3\x19\xd9\x37\xa8\x3f\xa8\x1f\xd4\x46\x1b\x7e\x09\xab\x86\x9c\x32\xcc\x52\xff\x07\xda\x57\xc9\xe6\x20\x1c\xa3\x72\x5e\xe4\x45\x0f\xb3\x8f\xe4\xc2\xd4\x10\x18\x63\x2e\xbf\x7c\xfe\x39\xf9\x28\x5f\xca\xa9\xe0\x60\xfe\x7f\xf2\x13\xba\xc2\x07\x75\xb8\x67\xdf\xad\xe5\xe4\x2b\x77\x31\xae\xe0\xdf\x7a\xc8\xf4\xa4\x64\x99\x1e\x7e\x80\xbb\x37\x7f\x07\x00\x00\xff\xff\x7c\xa2\x95\xd8\x08\x07\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 1800, mode: os.FileMode(420), modTime: time.Unix(1546855510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\xab\xe3\x36\x10\x7d\xdf\x5f\x21\x54\xca\xbe\xd4\x52\x76\xbb\xd0\xc5\xb1\x03\xa5\x50\x0a\x6d\x61\x1f\x76\xfb\x7a\x99\xc8\x63\x7b\x72\x65\xc9\xd5\x28\xc9\x75\x2f\xfe\xef\xc5\x5f\x89\x6f\x52\x28\xbd\x74\xc9\x8b\xe6\xcc\x78\xce\xcc\x91\x38\xc9\xea\xd8\x58\x61\xc1\x55\xb9\x44\x97\x1c\x59\xee\xde\x08\x91\xd5\x08\xc5\x70\x10\x22\xb3\xe4\x1e\x45\x40\x9b\x4b\x32\xde\x49\x11\xbb\x16\x73\x49\x0d\x54\xa8\x5b\x57\x49\x51\x07\x2c\x73\x59\xc7\xd8\x72\xaa\x35\x47\x1f\xa0\x42\x55\x79\x5f\x59\x84\x96\x58\x19\xdf\xe8\x1a\xf8\x18\x20\xa9\x02\xb4\xf5\x9f\x36\x41\x57\x91\x43\x6d\xbc\x63\x6f\x51\x03\x33\x46\xd6\x25\x9c\x06\x0e\x35\xb6\xd5\x33\x3f\x9b\x40\x6d\x9c\x02\x71\x26\x57\xf8\xb3\x7a\x78\x40\x77\x12\xb9\x78\x9e\x50\x21\xa0\xa5\x5f\x3c\xc7\x54\x3c\x3f\xab\xf9\xdc\xf7\xdf\xad\xb2\x9f\x7c\x88\xa9\x90\x53\x7a\x08\xfa\x5e\x5e\xf2\xc6\xd2\x1f\x18\x98\xbc\x1b\x1b\x5c\xc3\x55\x8f\x02\x22\xfc\xd8\xd2\x97\x60\xc7\x9a\x6b\x78\x5f\xb3\xee\xf5\x12\x5a\xcf\x64\x0c\x32\xff\x8a\xdd\x34\xf3\x12\xad\x2a\x8e\xc1\x7e\x0a\x58\xd2\x53\x2a\xa4\x5e\x0d\x3b\x69\xf6\xbb\x2f\x30\x15\xd2\x58\xba\xa6\x0a\x62\xd8\x5b\xfc\x8c\x16\x1b\x8c\x61\x6a\x7d\x0b\xf6\xfd\x54\xde\x6f\x27\x7d\xf5\x55\xe0\x4c\x2f\xf7\x9e\xed\x7d\xd1\x2d\x17\x10\x3b\x8b\xd3\x59\x35\x40\xee\x27\xef\x22\xba\x78\x11\xbf\x20\x6e\x2d\x74\xa9\x78\xeb\xbc\xc3\xb7\xdb\x19\xf6\x2d\x18\x8a\x5d\x2a\x36\x0b\x12\x03\x38\xa6\x38\x4a\x33\x67\x85\x7a\xbf\x61\x61\xc9\x21\x84\xa9\xac\xbf\x23\x52\x5c\xfb\xf3\x3f\xb0\xed\xad\x37\x8f\xf7\x74\xef\x5e\x41\x97\xe9\x79\xc9\x29\x2a\xe8\x24\xa8\xc8\xa5\xf5\x50\x90\xab\xe4\xfc\xf8\xa6\x84\xb1\xc0\x9c\xcb\x16\x2a\x4c\x96\x02\x31\x7e\x9e\xcb\xb9\xae\x21\x97\xd4\x48\x55\x1d\x53\xf1\x6e\xb3\x39\xd5\xcb\x48\x67\x2a\x62\x3d\x62\xdf\x6e\x6f\xf7\x29\x2d\x3e\x2d\x20\x58\xaa\x5c\x42\x11\x1b\x4e\x85\x41\x17\x31\x2c\xa9\xd2\xbb\x98\x94\xd0\x90\xed\x52\xc1\xe0\x38\x61\x0c\x54\x2e\xe9\xc3\x91\x23\x95\x5d\x62\x26\xed\x6e\xbf\xbe\xac\x32\xdc\x6b\x0b\x6e\xd9\xe6\x76\x83\x99\x87\xe9\x2f\x4c\xc5\x7b\x6c\xb6\x17\xbc\x81\x50\x91\x4b\xa2\x6f\x53\x91\x7c\xbf\xce\x18\x6f\x7d\x48\xc5\x37\x1f\x3f\x0c\xbf\x2b\xbe\xe2\xfc\x6d\xd2\x4b\x29\xb5\x28\xaa\x87\x29\x2e\xfa\xea\x82\x4e\xf3\xab\x5b\x1d\x97\xeb\x98\x77\x92\xcb\xd0\xab\x37\x22\x77\xeb\x0f\xae\x96\x35\x6e\xc5\x35\x62\xbc\xf5\x29\x53\xb8\x03\x2b\x63\xfd\xb1\x28\x2d\x04\x1c\x5d\x0a\x0e\xf0\xa4\x2d\xed\x59\x8f\xeb\xc3\x19\xd9\x37\xa8\x3f\xa8\x1f\xd4\x46\x1b\x7e\x09\xab\x86\x9c\x32\xcc\x52\xff\x07\xda\x57\xd9\xe3\x60\x10\xa3\x43\x5e\x6c\x44\x0f\xbb\x8f\xe4\xc2\xd4\x10\x18\x63\x2e\xbf\x7c\xfe\x39\xf9\x28\x5f\xda\xa6\xe0\x60\xfe\x7f\xf2\x13\xba\xc2\x07\x75\xb8\x67\xdf\xad\xed\xe4\x2b\x4f\x31\x4a\xf0\x6f\x33\x64\x7a\x72\xb2\x4c\x0f\x7f\x74\xbb\x37\x7f\x07\x00\x00\xff\xff\x55\x3e\x1f\x59\xf0\x06\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1776, mode: os.FileMode(436), modTime: time.Unix(1546833787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8f\xdb\x44\x10\x7e\xef\x5f\x31\x5a\x84\xfa\x82\x77\xd3\x52\x89\xca\x17\x9f\x84\x40\x08\x09\x90\x2a\xd1\xf2\x5a\xcd\xad\xc7\xf6\x5c\xd7\xbb\x66\x67\x93\x5c\x88\xfc\xbf\x23\xff\x4a\x7c\x39\xa0\x50\x40\x79\xd9\x9d\x5f\xdf\x7c\xdf\x6c\xc6\xdb\x26\xb5\x0e\x1c\xfa\xba\x50\xe4\xb3\x9d\xa8\xdb\x67\x00\xdb\x86\xb0\x1c\x0e\x00\x5b\xc7\xfe\x03\x44\x72\x85\x62\x1b\xbc\x82\x74\xec\xa8\x50\xdc\x62\x4d\xa6\xf3\xb5\x82\x26\x52\x55\xa8\x26\xa5\x4e\x72\x63\x24\x85\x88\x35\xe9\x3a\x84\xda\x11\x76\x2c\xda\x86\xd6\x34\x28\xbb\x88\x59\x1d\xb1\x6b\x7e\x75\x19\xf9\x9a\x3d\x19\x1b\xbc\x04\x47\x06\x45\x28\x89\xa9\x70\x3f\x60\xe8\xb1\xac\x99\xf1\xc5\x46\xee\xd2\x74\x81\x03\xfb\x32\x1c\xf4\xfb\xf7\xe4\xf7\x50\xc0\x69\xb2\x02\x60\xc7\xdf\x07\x49\x39\x9c\x4e\x7a\x3e\xf7\xfd\x17\x2b\xef\x9b\x10\x53\x0e\x6a\x72\x0f\x97\xbe\x57\x67\xbf\x75\xfc\x0b\x45\xe1\xe0\xc7\x02\x97\xeb\xaa\x46\x89\x09\xbf\xee\xf8\x5d\x74\x63\xcc\xe5\xfa\x34\x66\x5d\xeb\xb1\x69\xdd\x93\xb5\x24\xf2\x03\x1d\xa7\x9e\x97\xdb\x2a\x62\x17\xdd\x9b\x48\x15\x3f\xe4\xa0\xcc\xaa\xd9\x49\xb3\x9f\x42\x49\x39\x28\xeb\xf8\xe2\xda\xed\xb8\x1c\xcb\x0d\x87\x75\x5f\x2c\x78\xe7\xe8\x2d\x39\x6a\x29\xc5\x09\xf2\xda\xd8\xf7\x53\x78\x7f\x33\xe9\x6e\x2e\xc2\x6f\xcd\xf2\x1e\xb6\x77\xa1\x3c\x2e\x83\x49\x47\x47\xd3\x59\xb7\xc8\xfe\x9b\xe0\x13\xf9\x74\x1e\x4a\xc9\xd2\x39\x3c\xe6\xf0\xdc\x07\x4f\xcf\x6f\x66\x73\xe8\xd0\x72\x3a\xe6\xb0\x59\x2c\x29\xa2\x17\x4e\xa3\x64\xb3\x17\xf4\xcb\x8d\x80\x63\x4f\x18\xa7\xb0\xfe\x09\x90\x96\x26\x1c\xfe\x00\xed\xce\x05\xfb\xe1\x29\xdc\x8b\x4f\x80\xdb\x9a\x99\xe4\x74\x2b\x79\x0f\x5c\x16\xca\x05\x2c\xd9\xd7\x6a\x7e\x94\x93\xc3\x3a\x14\x29\x54\x87\x35\x65\x4b\x00\x8c\xe9\x85\x9a\xe3\x5a\xf6\x59\x43\x5c\x37\x29\x87\x17\x9b\xcd\xbe\x59\x5a\x3a\x70\x99\x9a\xd1\xf6\xf9\xcd\x35\x9f\xca\xd1\xc3\x62\x44\xc7\xb5\xcf\x38\x51\x2b\x39\x58\xf2\x89\xe2\xe2\xaa\x82\x4f\x59\x85\x2d\xbb\x63\x0e\x82\x5e\x32\xa1\xc8\xd5\xe2\xbe\xdf\x49\xe2\xea\x98\xd9\x49\xbb\xeb\xec\x33\x95\x61\xae\x1d\xfa\x85\xcd\x35\x83\x19\x47\xf8\x37\xca\xe1\x25\xb5\x37\x67\x7b\x8b\xb1\x66\x9f\xa5\xd0\xe5\x90\x7d\xb9\xf6\xd8\xe0\x42\xcc\xe1\xb3\xd7\xaf\x86\xdf\xc5\xbe\xc2\xfc\x71\xd2\x4b\x6b\xbd\x28\x6a\x86\x2e\xce\xfa\x9a\x92\xf7\xf3\xab\x5b\x1d\x97\x71\xcc\x9c\xd4\xd2\xf4\xea\x8d\xa8\xdb\x75\xc2\x65\x95\x8d\xac\xa4\x21\x4a\xd7\xfb\xcb\x96\xfe\x5e\xb4\x75\x61\x57\x56\x0e\x23\x8d\xdb\x0b\xef\xf1\xc1\x38\xbe\x13\x33\xd2\xc7\x03\x49\x68\xc9\xbc\xd2\x5f\xe9\x8d\xb1\xf2\xd8\xac\x5b\xf6\xda\x8a\x28\x33\xbf\x9b\xd3\x09\xb8\x82\x61\xad\xfc\x9c\x30\xb1\xfd\x96\x23\xf4\xfd\xb3\x8f\xf7\x64\x64\x8c\x37\x03\xa1\xb1\x22\xd8\x06\xa3\x50\x2a\xd4\xbb\xb7\xdf\x65\xaf\xd5\xe3\x1d\x09\x12\xed\x25\x69\x4f\xbe\x0c\x51\xdf\x3f\xcd\xba\x5d\xff\xb7\xff\x24\x7b\x84\xfc\xeb\xdc\x85\x1b\x39\xa1\xbf\xc7\xe7\x5f\x7d\x23\x86\x2d\x39\x7e\x26\xce\xbb\xf4\x9f\xe9\xf2\x5f\x83\x7f\x9a\xbe\xff\x8b\x04\x1f\x9f\xd3\x30\x26\x5f\xce\x53\xda\x9a\x69\x8b\x6f\xcd\xf0\xf1\xbf\x7d\xf6\x7b\x00\x00\x00\xff\xff\xe6\x98\xef\x7e\x04\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2052, mode: os.FileMode(436), modTime: time.Unix(1546855505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

