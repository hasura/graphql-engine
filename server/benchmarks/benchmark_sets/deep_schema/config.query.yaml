# This tells graphql-bench that it's testing a hasura instance and should
# collect some additional metrics:
extended_hasura_checks: true
headers:
  X-Hasura-Admin-Secret: my-secret

# Anchors to help us DRY below; settings here may be overridden selectively
constants:
  scalars:
    # We'll measure at just two consistent load levels, which makes comparing
    # benchmarks within the same run useful.
    #
    # NOTE: a load of 500 may cause hasura to fall over on a laptop. On our
    # beefy CI benchmark runner we cannot sustain 1,000 RPS for the
    # "large_result" queries.
    - &low_load 20
    - &high_load 500

  k6_custom: &k6_custom
    tools: [k6]
    execution_strategy: CUSTOM

  settings: &settings
    # This is equivalent to wrk2's approach:
    executor: 'constant-arrival-rate'
    timeUnit: '1s'
    maxVUs: 500 # NOTE: required, else defaults to `preAllocatedVUs`
    # NOTE: ideally we'd test all of the queries with the same *number of requests*
    # but that would mean running the "low_load" queries for much longer than
    # is acceptable.
    duration: '60s'

queries: []
