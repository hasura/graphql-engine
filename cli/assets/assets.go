// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\xaf\xe3\x34\x10\x7d\xdf\x5f\x61\x19\xa1\x7d\x21\x76\x77\x59\x89\x55\x6e\x72\x25\x04\x42\x20\x40\x5a\x89\x2d\xaf\xab\xa9\x33\x49\xa6\xeb\xd8\xc1\xe3\xb6\x37\x5c\xe5\xbf\xa3\x7c\xb5\x69\x8b\x40\xac\x58\xf5\xc5\x73\x66\xe2\x33\x67\xc6\x3a\xcd\xea\xd8\x58\x61\xc1\x55\xb9\x44\x97\x1c\x58\x3e\xbe\x10\x22\xab\x11\x8a\xe1\x20\x44\x66\xc9\x7d\x14\x01\x6d\x2e\xc9\x78\x27\x45\xec\x5a\xcc\x25\x35\x50\xa1\x6e\x5d\x25\x45\x1d\xb0\xcc\x65\x1d\x63\xcb\xa9\xd6\x1c\x7d\x80\x0a\x55\xe5\x7d\x65\x11\x5a\x62\x65\x7c\xa3\x6b\xe0\x43\x80\xa4\x0a\xd0\xd6\x7f\xd8\x04\x5d\x45\x0e\xb5\xf1\x8e\xbd\x45\x0d\xcc\x18\x59\x97\x70\x1c\x38\xd4\x78\xad\x9e\xf9\xd9\x04\x6a\xe3\x14\x88\x13\xb9\xc2\x9f\xd4\x87\x0f\xe8\x8e\x22\x17\xcf\x13\x2a\x04\xb4\xf4\xa3\xe7\x98\x8a\xe7\x67\x35\x9f\xfb\xfe\xab\x55\xf6\x9d\x0f\x31\x15\x72\x4a\x0f\x41\xdf\xcb\x73\xde\x58\xfa\x1d\x03\x93\x77\xe3\x05\x97\x70\x75\x47\x01\x11\xbe\x6d\x69\x1b\xec\x58\x73\x09\xef\x6b\xd6\x77\x5d\x43\xeb\x9e\x8a\x86\xdc\x6f\x68\x02\xce\x5d\x5f\xe2\x75\x95\x31\xc8\xfc\x33\x76\xff\x50\x73\x08\xf6\x5d\xc0\x92\x9e\x52\x21\xf5\x4a\xd4\x34\xdb\x5f\x7d\x81\xa9\x90\xc6\xd2\x95\xde\xed\xf6\xa7\xef\x17\xb1\xc3\x79\x75\x1f\x3a\xd8\x59\x7c\x8f\x16\x1b\x8c\x61\x62\xbe\xc1\xfa\x7e\x2a\xee\x1f\xa6\x1d\xe9\xcb\x92\x32\xbd\xbc\x9d\x6c\xe7\x8b\x6e\x59\x62\xec\x2c\x4e\x67\xd5\x00\xb9\xef\xbc\x8b\xe8\xe2\x79\x81\x05\x71\x6b\xa1\x4b\xc5\x4b\xe7\x1d\xbe\x7c\x98\x61\xdf\x82\xa1\xd8\xa5\x62\xb3\x20\x31\x80\x63\x8a\xe3\x78\xe7\xac\x50\xaf\x37\x2c\x2c\x39\x84\x30\x95\xf5\x77\x44\x8a\x6b\x7f\xfa\x1b\xb6\x9d\xf5\xe6\xe3\x3d\xdd\xab\x4f\xa0\xcb\xf4\x2c\x72\x8a\x0a\x3a\x0a\x2a\x72\x69\x3d\x14\xe4\x2a\x39\x3f\xe0\x29\x61\x2c\x30\xe7\xb2\x85\x0a\x93\xa5\x40\x8c\x9f\xe7\x72\xae\x6b\xc8\x25\x35\x52\x55\xc7\x54\xbc\xda\x6c\x8e\xf5\xd2\xd2\x89\x8a\x58\x8f\xd8\x97\x0f\xb7\x7a\x4a\x8b\x4f\x0b\x08\x96\x2a\x97\x50\xc4\x86\x53\x61\xd0\x45\x0c\x4b\xaa\xf4\x2e\x26\x25\x34\x64\xbb\x54\x30\x38\x4e\x18\x03\x95\x4b\x7a\x7f\xe0\x48\x65\x97\x98\x69\x76\xb7\x5f\x9f\xa5\x0c\x7b\x6d\xc1\x2d\x6a\x6e\x15\xcc\x3c\x4c\x7f\x62\x2a\x5e\x63\xf3\x70\xc6\x1b\x08\x15\xb9\x24\xfa\x36\x15\xc9\xd7\xeb\x8c\xf1\xd6\x87\x54\x7c\xf1\xf6\xcd\xf0\xbb\xe0\x2b\xce\x5f\xa6\x79\x29\xa5\x96\x89\xea\xa1\x8b\xf3\x7c\x75\x41\xc7\xf9\xd5\xad\x8e\xcb\x3a\x66\x4d\x72\x69\x7a\xf5\x46\xe4\xe3\xfa\x83\x8b\xed\x8d\xaa\xb8\x46\x8c\xb7\x5e\x67\x0a\xb7\x67\x65\xac\x3f\x14\xa5\x85\x80\xa3\xd3\xc1\x1e\x9e\xb4\xa5\x1d\xeb\x51\x3e\x9c\x90\x7d\x83\xfa\x8d\xfa\x46\x6d\xb4\xe1\x6b\x58\x35\xe4\x94\x61\x96\xfa\x3f\xd0\x7e\x92\xc5\x0e\xf6\x31\xba\xec\xd9\x8a\xf4\xa0\x7d\x24\x17\xa6\x86\xc0\x18\x73\xb9\x7d\xff\x43\xf2\x56\x5e\x5b\xaf\xe0\x60\xfe\x7f\xf2\x23\xba\xc2\x07\xb5\xbf\x67\x7f\x5c\xdb\xc9\x67\xee\x62\x1c\xc1\xbf\xf5\x90\xe9\xc9\xc9\x32\x3d\xfc\x59\x3e\xbe\xf8\x2b\x00\x00\xff\xff\xb0\xcf\x45\x1e\x34\x07\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 1844, mode: os.FileMode(436), modTime: time.Unix(1549026480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\xaf\xe3\x34\x10\x7d\xdf\x5f\x61\x19\xa1\x7d\x21\x76\x77\x59\x89\x55\x6e\x72\x25\x04\x42\x20\x40\x5a\x89\x2d\xaf\xab\xa9\x33\x49\xa6\xeb\xd8\xc1\xe3\xb6\x37\x5c\xe5\xbf\xa3\x7c\xb5\x69\x8b\x40\xac\x58\xf5\xc5\x73\x66\xe2\x33\x67\xc6\x3a\xcd\xea\xd8\x58\x61\xc1\x55\xb9\x44\x97\x1c\x58\x3e\xbe\x10\x22\xab\x11\x8a\xe1\x20\x44\x66\xc9\x7d\x14\x01\x6d\x2e\xc9\x78\x27\x45\xec\x5a\xcc\x25\x35\x50\xa1\x6e\x5d\x25\x45\x1d\xb0\xcc\x65\x1d\x63\xcb\xa9\xd6\x1c\x7d\x80\x0a\x55\xe5\x7d\x65\x11\x5a\x62\x65\x7c\xa3\x6b\xe0\x43\x80\xa4\x0a\xd0\xd6\x7f\xd8\x04\x5d\x45\x0e\xb5\xf1\x8e\xbd\x45\x0d\xcc\x18\x59\x97\x70\x1c\x38\xd4\x78\xad\x9e\xf9\xd9\x04\x6a\xe3\x14\x88\x13\xb9\xc2\x9f\xd4\x87\x0f\xe8\x8e\x22\x17\xcf\x13\x2a\x04\xb4\xf4\xa3\xe7\x98\x8a\xe7\x67\x35\x9f\xfb\xfe\xab\x55\xf6\x9d\x0f\x31\x15\x72\x4a\x0f\x41\xdf\xcb\x73\xde\x58\xfa\x1d\x03\x93\x77\xe3\x05\x97\x70\x75\x47\x01\x11\xbe\x6d\x69\x1b\xec\x58\x73\x09\xef\x6b\xd6\x77\x5d\x43\xeb\x9e\x8a\x86\xdc\x6f\x68\x02\xce\x5d\x5f\xe2\x75\x95\x31\xc8\xfc\x33\x76\xff\x50\x73\x08\xf6\x5d\xc0\x92\x9e\x52\x21\xf5\x4a\xd4\x34\xdb\x5f\x7d\x81\xa9\x90\xc6\xd2\x95\xde\xed\xf6\xa7\xef\x17\xb1\xc3\x79\x75\x1f\x3a\xd8\x59\x7c\x8f\x16\x1b\x8c\x61\x62\xbe\xc1\xfa\x7e\x2a\xee\x1f\xa6\x1d\xe9\xcb\x92\x32\xbd\xbc\x9d\x6c\xe7\x8b\x6e\x59\x62\xec\x2c\x4e\x67\xd5\x00\xb9\xef\xbc\x8b\xe8\xe2\x79\x81\x05\x71\x6b\xa1\x4b\xc5\x4b\xe7\x1d\xbe\x7c\x98\x61\xdf\x82\xa1\xd8\xa5\x62\xb3\x20\x31\x80\x63\x8a\xe3\x78\xe7\xac\x50\xaf\x37\x2c\x2c\x39\x84\x30\x95\xf5\x77\x44\x8a\x6b\x7f\xfa\x1b\xb6\x9d\xf5\xe6\xe3\x3d\xdd\xab\x4f\xa0\xcb\xf4\x2c\x72\x8a\x0a\x3a\x0a\x2a\x72\x69\x3d\x14\xe4\x2a\x39\x3f\xe0\x29\x61\x2c\x30\xe7\xb2\x85\x0a\x93\xa5\x40\x8c\x9f\xe7\x72\xae\x6b\xc8\x25\x35\x52\x55\xc7\x54\xbc\xda\x6c\x8e\xf5\xd2\xd2\x89\x8a\x58\x8f\xd8\x97\x0f\xb7\x7a\x4a\x8b\x4f\x0b\x08\x96\x2a\x97\x50\xc4\x86\x53\x61\xd0\x45\x0c\x4b\xaa\xf4\x2e\x26\x25\x34\x64\xbb\x54\x30\x38\x4e\x18\x03\x95\x4b\x7a\x7f\xe0\x48\x65\x97\x98\x69\x76\xb7\x5f\x9f\xa5\x0c\x7b\x6d\xc1\x2d\x6a\x6e\x15\xcc\x3c\x4c\x7f\x62\x2a\x5e\x63\xf3\x70\xc6\x1b\x08\x15\xb9\x24\xfa\x36\x15\xc9\xd7\xeb\x8c\xf1\xd6\x87\x54\x7c\xf1\xf6\xcd\xf0\xbb\xe0\x2b\xce\x5f\xa6\x79\x29\xa5\x96\x89\xea\xa1\x8b\xf3\x7c\x75\x41\xc7\xf9\xd5\xad\x8e\xcb\x3a\x66\x4d\x72\x69\x7a\xf5\x46\xe4\xe3\xfa\x83\x8b\xed\x8d\xaa\xb8\x46\x8c\xb7\x5e\x67\x0a\xb7\x67\x65\xac\x3f\x14\xa5\x85\x80\xa3\xd3\xc1\x1e\x9e\xb4\xa5\x1d\xeb\x51\x3e\x9c\x90\x7d\x83\xfa\x8d\xfa\x46\x6d\xb4\xe1\x6b\x58\x35\xe4\x94\x61\x96\xfa\x3f\xd0\x7e\x92\xc5\x0e\xf6\x31\xba\xec\xd9\x8a\xf4\xa0\x7d\x24\x17\xa6\x86\xc0\x18\x73\xb9\x7d\xff\x43\xf2\x56\x5e\x5b\xaf\xe0\x60\xfe\x7f\xf2\x23\xba\xc2\x07\xb5\xbf\x67\x7f\x5c\xdb\xc9\x67\xee\x62\x1c\xc1\xbf\xf5\x90\xe9\xc9\xc9\x32\x3d\xfc\x59\x3e\xbe\xf8\x2b\x00\x00\xff\xff\xb0\xcf\x45\x1e\x34\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1844, mode: os.FileMode(436), modTime: time.Unix(1549026511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x8f\xdb\x44\x10\x7f\xbf\x4f\x31\x5a\x84\xfa\x82\x77\xd3\x52\x89\xca\x97\x9c\x84\xa8\x10\x08\x90\x2a\xb5\xc7\x6b\x35\xb7\x1e\xdb\x73\x5d\xef\x9a\x9d\x4d\x72\x21\xf2\x77\x47\xfe\x97\xf8\x72\xd0\x42\x01\xe5\x65\xe7\xef\x6f\x7e\x33\xeb\xd9\xac\xeb\xd4\x38\x70\xe8\xab\x8d\x22\x9f\x6d\x45\xdd\x5c\x01\xac\x6b\xc2\xa2\x3f\x00\xac\x1d\xfb\x0f\x10\xc9\x6d\x14\xdb\xe0\x15\xa4\x43\x4b\x1b\xc5\x0d\x56\x64\x5a\x5f\x29\xa8\x23\x95\x1b\x55\xa7\xd4\x4a\x6e\x8c\xa4\x10\xb1\x22\x5d\x85\x50\x39\xc2\x96\x45\xdb\xd0\x98\x1a\x65\x1b\x31\xab\x22\xb6\xf5\x6f\x2e\x23\x5f\xb1\x27\x63\x83\x97\xe0\xc8\xa0\x08\x25\x31\x25\xee\x7a\x0c\x3d\xa4\x35\x13\xbe\xd8\xc8\x6d\x1a\x05\xd8\xb3\x2f\xc2\x5e\xbf\x7f\x4f\x7e\x07\x1b\x38\x8e\x5a\x00\x6c\xf9\x87\x20\x29\x87\xe3\x51\x4f\xe7\xae\xfb\x6a\x61\x7d\x13\x62\xca\x41\x8d\xe6\x5e\xe8\x3a\x75\xb2\x5b\xc7\xbf\x52\x14\x0e\x7e\x48\x70\x16\x17\x39\x0a\x4c\xf8\x6d\xcb\xb7\xd1\x0d\x3e\x67\xf1\xa9\xcf\x32\xd7\x63\xd5\xb2\xa6\xa2\x61\xff\x96\x6c\xa4\xa9\xea\xb3\xbc\xf4\xb2\x96\x44\x7e\xa2\xc3\x47\x7c\xb6\xd1\xbd\x89\x54\xf2\x43\x0e\xca\x2c\x48\x8d\xbd\xfd\x25\x14\x94\x83\xb2\x8e\x1f\xf1\xbd\xbd\xfd\xf1\xf5\x4c\xb6\x3f\x2f\xf2\x91\xc7\x3b\x47\xef\xc8\x51\x43\x29\x8e\xc8\x17\xba\xae\x1b\x9d\xbb\xeb\x71\x46\xe6\x3c\xa4\xb5\x99\xef\xce\xfa\x2e\x14\x87\x79\x88\xe9\xe0\x68\x3c\xeb\x06\xd9\x7f\x17\x7c\x22\x9f\x4e\x03\x2c\x58\x5a\x87\x87\x1c\x9e\xf9\xe0\xe9\xd9\xf5\xa4\x0e\x2d\x5a\x4e\x87\x1c\x56\xb3\x26\x45\xf4\xc2\x69\x68\xef\x64\x05\xfd\x62\x25\xe0\xd8\x13\xc6\xd1\xad\x7b\x02\xa4\xa5\x0e\xfb\x3f\x41\xbb\x73\xc1\x7e\x78\x0a\xf7\xfc\x33\xe0\xd6\x66\x22\x39\x4a\x05\xef\x80\x8b\x8d\x72\x01\x0b\xf6\x95\x9a\x2e\xf0\x68\xb0\x0e\x45\x36\xaa\xc5\x8a\xb2\xd9\x01\x86\xf0\x8d\x9a\xfc\x1a\xf6\x59\x4d\x5c\xd5\x29\x87\xe7\xab\xd5\xae\x9e\x4b\xda\x73\x91\xea\x41\xf7\xe5\xf5\x25\x9f\xd2\xd1\xc3\xac\x44\xc7\x95\xcf\x38\x51\x23\x39\x58\xf2\x89\xe2\x6c\x2a\x83\x4f\x59\x89\x0d\xbb\x43\x0e\x82\x5e\x32\xa1\xc8\xe5\x6c\xbe\xdf\x4a\xe2\xf2\x90\xd9\xb1\x77\x97\xd1\x27\x2a\xfd\x5c\x5b\xf4\x33\x9b\x4b\x06\x13\x8e\xf0\xef\x94\xc3\x0b\x6a\xae\x4f\xfa\x06\x63\xc5\x3e\x4b\xa1\xcd\x21\xfb\x7a\x69\xb1\xc1\x85\x98\xc3\x17\xaf\x5e\xf6\xbf\xb3\x7e\x81\xf9\xf3\xd8\x2f\xad\xf5\xdc\x51\xd3\x57\x71\xea\xaf\x29\x78\x37\xdd\xba\xc5\x71\x1e\xc7\xc4\x49\xcd\x45\x2f\xee\x88\xba\x59\x06\x9c\xd7\xde\xc0\x4a\x6a\xa2\x74\xb9\xeb\x6c\xe1\xef\x45\x5b\x17\xb6\x45\xe9\x30\xd2\xb0\xe9\xf0\x1e\x1f\x8c\xe3\x3b\x31\x03\x7d\xdc\x93\x84\x86\xcc\x4b\xfd\x8d\x5e\x19\x2b\x8f\xd5\xba\x61\xaf\xad\x88\x32\xd3\xbd\x39\x1e\x81\x4b\xe8\xbf\xca\xb7\x09\x13\xdb\xd7\x1c\xa1\xeb\xae\x3e\x5d\x93\x91\xc1\xdf\xf4\x84\x86\x8c\x60\x6b\x8c\x42\x69\xa3\x6e\xdf\x7d\x9f\xbd\x52\x8f\xf7\x29\x48\xb4\xe7\xa0\x1d\xf9\x22\x44\x7d\xff\x34\xea\x66\xf9\x6d\xff\x45\xf4\x00\xf9\xf1\xd8\x99\x1b\x39\xa1\xbf\xc7\xe7\x5f\xbd\x27\xfd\xae\x1c\x9e\x94\xd3\xde\xfd\x67\x7d\xf9\xaf\xc1\x3f\xaf\xbf\xff\x4b\x0b\x3e\x3d\xa7\x7e\x4c\xbe\x98\xa6\xb4\x36\xe3\x16\x5f\x9b\xfe\x8f\xc2\xcd\xd5\x1f\x01\x00\x00\xff\xff\x72\xa0\x5a\x05\x30\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2096, mode: os.FileMode(436), modTime: time.Unix(1549026493, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

