-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Scalar exposing (Codecs, Id(..), Timestamptz(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Id
    = Id String


type Timestamptz
    = Timestamptz String


defineCodecs :
    { codecId : Codec valueId
    , codecTimestamptz : Codec valueTimestamptz
    }
    -> Codecs valueId valueTimestamptz
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueId valueTimestamptz
    ->
        { codecId : Codec valueId
        , codecTimestamptz : Codec valueTimestamptz
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueId valueTimestamptz
    = Codecs (RawCodecs valueId valueTimestamptz)


type alias RawCodecs valueId valueTimestamptz =
    { codecId : Codec valueId
    , codecTimestamptz : Codec valueTimestamptz
    }


defaultCodecs : RawCodecs Id Timestamptz
defaultCodecs =
    { codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecTimestamptz =
        { encoder = \(Timestamptz raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Timestamptz
        }
    }
