# this Docker Compose file loads `v3-engine` along with an `ndc-postgres`
# connector and a sample `postgres` database
# run it with `docker compose up`, then access Graphiql at localhost:3000
# or view traces in Jaeger at localhost:4002

services:
  engine:
    build:
      dockerfile: Dockerfile
    environment:
      - METADATA_PATH=app/metadata.json
      - AUTHN_CONFIG_PATH=app/auth_config.json
      - OTLP_ENDPOINT=http://jaeger:4317
    ports:
      - 3000:3000
    depends_on:
      jaeger:
        condition: service_started
      auth_hook:
        condition: service_started
    extra_hosts:
      - local.hasura.dev=${LOCALHOST_GATEWAY:-host-gateway}
    volumes:
      - ./static/auth/auth_config.json:/app/auth_config.json
      - ./static/metadata.json:/app/metadata.json
      - ./crates/open-dds/examples/reference.json:/app/crates/open-dds/examples/reference.json

  postgres:
    image: postgis/postgis:16-3.4
    platform: linux/amd64
    restart: always
    command:
      - -F # turn fsync off for speed
      - -N 1000 # increase max connections from 100 so we can run more HGEs
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: "password"
    volumes:
      - type: volume
        source: postgres
        target: /var/lib/postgresql/data
      - type: bind
        source: ./crates/engine/tests/db_definition.sql
        target: /docker-entrypoint-initdb.d/01-db_definition.sql
        read_only: true
      - type: bind
        source: ./crates/engine/tests/chinook-postgres.sql
        target: /docker-entrypoint-initdb.d/02-chinook.sql
        read_only: true
      - type: bind
        source: ./crates/engine/tests/finish.sql
        target: /docker-entrypoint-initdb.d/03-finish.sql
        read_only: true
    healthcheck:
      test:
        - CMD-SHELL
        - psql -U "$${POSTGRES_USER:-postgres}" finished < /dev/null
      start_period: 2s
      interval: 2s
      timeout: 1s
      retries: 5

  auth_hook:
    build:
      dockerfile: dev-auth-webhook.Dockerfile
    environment:
      OTLP_ENDPOINT: "http://jaeger:4317"
      RUST_LOG: debug
    ports:
      - "3050:3050"
    depends_on:
      jaeger:
        condition: service_started

  jaeger:
    image: jaegertracing/all-in-one:1.55
    restart: always
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 4002:16686
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 4317:4317 # OTLP gRPC
      - 4318:4318 # OTLP HTTP
      - 9411:9411
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      COLLECTOR_ZIPKIN_HOST_PORT: "9411"

  postgres_connector_ndc_v01:
    image: ghcr.io/hasura/ndc-postgres:dev-main
    ports:
      - 8080:8080
    environment:
      CONNECTION_URI: "postgresql://postgres:password@postgres"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://jaeger:4317"
      OTEL_SERVICE_NAME: "ndc-postgres"
      RUST_LOG: info
    volumes:
      - type: bind
        source: ./crates/engine/tests/ndc-postgres-configuration
        target: /etc/connector
        read_only: true
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started

  postgres_connector:
    image: ghcr.io/hasura/ndc-postgres:dev-benoit-eng-362-update-ndc-postgres-to-ndc_models-020
    ports:
      - 8082:8080
    environment:
      CONNECTION_URI: "postgresql://postgres:password@postgres"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://jaeger:4317"
      OTEL_SERVICE_NAME: "ndc-postgres"
      RUST_LOG: info
    volumes:
      - type: bind
        source: ./crates/engine/tests/ndc-postgres-configuration
        target: /etc/connector
        read_only: true
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started

  custom_connector:
    build:
      dockerfile: custom-connector.Dockerfile
    entrypoint:
      - ./bin/custom-connector
    ports:
      - "8102:8102"
    environment:
      RUST_LOG: info
      ENABLE_RELATIONSHIP_SUPPORT: "1" # Enabled
    healthcheck:
      test: curl -fsS http://localhost:8102/schema
      start_period: 5s
      interval: 5s
      timeout: 10s
      retries: 20

  custom_connector_no_relationships:
    build:
      dockerfile: custom-connector.Dockerfile
    entrypoint:
      - ./bin/custom-connector
    ports:
      - "8103:8102"
    environment:
      RUST_LOG: info
      ENABLE_RELATIONSHIP_SUPPORT: "0" # Disabled
    healthcheck:
      test: curl -fsS http://localhost:8102/schema
      start_period: 5s
      interval: 5s
      timeout: 10s
      retries: 20

  custom_connector_ndc_v01:
    # This is the v3-engine commit version before the custom connector got upgraded to ndc_models v0.2.0
    image: ghcr.io/hasura/v3-custom-connector:bef8a750ca31b067952247ad348683a4faa843f5
    ports:
      - "8101:8101"
    environment:
      RUST_LOG: info

volumes:
  postgres:
