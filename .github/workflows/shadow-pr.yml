name: shadow pr
on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  open-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Get pull request
      uses: actions/github-script@v3
      id: pr
      with:
        github-token: ${{secrets.HASURA_BOT_GH_TOKEN}}
        script: |
          const pullRequestNumber = context.payload.number;

          const pr = await github.pulls.get({
            owner: 'hasura',
            repo: 'graphql-engine',
            pull_number: pullRequestNumber
          });

          if (pr.status != 200) {
            core.setFailed('API request to get pull request returned non-success status code ' + pr.status);
            return;
          }

          core.setOutput('ossPrBaseSha', pr.data.base.sha);
          core.setOutput('ossPrTitle', pr.data.title);
          core.setOutput('ossPrUrl', pr.data.html_url);

          const fs = require('fs');
          fs.writeFileSync('pr-body.txt', pr.data.body);

          let kodiakCommitMessage = `<!-- kodiak-commit-message-body-start: do not remove/edit this line -->\n`;
          kodiakCommitMessage += `GITHUB_PR_NUMBER: ${pullRequestNumber}\nGITHUB_PR_URL: ${pr.data.html_url}`;
          fs.writeFileSync('kodiak-commit-message-body.txt');

    - name: Get all authors of the pull request
      uses: actions/github-script@v3
      id: commit-authors
      with:
        github-token: ${{secrets.HASURA_BOT_GH_TOKEN}}
        script: |
          const pullRequestNumber = ${{ github.event.inputs.ossPrNumber }};

          const commits = await github.pulls.listCommits({
            owner: 'hasura',
            repo: 'graphql-engine',
            pull_number: pullRequestNumber
          });

          if (commits.status != 200) {
            core.setFailed('API request to get commits of pull request returned non-success status code ' + commits.status);
            return;
          }

          let authors = commits.data.map(c => `${c.commit.author.name} <${c.commit.author.email}>`);
          authors = Array.from(new Set(authors));
          core.setOutput('allCommitAuthors', authors.join(','));
          core.setOutput('coAuthoredBy', authors.map(author => `Co-authored-by: ${author}`).join('\n'));
          core.setOutput('firstCommitAuthor', authors[0]);

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: graphql-engine-mono

    - name: "Merge and push pr branch"
      env:
        PR_NUMBER: ${{ github.event.inputs.ossPrNumber }}
        PR_TITLE: ${{ steps.pr.outputs.ossPrTitle }}
        PR_URL: ${{ steps.pr.outputs.ossPrUrl }}
        PR_CO_AUTHORS: ${{ steps.commit-authors.outputs.coAuthoredBy }}
        COMMIT_AUTHOR: ${{ steps.commit-authors.outputs.firstCommitAuthor }}
      run: |
        cp -r .ssh $HOME/.ssh
        cp graphql-engine-mono/bot.gitconfig $HOME/.gitconfig

        COMMIT_MESSAGE=$(printf "$PR_TITLE\n\n$PR_CO_AUTHORS\nGITHUB_PR_NUMBER: $PR_NUMBER\nGITHUB_PR_URL: $PR_URL")

        mkdir -p graphql-engine-transforms

        # TODO clone mono instead of oss
        git clone git@github.com:hasura/graphql-engine.git
        pushd graphql-engine
          git fetch origin pull/$PR_NUMBER/head:migration-source
          git checkout migration-source
          git merge master

          mv .circleci ../graphql-engine-transforms/oss-.circleci
          mv .github ../graphql-engine-transforms/oss-.github
          mv .gitignore ../graphql-engine-transforms/oss-.gitignore
          rsync -av . ../graphql-engine-mono --exclude .git
        popd

        rsync -av graphql-engine-transforms/ graphql-engine-mono/

        pushd graphql-engine-mono
          git status
          git add .
          git commit --author="$COMMIT_AUTHOR" -m "$COMMIT_MESSAGE"
          git checkout -b oss_pr_refs/pull/$PR_NUMBER/head
          git push origin oss_pr_refs/pull/$PR_NUMBER/head -f
        popd

    - name: "Open pull request"
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.HASURA_BOT_GH_TOKEN}}
        script: |
          const fs = require('fs');
          const prBody = fs.readFileSync('pr-body.txt', 'utf-8');
          const kodiakCommitMessage = fs.readFileSync('kodiak-commit-message-body.txt', 'utf-8');

          let body = `This PR was migrated from ${{ steps.pr.outputs.ossPrUrl }} \n\n---\n`;
          body += `${prBody} \n\n---\n`;
          body += `# Kodiak commit message\n The commit message body used by [Kodiak bot](https://kodiakhq.com/)\n\n ${kodiakCommitMessage}`

          const pr = await github.pulls.create({
            owner: 'hasura',
            repo: 'graphql-engine-mono',
            head: 'oss_pr_refs/pull/${{ github.event.inputs.ossPrNumber }}/head',
            base: 'main',
            title: '${{ steps.pr.outputs.ossPrTitle }}',
            body,
          });

          console.log('Migrated PR in graphql-engine-mono = ', pr.data.html_url);
