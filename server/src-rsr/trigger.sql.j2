CREATE OR REPLACE function hdb_views.{{QUALIFIED_TRIGGER_NAME}}() RETURNS trigger
  LANGUAGE plpgsql
  AS $$
  DECLARE
    _old record;
    _new record;
    _data json;
  BEGIN
{% if (OPERATION == "UPDATE") && (SHOULD_DIFF == "True") %}
    _old := {{OLD_ROW}};
    _new := {{NEW_ROW}};
    IF (_old <> _new) THEN
      _data := json_build_object(
        'old', {{OLD_PAYLOAD_EXPRESSION}},
        'new', {{NEW_PAYLOAD_EXPRESSION}}
      );
      PERFORM hdb_catalog.insert_event_log(CAST(TG_TABLE_SCHEMA AS text), CAST(TG_TABLE_NAME AS text), CAST('{{NAME}}' AS text), TG_OP, _data);
    END IF;
{% else %}
    _data := json_build_object(
      'old', {{OLD_PAYLOAD_EXPRESSION}},
      'new', {{NEW_PAYLOAD_EXPRESSION}}
    );
    PERFORM hdb_catalog.insert_event_log(CAST(TG_TABLE_SCHEMA AS text), CAST(TG_TABLE_NAME AS text), CAST('{{NAME}}' AS text), TG_OP, _data);
{% endif %}
    RETURN NULL;
  END;
$$;
DROP TRIGGER IF EXISTS {{QUALIFIED_TRIGGER_NAME}} ON {{QUALIFIED_TABLE}};
CREATE TRIGGER {{QUALIFIED_TRIGGER_NAME}} AFTER {{OPERATION}} ON {{QUALIFIED_TABLE}} FOR EACH ROW EXECUTE PROCEDURE hdb_views.{{QUALIFIED_TRIGGER_NAME}}();
