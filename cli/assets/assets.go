// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8b\x1b\x47\x0c\x7e\xcf\x5f\x21\xa6\x94\xbc\x74\x67\x9c\x34\xd0\xb0\xf6\x1e\x84\x96\xd2\xd2\x16\x02\xcd\xf5\x35\xe8\x66\xb5\xbb\xba\xcc\xce\x6c\x47\x63\xdf\xb9\xc6\xff\x7b\xd9\x5f\xf6\xda\x17\x08\x3d\x1a\xfc\x32\xf3\x49\x9a\x4f\x9f\xa4\x95\x37\x4d\x6a\x1d\x38\xf4\x75\xa1\xc8\x67\x5b\x51\x37\x2f\x00\x36\x0d\x61\xd9\x1f\x00\x36\x8e\xfd\x27\x88\xe4\x0a\xc5\x36\x78\x05\x69\xdf\x51\xa1\xb8\xc5\x9a\x4c\xe7\x6b\x05\x4d\xa4\xaa\x50\x4d\x4a\x9d\xe4\xc6\x48\x0a\x11\x6b\xd2\x75\x08\xb5\x23\xec\x58\xb4\x0d\xad\x69\x50\xb6\x11\xb3\x3a\x62\xd7\xfc\xed\x32\xf2\x35\x7b\x32\x36\x78\x09\x8e\x0c\x8a\x50\x12\x53\xe1\xae\xe7\xd0\xc3\xb3\x66\xe2\x17\x1b\xb9\x4b\xe3\x05\xe0\x81\x7d\x19\x1e\xf4\xc7\x8f\xe4\x77\x50\xc0\x61\x82\x01\xb0\xe3\x5f\x82\xa4\x1c\x0e\x07\x3d\x9d\x8f\xc7\xef\x96\xe6\xf7\x21\xa6\x1c\xd4\x68\xef\x2f\xc7\xa3\x3a\x3b\x58\xc7\x7f\x51\x14\x0e\x7e\x78\xe2\x7c\x5d\xbe\x52\x62\xc2\x77\x1d\xdf\x46\x37\x38\x9d\xaf\x9f\x71\x5a\xbe\x76\x09\x2d\x9d\x0f\x87\x0c\xb8\x02\xdd\xa0\xbc\xb3\x96\x44\x7e\xa3\x3d\x1c\x8f\xe7\xbc\x67\x70\x14\x56\xb6\xec\xff\x24\x1b\x29\x5d\x3e\x02\xe4\x84\x2e\xe2\xce\x9e\x5f\x8a\xf4\x25\x64\x8b\xc8\x6d\x74\xef\x23\x55\xfc\x98\x83\x32\xcb\x02\x8d\xbd\xfa\x23\x94\x94\x83\xb2\x8e\x2f\x8b\x77\x7b\xfb\xeb\x4f\x73\xe5\xfa\xf3\x92\x85\x3c\xde\x39\xfa\x40\x8e\x5a\x4a\x71\x94\x72\x85\x9d\x12\x38\xae\xc7\xb6\x9b\x73\xdf\x37\x66\x1e\xc7\xcd\x5d\x28\xf7\xf3\x5c\xa4\xbd\xa3\xf1\xac\x5b\x64\xff\x63\xf0\x89\x7c\x3a\x8d\x44\xc9\xd2\x39\xdc\xe7\xf0\xd2\x07\x4f\x2f\xd7\x13\x1c\x3a\xb4\x9c\xf6\x39\xac\x66\x24\x45\xf4\xc2\x69\xe8\xd5\x64\x05\xfd\x7a\x25\xe0\xd8\x13\xc6\xd1\xed\xf8\x84\x48\x4b\x13\x1e\x3e\xc3\x76\xe7\x82\xfd\xf4\x94\xee\xd5\x33\xe8\x36\x66\x12\x39\xde\x4a\xde\x01\x97\x85\x72\x01\x4b\xf6\xb5\x9a\xbf\x89\xc1\x60\x1d\x8a\x14\xaa\xc3\x9a\xb2\xd9\x01\x86\xf0\x42\x4d\x7e\x2d\xfb\xac\x21\xae\x9b\x94\xc3\xab\xd5\x6a\xd7\xac\x4f\x1f\x55\x99\x9a\x01\xfb\x76\x7d\xad\xa7\x72\xf4\x38\x83\xe8\xb8\xf6\x19\x27\x6a\x25\x07\x4b\x3e\x51\x9c\x4d\x55\xf0\x29\xab\xb0\x65\xb7\xcf\x41\xd0\x4b\x26\x14\xb9\x9a\xcd\xf7\x5b\x49\x5c\xed\x33\x3b\xd6\xee\x3a\xfa\x24\xa5\xef\x6b\x87\x7e\x56\x73\xad\x60\xe2\x11\xfe\x87\x72\x78\x4d\xed\xfa\x84\xb7\x18\x6b\xf6\x59\x0a\x5d\x0e\xd9\xf7\x4b\x8b\x0d\x2e\xc4\x1c\xbe\x79\xfb\xa6\xff\x9d\xf1\x05\xe7\xef\x63\xbd\xb4\xd6\x73\x45\x4d\x9f\xc5\xa9\xbe\xa6\xe4\xdd\x34\x75\x8b\xe3\xdc\x8e\x49\x93\x9a\x93\x5e\xcc\x88\xba\x59\x06\x9c\x37\xe9\xa0\x4a\x1a\xa2\x74\xbd\x3e\x6d\xe9\xef\x45\x5b\x17\xb6\x65\xe5\x30\xd2\xb0\x3c\xf1\x1e\x1f\x8d\xe3\x3b\x31\x83\x7c\x7c\x20\x09\x2d\x99\x37\xfa\x07\xbd\x32\x56\x2e\x61\xdd\xb2\xd7\x56\x44\x99\xff\x40\xfb\xac\xad\xdd\xaf\x95\x61\x71\x9f\xf6\x9a\xe9\xb5\x0f\xe4\x60\x1b\x8c\x42\xa9\x50\xb7\x1f\x7e\xce\xde\xaa\xcb\x6d\x0e\x12\xed\xff\x4f\xbe\x23\x5f\x86\xa8\xef\x9f\xb2\xdf\x2c\xd7\xc9\x57\xce\x62\x28\xc1\x97\x72\xd8\x98\x71\x93\x6d\x4c\xff\xff\x7b\xf3\xe2\xdf\x00\x00\x00\xff\xff\x10\x9d\xed\x42\x87\x07\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 1927, mode: os.FileMode(420), modTime: time.Unix(1549616240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8b\x1b\x47\x0c\x7e\xcf\x5f\x21\xa6\x94\xbc\x74\x67\x9c\x34\xd0\xb0\xf6\x1e\x84\x96\xd2\xd2\x16\x02\xcd\xf5\x35\xe8\x66\xb5\xbb\xba\xcc\xce\x6c\x47\x63\xdf\xb9\xc6\xff\x7b\xd9\x5f\xf6\xda\x17\x08\x3d\x1a\xfc\x32\xf3\x49\x9a\x4f\x9f\xa4\x95\x37\x4d\x6a\x1d\x38\xf4\x75\xa1\xc8\x67\x5b\x51\x37\x2f\x00\x36\x0d\x61\xd9\x1f\x00\x36\x8e\xfd\x27\x88\xe4\x0a\xc5\x36\x78\x05\x69\xdf\x51\xa1\xb8\xc5\x9a\x4c\xe7\x6b\x05\x4d\xa4\xaa\x50\x4d\x4a\x9d\xe4\xc6\x48\x0a\x11\x6b\xd2\x75\x08\xb5\x23\xec\x58\xb4\x0d\xad\x69\x50\xb6\x11\xb3\x3a\x62\xd7\xfc\xed\x32\xf2\x35\x7b\x32\x36\x78\x09\x8e\x0c\x8a\x50\x12\x53\xe1\xae\xe7\xd0\xc3\xb3\x66\xe2\x17\x1b\xb9\x4b\xe3\x05\xe0\x81\x7d\x19\x1e\xf4\xc7\x8f\xe4\x77\x50\xc0\x61\x82\x01\xb0\xe3\x5f\x82\xa4\x1c\x0e\x07\x3d\x9d\x8f\xc7\xef\x96\xe6\xf7\x21\xa6\x1c\xd4\x68\xef\x2f\xc7\xa3\x3a\x3b\x58\xc7\x7f\x51\x14\x0e\x7e\x78\xe2\x7c\x5d\xbe\x52\x62\xc2\x77\x1d\xdf\x46\x37\x38\x9d\xaf\x9f\x71\x5a\xbe\x76\x09\x2d\x9d\x0f\x87\x0c\xb8\x02\xdd\xa0\xbc\xb3\x96\x44\x7e\xa3\x3d\x1c\x8f\xe7\xbc\x67\x70\x14\x56\xb6\xec\xff\x24\x1b\x29\x5d\x3e\x02\xe4\x84\x2e\xe2\xce\x9e\x5f\x8a\xf4\x25\x64\x8b\xc8\x6d\x74\xef\x23\x55\xfc\x98\x83\x32\xcb\x02\x8d\xbd\xfa\x23\x94\x94\x83\xb2\x8e\x2f\x8b\x77\x7b\xfb\xeb\x4f\x73\xe5\xfa\xf3\x92\x85\x3c\xde\x39\xfa\x40\x8e\x5a\x4a\x71\x94\x72\x85\x9d\x12\x38\xae\xc7\xb6\x9b\x73\xdf\x37\x66\x1e\xc7\xcd\x5d\x28\xf7\xf3\x5c\xa4\xbd\xa3\xf1\xac\x5b\x64\xff\x63\xf0\x89\x7c\x3a\x8d\x44\xc9\xd2\x39\xdc\xe7\xf0\xd2\x07\x4f\x2f\xd7\x13\x1c\x3a\xb4\x9c\xf6\x39\xac\x66\x24\x45\xf4\xc2\x69\xe8\xd5\x64\x05\xfd\x7a\x25\xe0\xd8\x13\xc6\xd1\xed\xf8\x84\x48\x4b\x13\x1e\x3e\xc3\x76\xe7\x82\xfd\xf4\x94\xee\xd5\x33\xe8\x36\x66\x12\x39\xde\x4a\xde\x01\x97\x85\x72\x01\x4b\xf6\xb5\x9a\xbf\x89\xc1\x60\x1d\x8a\x14\xaa\xc3\x9a\xb2\xd9\x01\x86\xf0\x42\x4d\x7e\x2d\xfb\xac\x21\xae\x9b\x94\xc3\xab\xd5\x6a\xd7\xac\x4f\x1f\x55\x99\x9a\x01\xfb\x76\x7d\xad\xa7\x72\xf4\x38\x83\xe8\xb8\xf6\x19\x27\x6a\x25\x07\x4b\x3e\x51\x9c\x4d\x55\xf0\x29\xab\xb0\x65\xb7\xcf\x41\xd0\x4b\x26\x14\xb9\x9a\xcd\xf7\x5b\x49\x5c\xed\x33\x3b\xd6\xee\x3a\xfa\x24\xa5\xef\x6b\x87\x7e\x56\x73\xad\x60\xe2\x11\xfe\x87\x72\x78\x4d\xed\xfa\x84\xb7\x18\x6b\xf6\x59\x0a\x5d\x0e\xd9\xf7\x4b\x8b\x0d\x2e\xc4\x1c\xbe\x79\xfb\xa6\xff\x9d\xf1\x05\xe7\xef\x63\xbd\xb4\xd6\x73\x45\x4d\x9f\xc5\xa9\xbe\xa6\xe4\xdd\x34\x75\x8b\xe3\xdc\x8e\x49\x93\x9a\x93\x5e\xcc\x88\xba\x59\x06\x9c\x37\xe9\xa0\x4a\x1a\xa2\x74\xbd\x3e\x6d\xe9\xef\x45\x5b\x17\xb6\x65\xe5\x30\xd2\xb0\x3c\xf1\x1e\x1f\x8d\xe3\x3b\x31\x83\x7c\x7c\x20\x09\x2d\x99\x37\xfa\x07\xbd\x32\x56\x2e\x61\xdd\xb2\xd7\x56\x44\x99\xff\x40\xfb\xac\xad\xdd\xaf\x95\x61\x71\x9f\xf6\x9a\xe9\xb5\x0f\xe4\x60\x1b\x8c\x42\xa9\x50\xb7\x1f\x7e\xce\xde\xaa\xcb\x6d\x0e\x12\xed\xff\x4f\xbe\x23\x5f\x86\xa8\xef\x9f\xb2\xdf\x2c\xd7\xc9\x57\xce\x62\x28\xc1\x97\x72\xd8\x98\x71\x93\x6d\x4c\xff\xff\x7b\xf3\xe2\xdf\x00\x00\x00\xff\xff\x10\x9d\xed\x42\x87\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1927, mode: os.FileMode(420), modTime: time.Unix(1549616343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x8f\x1b\x35\x10\x7e\xbf\xbf\x62\x64\x84\xfa\xc2\xda\x69\xa9\x44\xb5\x49\x4e\xaa\xa8\x10\x08\x90\x2a\xb5\xc7\x6b\x35\xe7\x9d\xdd\x9d\xab\xd7\x5e\x3c\x4e\xee\x42\x94\xff\x1d\xed\xaf\x64\x93\x2b\x1c\x9c\x40\x79\xb1\xe7\x87\x3f\x7f\xdf\xcc\x8e\xb3\xaa\x53\xe3\xc0\xa1\xaf\xd6\x8a\x7c\xb6\x11\x75\x7d\x05\xb0\xaa\x09\x8b\x6e\x01\xb0\x72\xec\x3f\x43\x24\xb7\x56\x6c\x83\x57\x90\x76\x2d\xad\x15\x37\x58\x91\x69\x7d\xa5\xa0\x8e\x54\xae\x55\x9d\x52\x2b\xb9\x31\x92\x42\xc4\x8a\x74\x15\x42\xe5\x08\x5b\x16\x6d\x43\x63\x6a\x94\x4d\xc4\xac\x8a\xd8\xd6\xbf\xbb\x8c\x7c\xc5\x9e\x8c\x0d\x5e\x82\x23\x83\x22\x94\xc4\x94\xb8\xed\x30\x74\x7f\xac\x19\xf1\xc5\x46\x6e\xd3\xb0\x01\xb8\x67\x5f\x84\x7b\xfd\xe9\x13\xf9\x2d\xac\x61\x3f\x9a\x01\xb0\xe5\x1f\x83\xa4\x1c\xf6\x7b\x3d\xae\x0f\x87\x6f\xe6\xee\xf7\x21\xa6\x1c\xd4\xe0\xef\x36\x87\x83\x3a\x05\x58\xc7\xbf\x51\x14\x0e\xbe\x3f\xe2\xb4\x9d\x9f\x52\x60\xc2\xb7\x2d\xdf\x44\xd7\x07\x9d\xb6\x5f\x08\x9a\x9f\x76\x6e\x9a\x07\xef\xf7\x19\x70\x09\xba\x46\x79\x6b\x2d\x89\xfc\x4c\x3b\x38\x1c\x4e\xf7\x9e\x8c\x03\xb1\xa2\x61\xff\x81\x6c\xa4\x74\x7e\x08\x90\x13\x3a\xcb\x3b\x45\x3e\x95\xe9\x0b\xc8\x66\x99\x9b\xe8\xde\x47\x2a\xf9\x21\x07\x65\xe6\x02\x0d\xb5\xfa\x35\x14\x94\x83\xb2\x8e\xcf\xc5\xbb\xb9\xf9\xe9\xdd\xa4\x5c\xb7\x9e\xa3\x90\xc7\x5b\x47\x1f\xc9\x51\x43\x29\x0e\x54\x2e\x6c\xc7\x0b\x1c\x96\x43\xd9\xcd\xa9\xee\x2b\x33\xb5\xe3\xea\x36\x14\xbb\xa9\x2f\xd2\xce\xd1\xb0\xd6\x0d\xb2\xff\x3e\xf8\x44\x3e\x1d\x5b\xa2\x60\x69\x1d\xee\x72\x78\xe1\x83\xa7\x17\xcb\xd1\x1c\x5a\xb4\x9c\x76\x39\x2c\x26\x4b\x8a\xe8\x85\x53\x5f\xab\xd1\x0b\xfa\xd5\x42\xc0\xb1\x27\x8c\x43\xd8\xe1\x11\x90\x96\x3a\xdc\x7f\x01\xed\xd6\x05\xfb\xf9\x31\xdc\xcb\x67\xc0\xad\xcc\x48\x72\xd8\x15\xbc\x05\x2e\xd6\xca\x05\x2c\xd8\x57\x6a\xfa\x26\x7a\x87\x75\x28\xb2\x56\x2d\x56\x94\x4d\x01\xd0\xa7\xaf\xd5\x18\xd7\xb0\xcf\x6a\xe2\xaa\x4e\x39\xbc\x5c\x2c\xb6\xf5\xf2\xf8\x51\x15\xa9\xee\x6d\x5f\x2f\x2f\xf9\x94\x8e\x1e\x26\x23\x3a\xae\x7c\xc6\x89\x1a\xc9\xc1\x92\x4f\x14\x27\x57\x19\x7c\xca\x4a\x6c\xd8\xed\x72\x10\xf4\x92\x09\x45\x2e\x27\xf7\xdd\x46\x12\x97\xbb\xcc\x0e\xda\x5d\x66\x1f\xa9\x74\x75\x6d\xd1\x4f\x6c\x2e\x19\x8c\x38\xc2\x7f\x50\x0e\xaf\xa8\x59\x1e\xed\x0d\xc6\x8a\x7d\x96\x42\x9b\x43\xf6\xed\xdc\x63\x83\x0b\x31\x87\xaf\xde\xbc\xee\x7e\x27\xfb\x0c\xf3\x97\x41\x2f\xad\xf5\xa4\xa8\xe9\x6e\x71\xd4\xd7\x14\xbc\x1d\xbb\x6e\xb6\x9c\xca\x31\x72\x52\xd3\xa5\x67\x3d\xa2\xae\xe7\x09\xa7\x49\xda\xb3\x92\x9a\x28\x5d\x8e\x4f\x5b\xf8\x3b\xd1\xd6\x85\x4d\x51\x3a\x8c\xd4\x0f\x4f\xbc\xc3\x07\xe3\xf8\x56\x4c\x4f\x1f\xef\x49\x42\x43\xe6\xb5\xfe\x4e\x2f\x8c\x95\x73\xb3\x6e\xd8\x6b\x2b\xa2\xcc\xd8\x37\xfb\x7d\x3f\x61\xac\xe3\x0f\x09\x13\xdb\x77\x1c\xbb\x49\xf1\xf4\x9d\x8c\xf4\xf1\xa6\x23\xd4\x9f\x08\xb6\xc6\x28\x94\xd6\xea\xe6\xe3\x0f\xd9\x1b\x75\x3e\xa2\x41\xa2\x3d\x25\x6d\xc9\x17\x21\xea\xbb\xc7\x59\xd7\xf3\x6f\xfb\x2f\xb2\x7b\xc8\xbf\xcf\xbd\xba\x98\x7c\xff\x5c\xe3\x67\x3d\x51\xdd\x0c\xed\x5f\xa9\xe3\x10\xff\x77\xba\xfc\xd7\xe0\xcf\xd3\xf7\x7f\x91\xe0\xe9\x3a\x8d\xcf\xcc\x50\xa5\x95\x19\xa6\xf8\xca\x74\xff\x3d\xae\xaf\xfe\x0c\x00\x00\xff\xff\xf1\x61\x20\xea\x83\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2179, mode: os.FileMode(420), modTime: time.Unix(1549616250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

