// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// metadata/sql/schema_info.sql.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8b\x1b\x47\x0c\x7e\xcf\x5f\x21\xa6\x94\x3c\xb4\x3b\xe3\xa4\x81\x86\xb5\xf7\x20\xb4\x94\x96\xb6\x10\x68\xae\xaf\xc7\xdc\xac\x76\x57\x97\x59\xcd\x76\x34\xf6\x9d\x6b\xfc\xbf\x97\xfd\x65\xaf\x7d\x81\xd0\xd2\xe0\x97\xd1\x27\x69\x3e\x7d\x1a\xad\xbc\x69\x52\xeb\xc1\x5b\xae\x0b\x85\x9c\x6d\x45\xdd\xbc\x00\xd8\x34\x68\xcb\xfe\x00\xb0\xf1\xc4\x1f\x21\xa2\x2f\x14\xb9\xc0\x0a\xd2\xbe\xc3\x42\x51\x6b\x6b\x34\xb2\xab\xbf\x79\x6a\xbd\x82\x26\x62\x55\xa8\x26\xa5\x4e\x72\x63\xea\x68\xbb\xe6\x2f\x9f\x21\xd7\xc4\x98\xb9\x92\x75\x63\x65\x1b\xad\xa6\x60\xa8\xad\xcd\x68\xdd\xf5\x17\xde\xd5\x11\x91\xb5\xec\x6a\x05\x66\xa2\x14\x17\xa9\x4b\xa3\x01\xf0\x48\x5c\x86\x47\x7d\x77\x87\xbc\x83\x02\x0e\x13\x0c\x60\x3b\xfa\x39\x48\xca\xe1\x70\xd0\xd3\xf9\x78\xfc\x76\xe9\x7e\x1f\x62\xca\x41\x8d\xfe\xde\x38\x1e\xd5\x39\xc0\x79\xfa\x13\xa3\x50\xe0\xe1\x8a\xb3\xb9\xbc\xa5\xb4\xc9\xbe\xeb\xe8\x36\xfa\x21\xe8\x6c\x7e\x22\x68\x79\xdb\x25\xb4\x0c\x3e\x1c\x32\xa0\x0a\xfa\x96\xbc\x73\x0e\x45\x7e\xc5\x3d\x1c\x8f\xe7\xba\x67\x70\x14\x56\xb6\xc4\x7f\xa0\x8b\x98\x2e\x2f\x01\xf4\x82\x17\x79\xe7\xc8\xcf\x65\x72\x09\xd9\x22\x73\x1b\xfd\xfb\x88\x15\x3d\xe5\xa0\xcc\xb2\x41\x81\x25\x78\xfc\x3d\x94\x98\x83\x72\x9e\x2e\x9b\x77\x7b\xfb\xcb\x8f\x73\xe7\xfa\xf3\x92\x05\xd9\xde\x7b\xfc\x80\x1e\x5b\x4c\x71\x94\x72\x85\x9d\x0a\x38\xae\xc7\x67\x37\xe7\x77\xdf\x98\x79\x02\x37\xf7\xa1\xdc\xcf\x73\x91\xf6\x1e\xc7\xb3\x6e\x2d\xf1\x0f\x81\x13\x72\x3a\x8d\x44\x49\xd2\x79\xbb\xcf\xe1\x25\x07\xc6\x97\xeb\x09\x0e\x9d\x75\x94\xf6\x39\xac\x66\x24\x45\xcb\x42\x69\x78\xab\xc9\x0b\xfa\xf5\x4a\xc0\x13\xa3\x8d\x63\xd8\xf1\x19\x91\x96\x26\x3c\x7e\x82\xed\xde\x07\xf7\xf1\x39\xdd\xab\xff\x40\xb7\x31\x93\xc8\xd1\x2a\x69\x07\x54\x16\xca\x07\x5b\x12\xd7\x6a\xfe\x26\x06\x87\xf3\x56\xa4\x50\x9d\xad\x31\x9b\x03\x60\x48\x2f\xd4\x14\xd7\x12\x67\x0d\x52\xdd\xa4\x1c\x5e\xad\x56\xbb\x66\x7d\xfa\xa8\xca\xd4\x0c\xd8\xd7\xeb\x6b\x3d\x95\xc7\xa7\x19\xb4\x9e\x6a\xce\x28\x61\x2b\x39\x38\xe4\x84\x71\x76\x55\x81\x53\x56\xd9\x96\xfc\x3e\x07\xb1\x2c\x99\x60\xa4\x6a\x76\x3f\x6c\x25\x51\xb5\xcf\xdc\xd8\xbb\xeb\xec\x93\x94\xfe\x5d\x3b\xcb\xb3\x9a\x6b\x05\x13\x8f\xd0\xdf\x98\xc3\x6b\x6c\xd7\x27\xbc\xb5\xb1\x26\xce\x52\xe8\x72\xc8\xbe\x5b\x7a\x5c\xf0\x21\xe6\xf0\xd5\xdb\x37\xfd\xef\x8c\x2f\x38\x7f\x1b\xfb\xa5\xb5\x9e\x3b\x6a\xfa\x2a\x4e\xfd\x35\x25\xed\xa6\xa9\x5b\x1c\xe7\xe7\x98\x34\xa9\xb9\xe8\xc5\x8c\xa8\x9b\x65\xc2\x79\x79\x0e\xaa\xa4\x41\x4c\xd7\xdb\xd2\x95\xfc\x20\xda\xf9\xb0\x2d\x2b\x6f\x23\x6a\x17\x5a\x63\x1f\xec\x93\xf1\x74\x2f\x66\x90\x6f\x1f\x51\x42\x8b\xe6\x8d\xfe\x5e\xaf\x8c\x93\x4b\x58\xb7\xc4\xda\x89\x28\xf3\x2f\x68\x25\x85\x68\x6b\xd4\x75\x08\xb5\x47\xdb\x91\x0c\xc4\xe3\x6a\xce\x2e\x57\xb8\x99\x36\x81\xe9\xd7\x8a\x08\x26\x39\xed\x35\xd3\x6b\x1f\xc8\xc1\x35\x36\x0a\xa6\x42\xdd\x7e\xf8\x29\x7b\xab\x2e\xb7\x39\x48\x74\xff\x3f\xf9\x0e\xb9\x0c\x51\x3f\x3c\x67\xbf\x59\xae\x93\x2f\x5c\xc5\xd0\x82\xcf\xd5\xb0\x31\xe3\x26\xdb\x98\xfe\x2f\xf7\xe6\xc5\x3f\x01\x00\x00\xff\xff\x63\x45\x3f\xa5\x7a\x07\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1554409814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8b\x1b\x47\x0c\x7e\xcf\x5f\x21\xa6\x94\x3c\xb4\x3b\xe3\xa4\x81\x86\xb5\xf7\x20\xb4\x94\x96\xb6\x10\x68\xae\xaf\xc7\xdc\xac\x76\x57\x97\x59\xcd\x76\x34\xf6\x9d\x6b\xfc\xbf\x97\xfd\x65\xaf\x7d\x81\xd0\xd2\xe0\x97\xd1\x27\x69\x3e\x7d\x1a\xad\xbc\x69\x52\xeb\xc1\x5b\xae\x0b\x85\x9c\x6d\x45\xdd\xbc\x00\xd8\x34\x68\xcb\xfe\x00\xb0\xf1\xc4\x1f\x21\xa2\x2f\x14\xb9\xc0\x0a\xd2\xbe\xc3\x42\x51\x6b\x6b\x34\xb2\xab\xbf\x79\x6a\xbd\x82\x26\x62\x55\xa8\x26\xa5\x4e\x72\x63\xea\x68\xbb\xe6\x2f\x9f\x21\xd7\xc4\x98\xb9\x92\x75\x63\x65\x1b\xad\xa6\x60\xa8\xad\xcd\x68\xdd\xf5\x17\xde\xd5\x11\x91\xb5\xec\x6a\x05\x66\xa2\x14\x17\xa9\x4b\xa3\x01\xf0\x48\x5c\x86\x47\x7d\x77\x87\xbc\x83\x02\x0e\x13\x0c\x60\x3b\xfa\x39\x48\xca\xe1\x70\xd0\xd3\xf9\x78\xfc\x76\xe9\x7e\x1f\x62\xca\x41\x8d\xfe\xde\x38\x1e\xd5\x39\xc0\x79\xfa\x13\xa3\x50\xe0\xe1\x8a\xb3\xb9\xbc\xa5\xb4\xc9\xbe\xeb\xe8\x36\xfa\x21\xe8\x6c\x7e\x22\x68\x79\xdb\x25\xb4\x0c\x3e\x1c\x32\xa0\x0a\xfa\x96\xbc\x73\x0e\x45\x7e\xc5\x3d\x1c\x8f\xe7\xba\x67\x70\x14\x56\xb6\xc4\x7f\xa0\x8b\x98\x2e\x2f\x01\xf4\x82\x17\x79\xe7\xc8\xcf\x65\x72\x09\xd9\x22\x73\x1b\xfd\xfb\x88\x15\x3d\xe5\xa0\xcc\xb2\x41\x81\x25\x78\xfc\x3d\x94\x98\x83\x72\x9e\x2e\x9b\x77\x7b\xfb\xcb\x8f\x73\xe7\xfa\xf3\x92\x05\xd9\xde\x7b\xfc\x80\x1e\x5b\x4c\x71\x94\x72\x85\x9d\x0a\x38\xae\xc7\x67\x37\xe7\x77\xdf\x98\x79\x02\x37\xf7\xa1\xdc\xcf\x73\x91\xf6\x1e\xc7\xb3\x6e\x2d\xf1\x0f\x81\x13\x72\x3a\x8d\x44\x49\xd2\x79\xbb\xcf\xe1\x25\x07\xc6\x97\xeb\x09\x0e\x9d\x75\x94\xf6\x39\xac\x66\x24\x45\xcb\x42\x69\x78\xab\xc9\x0b\xfa\xf5\x4a\xc0\x13\xa3\x8d\x63\xd8\xf1\x19\x91\x96\x26\x3c\x7e\x82\xed\xde\x07\xf7\xf1\x39\xdd\xab\xff\x40\xb7\x31\x93\xc8\xd1\x2a\x69\x07\x54\x16\xca\x07\x5b\x12\xd7\x6a\xfe\x26\x06\x87\xf3\x56\xa4\x50\x9d\xad\x31\x9b\x03\x60\x48\x2f\xd4\x14\xd7\x12\x67\x0d\x52\xdd\xa4\x1c\x5e\xad\x56\xbb\x66\x7d\xfa\xa8\xca\xd4\x0c\xd8\xd7\xeb\x6b\x3d\x95\xc7\xa7\x19\xb4\x9e\x6a\xce\x28\x61\x2b\x39\x38\xe4\x84\x71\x76\x55\x81\x53\x56\xd9\x96\xfc\x3e\x07\xb1\x2c\x99\x60\xa4\x6a\x76\x3f\x6c\x25\x51\xb5\xcf\xdc\xd8\xbb\xeb\xec\x93\x94\xfe\x5d\x3b\xcb\xb3\x9a\x6b\x05\x13\x8f\xd0\xdf\x98\xc3\x6b\x6c\xd7\x27\xbc\xb5\xb1\x26\xce\x52\xe8\x72\xc8\xbe\x5b\x7a\x5c\xf0\x21\xe6\xf0\xd5\xdb\x37\xfd\xef\x8c\x2f\x38\x7f\x1b\xfb\xa5\xb5\x9e\x3b\x6a\xfa\x2a\x4e\xfd\x35\x25\xed\xa6\xa9\x5b\x1c\xe7\xe7\x98\x34\xa9\xb9\xe8\xc5\x8c\xa8\x9b\x65\xc2\x79\x79\x0e\xaa\xa4\x41\x4c\xd7\xdb\xd2\x95\xfc\x20\xda\xf9\xb0\x2d\x2b\x6f\x23\x6a\x17\x5a\x63\x1f\xec\x93\xf1\x74\x2f\x66\x90\x6f\x1f\x51\x42\x8b\xe6\x8d\xfe\x5e\xaf\x8c\x93\x4b\x58\xb7\xc4\xda\x89\x28\xf3\x2f\x68\x25\x85\x68\x6b\xd4\x75\x08\xb5\x47\xdb\x91\x0c\xc4\xe3\x6a\xce\x2e\x57\xb8\x99\x36\x81\xe9\xd7\x8a\x08\x26\x39\xed\x35\xd3\x6b\x1f\xc8\xc1\x35\x36\x0a\xa6\x42\xdd\x7e\xf8\x29\x7b\xab\x2e\xb7\x39\x48\x74\xff\x3f\xf9\x0e\xb9\x0c\x51\x3f\x3c\x67\xbf\x59\xae\x93\x2f\x5c\xc5\xd0\x82\xcf\xd5\xb0\x31\xe3\x26\xdb\x98\xfe\x2f\xf7\xe6\xc5\x3f\x01\x00\x00\xff\xff\x63\x45\x3f\xa5\x7a\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1554409814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xdb\x36\x13\xbe\xef\xaf\x18\xf0\xc5\x8b\x1c\x5a\x91\x4e\x1a\xa0\x81\x6c\x2d\x10\x34\x28\x5a\xb4\x05\x02\x24\xdb\xeb\x82\x4b\x8e\xa4\xd9\x50\xa4\xca\xa1\xbd\xeb\x1a\xfe\xef\x85\xbe\x2c\xd9\x9b\x76\xdb\xa0\x85\x2f\x9c\x6f\x3e\xcf\x8c\x86\xde\xd4\xa9\x71\xe0\xb4\xaf\x0a\x81\x3e\xdb\xb2\xb8\xbe\x02\xd8\xd4\xa8\x6d\x77\x00\xd8\x38\xf2\x9f\x20\xa2\x2b\x04\x99\xe0\x05\xa4\x7d\x8b\x85\xa0\x46\x57\xa8\x78\x57\x7d\xf5\xd8\x38\x01\x75\xc4\xb2\x10\x75\x4a\x2d\xe7\x4a\x55\x51\xb7\xf5\x6f\x2e\x43\x5f\x91\xc7\xcc\x58\x2f\x6b\xcd\xdb\xa8\x25\x05\x45\x4d\xa5\x06\xe9\xb6\x4b\x78\x5b\x45\x44\x2f\x79\x57\x09\x50\x63\x49\x36\x91\xda\x34\x08\x00\x0f\xe4\x6d\x78\x90\xb7\xb7\xe8\x77\x50\xc0\x61\x54\x03\xe8\x96\x7e\x08\x9c\x72\x38\x1c\xe4\x78\x3e\x1e\xbf\x5e\x9a\xdf\x87\x98\x72\x10\x83\xbd\x13\x8e\x47\x31\x3b\x18\x47\xbf\x62\x64\x0a\xbe\x4f\x31\x8b\xcb\x2c\x56\x27\xfd\xb6\xa5\x9b\xe8\x7a\xa7\x59\xfc\x8c\xd3\x32\xdb\xb9\x6a\xe9\x7c\x38\x64\x40\x25\x74\x94\xbc\x35\x06\x99\x7f\xc2\x3d\x1c\x8f\xf3\xbd\x27\xe5\x00\xcc\x36\xe4\x3f\xa0\x89\x98\xce\x93\x00\x3a\xc6\xb3\xb8\xd9\xf3\xb9\x48\x6f\x21\x5b\x44\x6e\xa3\x7b\x1f\xb1\xa4\xc7\x1c\x84\x5a\x12\x14\x3c\x07\x87\xbf\x04\x8b\x39\x08\xe3\xe8\x9c\xbc\x9b\x9b\x1f\xdf\x4d\xcc\x75\xe7\x65\x15\xf4\xfa\xce\xe1\x47\x74\xd8\x60\x8a\x03\x94\x0b\xdd\xe9\x02\xc7\xf5\xd0\x76\x35\xf7\x7d\xa3\xa6\x09\xdc\xdc\x05\xbb\x9f\xe6\x22\xed\x1d\x0e\x67\xd9\x68\xf2\xdf\x05\x9f\xd0\xa7\xd3\x48\x58\xe2\xd6\xe9\x7d\x0e\x2f\x7c\xf0\xf8\x62\x3d\xaa\x43\xab\x0d\xa5\x7d\x0e\xab\x49\x93\xa2\xf6\x4c\xa9\xef\xd5\x68\x05\xf9\x6a\xc5\xe0\xc8\xa3\x8e\x83\xdb\xf1\x49\x21\xc9\x75\x78\xf8\x4c\xb5\x3b\x17\xcc\xa7\xa7\xe5\x5e\x7e\x41\xb9\x8d\x1a\x41\x0e\x92\xa5\x1d\x90\x2d\x84\x0b\xda\x92\xaf\xc4\xf4\x4d\xf4\x06\xe3\x34\x73\x21\x5a\x5d\x61\x36\x39\x40\x1f\x5e\x88\xd1\xaf\x21\x9f\xd5\x48\x55\x9d\x72\x78\xb9\x5a\xed\xea\xf5\xe9\xa3\xb2\xa9\xee\x75\xff\x5f\x5f\xe2\x29\x1d\x3e\x4e\x4a\xed\xa8\xf2\x19\x25\x6c\x38\x07\x83\x3e\x61\x9c\x4c\x65\xf0\x29\x2b\x75\x43\x6e\x9f\x03\x6b\xcf\x19\x63\xa4\x72\x32\xdf\x6f\x39\x51\xb9\xcf\xcc\xc0\xdd\x65\xf4\x09\x4a\xd7\xd7\x56\xfb\x09\xcd\x25\x82\xb1\x0e\xd3\xef\x98\xc3\x2b\x6c\xd6\x27\x7d\xa3\x63\x45\x3e\x4b\xa1\xcd\x21\xfb\x66\x69\x31\xc1\x85\x98\xc3\xff\xde\xbc\xee\x7e\xb3\x7e\x51\xf3\xe7\x81\x2f\x29\xe5\xc4\xa8\xea\x6e\x71\xe2\x57\x59\xda\x8d\x53\xb7\x38\x4e\xed\x18\x31\x89\xe9\xd2\x8b\x19\x11\xd7\xcb\x80\x79\x79\xf6\xa8\xb8\x46\x4c\x97\xdb\xd2\x58\x7f\xcf\xd2\xb8\xb0\xb5\xa5\xd3\x11\xa5\x09\x8d\xd2\xf7\xfa\x51\x39\xba\x63\xd5\xc3\xd7\x0f\xc8\xa1\x41\xf5\x5a\x7e\x2b\x57\xca\xf0\xb9\x5a\x36\xe4\xa5\x61\x16\x6a\x9c\x9b\xc3\xa1\xdf\x30\xc6\xd1\x87\xa4\x13\x99\x77\x14\xbb\x4d\xf1\xfc\x9d\x14\xf7\xfe\xaa\x03\xd4\x67\x04\x53\xeb\xc8\x98\x0a\x71\xf3\xf1\xfb\xec\x8d\x38\x5f\xd1\xc0\xd1\xcc\x41\x3b\xf4\x36\x44\x79\xff\x34\xea\x7a\xf9\x6d\xff\x49\x74\x5f\xf2\xaf\x63\xaf\x2e\x36\xdf\xdf\xe7\x98\x53\x88\xba\x42\x59\x85\x50\x39\xd4\x2d\x71\xcf\xf2\xf0\x0e\x65\xe7\xef\x95\x1a\xd7\x9e\xea\x76\x28\x33\x26\x3e\x2d\xf1\x7f\xc6\xcb\xbf\x5d\xfc\xcb\xf8\xfd\x4f\x28\x78\xbe\x4f\xe3\x33\x33\x74\x69\xa3\x86\x2d\xbe\x51\xdd\xdf\x8d\xeb\xab\x3f\x02\x00\x00\xff\xff\xac\x5c\x8b\xeb\x76\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2166, mode: os.FileMode(420), modTime: time.Unix(1554409814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metadataSqlSchema_infoSqlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x69\x6f\xdb\x36\xf4\xbb\x7f\x05\x81\x62\x90\x54\xa8\x01\xfa\x35\x80\x0d\x38\xa9\xba\xb8\x75\xa4\xcd\x07\x82\x60\x18\x04\x59\xa6\x1d\x35\xb6\x94\x48\x74\xb7\x60\xc8\x7f\x1f\x78\xe8\x20\x45\x4a\x94\x15\xa7\x29\x36\x7e\x33\xf9\x6e\xbe\x83\xef\xc9\x37\x93\xc5\x15\x40\xc1\x6a\x07\xfd\x14\xee\xfc\xec\xb0\xdd\xc2\x0c\x45\x49\x9c\x81\xf1\x7c\x00\x80\x39\x77\xa6\xce\xe5\x02\xa4\x70\x17\x90\xed\xbb\xe8\x21\x3b\xa3\x08\x71\xb0\x87\xf6\x00\x14\x4b\x06\x93\x85\x77\x70\x1f\x54\xa1\xbe\x65\x49\xbc\xf2\x83\xed\xd6\x4c\x93\xbf\x7c\x94\xf8\x78\xc3\xe4\x71\xdf\x5b\xe7\xe7\xe0\xcb\xdc\x73\x2f\xc0\x07\x60\x54\x29\x19\xe5\x06\x66\x6f\x58\x60\x3c\xe7\x19\x63\x56\x9f\x67\xde\x35\x65\x99\xcb\x7f\xb7\x5e\xf9\x9b\xfb\x50\x29\x15\x00\x02\x88\xa8\x5c\x05\x20\x4c\x76\x87\x7d\xec\xef\x83\x87\x87\x28\xde\x82\x5c\x54\x05\x74\x0a\x37\x3e\x25\xa9\xc1\xbb\x00\x16\xce\x8d\x64\xf5\x0d\x86\xc8\xc0\xcc\x10\xfc\x1b\x31\xad\x7d\xf4\xf4\x00\x19\x24\xd6\x99\xd0\x09\x03\x14\xec\x92\xed\x19\xa1\x99\xa4\x30\xda\xc6\xfe\x3d\x7c\xf2\xc3\x24\xce\x50\x1a\x44\x31\xc1\x66\x1c\x19\xf2\xd4\xf9\xbc\x00\xde\x72\xe1\xcc\xc0\x17\x6f\xe2\xd6\xe8\x54\x2d\x9c\x63\xa7\x70\x07\x3c\x57\x6a\x59\x30\xcc\x21\xb8\x6d\xc6\x6c\xec\x7e\x92\x18\xbb\x86\x83\x37\x05\x0c\x7c\x98\xab\x0d\x86\x85\x55\x2a\x50\xa6\xc9\x1b\xae\x70\x80\x30\x39\xc4\xc8\x7c\x6f\x09\xc7\xd4\x6c\xd8\x05\x7d\x4a\x0c\x9b\x2a\x33\xe5\x57\x6d\x59\x60\x08\x3e\x72\x14\x44\xc9\xd6\x70\x03\x86\xcc\xc7\x57\x87\x68\xb7\x66\x64\x4d\x43\x7e\x15\x7e\x12\x1b\xb6\x28\x93\xee\xca\x75\x13\xc5\x3f\x96\x5e\x37\x63\x1c\xcd\x65\x3a\xb9\x9e\x2c\xc0\x47\xcb\xe2\x48\x78\x33\x20\xde\x9d\xc6\xf5\x75\xbf\xc1\x91\x70\x83\x8a\x4b\x7c\x37\x1a\x01\xe3\x9f\x7d\x10\x1f\x82\x1d\xbe\xaf\x4d\xb4\x3d\xa4\x24\x06\xec\x14\xee\x13\xc4\xc2\xf9\xd9\x60\x7e\xcb\x45\xaf\x1e\x03\x15\x7d\xc0\xcb\xcc\xb1\xe0\x8f\xce\xcf\x49\xe6\x29\x0c\x79\x73\xe5\xcc\x1c\x8e\x13\x89\xac\xc9\x1c\xb8\xcb\xe9\x94\x01\xfd\x3a\xf3\x96\xbf\x81\x8b\x5b\x9d\x9c\xa8\x91\x15\x3b\x66\xba\xf6\x5c\xd7\x9a\x68\x19\xf8\xd2\x9d\x78\x2e\x10\xf2\xbb\x5c\x06\x9c\xb2\x1a\x65\x92\xca\x85\xb1\x16\xe3\x8b\xa9\xe3\xbb\xe3\x6b\x47\x8a\x73\x39\x9e\x3b\xaa\x38\xb8\xb9\x72\x5c\xe6\xb7\x5f\x9d\x5b\x92\x3a\xc0\x02\xef\x55\x7d\x15\xd7\xc1\xaf\xce\xad\x0d\xbe\x07\xbb\x03\xb4\x04\x15\x6b\xcb\x99\xce\x9d\x1a\x3e\x41\xb5\x01\x66\xd2\x84\xef\xb8\x9f\xb0\x46\xbc\x51\x1b\x2d\x21\x9a\x50\xf3\x82\xeb\x24\x88\x17\x56\x09\x48\x71\x8c\x20\x4d\x83\xa7\xb7\x5c\xe3\x14\xde\xa5\x5d\xed\x4a\xd7\x3a\xa2\xd8\x51\xeb\xfc\xe0\x5a\x67\xca\xf3\xa4\xb2\xb8\xd9\xf5\x2c\x59\x53\xb8\xb2\xbc\x99\x3c\x4f\xea\xd0\x97\x15\x5d\xf2\x46\xb4\x65\x49\x0c\x18\xec\x41\x29\x9e\xd2\x6d\xbe\x36\x35\x54\x08\xb5\x64\xd4\x9e\x58\x34\xc5\x35\xb5\x95\xed\x5e\xd5\xb8\x28\xb2\x6f\xa8\xc6\x2a\x9c\xa7\x5b\x91\x6d\x72\x9f\x06\x0f\xd2\x63\xf2\xc2\x3e\xc4\x99\xb2\xf7\x23\x60\xd0\xea\x45\x7a\xd5\xa0\xbc\x4c\x18\x84\x77\x3e\xce\xb5\xca\xab\xb4\x6c\x11\x52\xee\x77\xff\x8d\x97\x87\xbc\xdb\x2c\xd4\xd2\x69\x92\x9b\xda\x64\x8b\x01\x16\xfd\x38\xdf\x83\x3f\x2a\xed\xf5\xa8\x60\x26\xef\xb5\x1f\x7b\x74\xd7\x55\xea\xa4\x20\x11\xea\x8f\xc5\x8d\xe7\x18\xe4\x47\x43\x2f\x2e\x16\x4b\x49\x3f\xcc\x17\xc7\x53\x76\xd7\xa2\xdb\x36\x1c\xe3\x62\xdc\x70\xbc\x86\x9b\xa6\xa7\x8a\xe2\x89\xa1\xf9\x40\x69\x7d\xe8\xa8\xda\xf1\x61\xe7\x66\x7c\xd8\xf4\x3a\x29\xd4\x57\x17\x8e\x6e\xf5\x62\xf8\x51\xf1\xf4\x59\xc3\xcd\xf0\xc4\xbd\xf4\x8b\xf5\xd0\xa7\xed\x9d\xc5\x72\x5e\xcf\xb7\xd8\x33\x87\xc2\x44\x44\x6a\xd1\x0f\xa3\x51\x83\x01\x49\xca\xf6\x16\xca\xb4\xdd\x12\xb8\x1a\xa1\x7b\xa2\xb4\x5d\xd1\xb0\xf1\xbc\xe2\xcb\xb5\x0e\xb2\x55\x39\x4d\x05\x81\x4e\x6b\xa8\xbc\x3c\xda\x25\x36\xe1\xeb\xae\x1a\x9f\x35\xdc\xbc\x1b\x8d\x34\x5e\x43\x36\x35\xc0\xb3\x91\x97\x70\x2a\x94\xf1\x70\x58\xed\xa2\xd0\xe8\x2b\x18\xe9\x63\xfb\x09\xd6\x47\x04\xa7\x92\xc4\x64\x92\x69\xd9\x5e\x69\x5c\x65\x70\x3d\x73\xd1\xf5\x72\xd7\xdc\x61\x75\x17\xda\x7e\x0d\x7f\xe8\xb0\x94\xae\xa3\xab\xc1\x2b\xc9\xda\xe0\x63\xbc\x2e\xdd\x3c\xe0\x0d\x84\xf4\xab\x05\x6f\x9b\x09\x15\xe7\x6c\xd0\xd5\x61\x5a\xf5\x93\xe7\x6a\x5c\x83\xc4\x6b\x3d\x8a\x52\xff\xe0\xe8\xe1\x1b\x54\x8b\xff\xd3\xfa\x31\xeb\xe8\xb4\xae\xeb\x3a\xad\x03\xb8\x9f\xa1\x02\xf4\xf7\xb0\x2e\x52\xbe\xb9\xfc\xff\x43\xd2\xc4\x2b\x25\x84\x17\x2a\x15\x8d\x0f\x7e\xc5\x78\xa0\x0e\x24\x19\x12\xd4\x81\x7a\x8d\x0a\x68\xfb\x67\xb6\xf7\x7f\x64\x1d\xd7\x04\x2e\xa7\xd3\xb2\x4f\xf5\x66\x32\x6e\xf4\x93\x84\x45\x86\x3e\xbf\x73\xa3\x30\xf5\xac\x8a\x9f\x56\xf1\x23\x2f\xda\x25\x0b\x7f\x3d\x51\x11\x92\x7f\x9a\x2b\x87\x52\x97\xde\x74\x79\xed\x12\x80\xfc\x93\x92\x55\x7e\x00\x2b\x66\x53\x20\x8a\x37\x49\xba\x27\xc6\x66\x5c\xce\x2a\x20\x85\x46\x6a\x7d\x4a\x41\xac\x01\x93\x39\xca\x90\xac\x3f\xbc\x5b\xaf\xaa\xfb\x5c\xd9\x18\xcf\x41\x94\xe5\x0f\x96\x34\x08\xef\xe1\x5a\x77\x98\xd1\xb1\xd8\x90\x14\x82\xd2\xec\x8c\x9b\xec\x09\xaf\xc2\x3f\xfe\x34\xc4\x0f\xae\x3a\x8b\x84\x7b\x8d\xb6\x26\x81\x22\x1a\x4b\xd4\xea\x3f\x92\x4e\x6b\x8e\x13\x5a\xe3\xa5\x8c\xa1\x6d\x81\x7c\xd2\x4b\x83\x01\x27\xd5\xef\x90\xfd\x08\x03\x64\xa2\x7c\x1e\x95\xd9\x4c\x3a\x3a\xae\xb5\x6c\x1a\xf5\x5c\x98\xa8\x62\x84\x78\x6a\x46\xdd\x16\x0d\xda\x66\x97\xc5\x07\x75\x1c\x02\x6c\x4e\x89\xf8\x7f\xff\xf0\x31\x33\x60\x49\x0b\x89\x7f\x2c\x2a\xc1\xd8\x1c\x53\x64\xad\xfa\x37\x1b\x76\x4b\xcc\x19\x7b\x67\x1b\x4d\xcc\xbc\x84\x93\x0b\x28\xe7\x5b\xa6\x30\x80\xc8\x40\x16\xd5\xfe\x1a\x25\xe7\x16\x1e\xc1\x8c\x7e\x22\x00\x28\xa5\x7a\x69\xaa\xd5\xc8\x88\x56\x16\x11\x13\x0c\x81\xf1\x4b\x66\x0c\x8a\x6c\xa8\x48\x70\xb5\x14\x57\x39\xa9\x65\x05\xee\x4c\x7d\x54\x3a\xab\x08\x4f\xbd\xf6\xdf\x00\x00\x00\xff\xff\xac\x45\xab\x08\xc3\x28\x00\x00")

func metadataSqlSchema_infoSqlTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataSqlSchema_infoSqlTmpl,
		"metadata/sql/schema_info.sql.tmpl",
	)
}

func metadataSqlSchema_infoSqlTmpl() (*asset, error) {
	bytes, err := metadataSqlSchema_infoSqlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata/sql/schema_info.sql.tmpl", size: 10435, mode: os.FileMode(420), modTime: time.Unix(1554848907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
	"metadata/sql/schema_info.sql.tmpl": metadataSqlSchema_infoSqlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
	"metadata": &bintree{nil, map[string]*bintree{
		"sql": &bintree{nil, map[string]*bintree{
			"schema_info.sql.tmpl": &bintree{metadataSqlSchema_infoSqlTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

