description: GraphQL query to test different data types of Postgres
url: /v1/graphql
status: 200
response:
  data:
    test_types:
    - c1_smallint: 32767
      c2_integer: 2147483647
      c3_bigint: '9223372036854775807'
      c4_decimal: '123.45'
      c5_numeric: '1.234'
      c6_real: 0.00390625
      c7_double_precision: '16.0001220703125'
      c8_smallserial: 1
      c9_serial: 1
      c10_bigserial: '1'
      c11_varchar_3: 'abc'
      c12_char_4: 'baaz'
      c13_text: 'foo bar baz'
      c14_timestamp: '2004-10-19T10:23:54'
      c15_timestamptz: '2015-10-17T14:42:43+00:00'
      c16_date: '2014-09-14'
      c17_time: '11:09:23'
      c18_time_with_zone: '15:22:23+00'
      c19_interval: '01:03:02'
      c20_boolean: true
      c21_point: '(1,2)'
      c22_line: '{2,3,-1}'
      c23_lseg: '[(4,2),(3,1)]'
      c24_box: '(31,12),(14,11)'
      c25_closed_path: '((0,0),(0,3),(1,0))'
      c26_open_path: '[(0,0),(0,-1),(-3,0)]'
      c27_polygon: '((0,0),(0,6),(2,0))'
      c28_circle: '<(-2,-3),3>'
      c29_cidr: '192.168.100.128/25'
      c30_inet: '198.24.10.0'
      c31_macaddr: '08:00:2b:01:02:03'
      c32_json:
        a: b
        obj:
          c1: c2
        arr: [1,2,3]
        _underscore: 0
        '!@#$%^': special
        translations:
          hello world!: hi
        objs:
          - 你好: Hello!
      c32_json_dollar:
        a: b
        obj:
          c1: c2
        arr: [1,2,3]
        _underscore: 0
        '!@#$%^': special
        translations:
          hello world!: hi
        objs:
          - 你好: Hello!
      c32_json_child_prop: c2
      c32_json_child_prop_no_dot: b
      c32_json_array_item: 1
      c32_json_underscore_prefix: 0
      c32_json_special_chars: special
      c32_json_translations: hi
      c32_json_nested_special_array: Hello!
      c32_json_nested_special_array_double_quote: Hello!
      c32_json_nested_special_array_double_quote_dot: Hello!
      c33_jsonb:
        c: d
        arr: [4,5,6]
        obj:
          e1: e2
        objs:
          - 你好: Hello!
        '!@#$%^': special
        _underscore: 0
        translations:
          hello world!: hi
      c33_jsonb_dollar:
        c: d
        arr: [4,5,6]
        obj:
          e1: e2
        objs:
          - 你好: Hello!
        '!@#$%^': special
        _underscore: 0
        translations:
          hello world!: hi
      c33_jsonb_child_prop: e2
      c33_jsonb_child_prop_no_dot: d
      c33_jsonb_array_item: 6
      c33_jsonb_underscore_prefix: 0
      c33_jsonb_special_chars: special
      c33_jsonb_translations: hi
      c33_jsonb_nested_special_array: Hello!
      c33_jsonb_nested_special_array_double_quote: Hello!
      c33_jsonb_nested_special_array_double_quote_dot: Hello!
      c34_text_array: ["a","b","c"]
      c35_integer_2d_array:
        - [4,5,6]
        - [7,8,9]
      c36_uuid: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
      c37_composite_type_complex:
        r: 1.23
        i: -3.456
      c38_composite_type_inventory:
        name: fuzzy dice
        supplier_id: 42
        price: 1.99
      c39_range_integer: '[123,456)'
      c40_range_bigint: '[1147483647,2147483647)'
      c41_range_numeric: '[1.23,4.56]'
      c42_range_timestamp: '["2010-01-01 14:30:00","2010-01-01 15:30:02")'
      c43_range_timestamptz: '("2011-02-05 12:03:00+00","2012-03-04 16:40:04+00"]'
      c44_xml: '<foo>bar</foo>'
      c45_money: $123.45
query:
  query: |
    query {
      test_types {
        c1_smallint
        c2_integer
        c3_bigint
        c4_decimal
        c5_numeric
        c6_real
        c7_double_precision
        c8_smallserial
        c9_serial
        c10_bigserial
        c11_varchar_3
        c12_char_4
        c13_text
        c14_timestamp
        c15_timestamptz
        c16_date
        c17_time
        c18_time_with_zone
        c19_interval
        c20_boolean
        c21_point
        c22_line
        c23_lseg
        c24_box
        c25_closed_path
        c26_open_path
        c27_polygon
        c28_circle
        c29_cidr
        c30_inet
        c31_macaddr
        c32_json
        c32_json_dollar: c32_json(path: "$")
        c32_json_child_prop: c32_json(path: ".obj.c1")
        c32_json_child_prop_no_dot: c32_json(path: "a")
        c32_json_array_item: c32_json(path: "arr[0]")
        c32_json_underscore_prefix: c32_json(path: "._underscore")
        c32_json_special_chars: c32_json(path: "['!@#$%^']")
        c32_json_translations: c32_json(path: "translations['hello world!']")
        c32_json_nested_special_array: c32_json(path: "objs[0]['你好']")
        c32_json_nested_special_array_double_quote: c32_json(path: "objs[0][\"你好\"]")
        c32_json_nested_special_array_double_quote_dot: c32_json(path: "objs[0].[\"你好\"]")
        c33_jsonb
        c33_jsonb_dollar: c33_jsonb(path: "$")
        c33_jsonb_child_prop: c33_jsonb(path: ".obj.e1")
        c33_jsonb_child_prop_no_dot: c33_jsonb(path: "c")
        c33_jsonb_array_item: c33_jsonb(path: "arr[2]")
        c33_jsonb_underscore_prefix: c33_jsonb(path: "._underscore")
        c33_jsonb_special_chars: c33_jsonb(path: "['!@#$%^']")
        c33_jsonb_translations: c33_jsonb(path: "translations['hello world!']")
        c33_jsonb_nested_special_array: c33_jsonb(path: "objs[0]['你好']")
        c33_jsonb_nested_special_array_double_quote: c33_jsonb(path: "objs[0][\"你好\"]")
        c33_jsonb_nested_special_array_double_quote_dot: c33_jsonb(path: "objs.[0].[\"你好\"]")
        c34_text_array
        c35_integer_2d_array
        c36_uuid
        c37_composite_type_complex
        c38_composite_type_inventory
        c39_range_integer
        c40_range_bigint
        c41_range_numeric
        c42_range_timestamp
        c43_range_timestamptz
        c44_xml
        c45_money
      }
    }
