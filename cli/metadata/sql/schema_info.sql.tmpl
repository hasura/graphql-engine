WITH table_rel_suggestions AS
  (SELECT relationships.table_name,
          relationships.table_schema,
          jsonb_agg(row_to_json(relationships.*):: JSONB - 'table_schema' - 'table_name') AS relationships
   FROM
     (SELECT hdb_fkc.table_schema,
             hdb_fkc.table_name,
             hdb_fkc.column_mapping :: JSONB,
             hdb_fkc.ref_table_table_schema,
             hdb_fkc.ref_table,
             'object' :: text AS rel_type
      FROM hdb_catalog.hdb_foreign_key_constraint AS hdb_fkc
      LEFT OUTER JOIN hdb_catalog.hdb_relationship AS hdb_rel ON hdb_fkc.table_schema = hdb_rel.table_schema
      AND hdb_fkc.table_name = hdb_rel.table_name
      AND hdb_rel.rel_type = 'object'
      AND ((
              (SELECT count(*)
               FROM json_object_keys(hdb_fkc.column_mapping)) = 1
            AND hdb_rel.rel_def = jsonb_build_object('foreign_key_constraint_on',
                                                       (SELECT json_object_keys
                                                        FROM json_object_keys(hdb_fkc.column_mapping)
                                                        LIMIT 1)))
           OR (
                 (SELECT count(*)
                  FROM json_object_keys(hdb_fkc.column_mapping)) > 1
               AND hdb_rel.rel_def #>> '{manual_configuration,remote_table}' = hdb_fkc.ref_table
               AND hdb_rel.rel_def #> '{manual_configuration, column_mapping}' = hdb_fkc.column_mapping::JSONB))
      WHERE hdb_rel.rel_name IS NULL
      GROUP BY hdb_fkc.table_schema,
               hdb_fkc.table_name,
               hdb_fkc.ref_table_table_schema,
               hdb_fkc.ref_table,
               hdb_fkc.column_mapping :: JSONB
      UNION SELECT hdb_fkc.ref_table_table_schema AS table_schema,
                   hdb_fkc.ref_table AS TABLE_NAME,
                   CASE
                       WHEN count(KEY) = 1 THEN json_object_agg(KEY, value):: JSONB
                       ELSE json_object_agg(value, KEY):: JSONB
                   END AS column_mapping,
                   hdb_fkc.table_schema AS ref_table_table_schema,
                   hdb_fkc.table_name AS ref_table,
                   'array' :: text AS rel_type
      FROM hdb_catalog.hdb_foreign_key_constraint AS hdb_fkc
      LEFT OUTER JOIN hdb_catalog.hdb_relationship AS hdb_rel ON hdb_fkc.ref_table_table_schema = hdb_rel.table_schema
      AND hdb_fkc.ref_table = hdb_rel.table_name
      AND hdb_rel.rel_type = 'array'
      AND ((
              (SELECT count(*)
               FROM json_object_keys(hdb_fkc.column_mapping)) = 1
            AND (hdb_rel.rel_def #>> '{foreign_key_constraint_on,table}' = hdb_fkc.table_name
                 OR hdb_rel.rel_def #> '{foreign_key_constraint_on,table}' = jsonb_build_object('name', hdb_fkc.table_name, 'schema', hdb_fkc.table_schema))
            AND hdb_rel.rel_def #>> '{foreign_key_constraint_on,column}' =
              (SELECT json_object_keys
               FROM json_object_keys(hdb_fkc.column_mapping)
               LIMIT 1))
           OR (
                 (SELECT count(*)
                  FROM json_object_keys(hdb_fkc.column_mapping)) > 1
               AND (hdb_rel.rel_def #>> '{manual_configuration,remote_table}' = hdb_fkc.table_name
                    OR hdb_rel.rel_def #> '{manual_configuration,remote_table}' = jsonb_build_object('name', hdb_fkc.table_name, 'schema', hdb_fkc.table_schema)))
           AND hdb_rel.rel_def #> '{manual_configuration, column_mapping}' =
             (SELECT json_object_agg(value, KEY):: JSONB
              FROM json_each_text(hdb_fkc.column_mapping))), json_each_text(column_mapping)
      WHERE hdb_rel.rel_name IS NULL
      GROUP BY hdb_fkc.table_schema,
               hdb_fkc.table_name,
               hdb_fkc.ref_table_table_schema,
               hdb_fkc.ref_table,
               hdb_fkc.column_mapping :: JSONB) AS relationships
   GROUP BY relationships.table_name,
            relationships.table_schema),
     table_rel AS
  (SELECT q.table_schema,
          q.table_name,
          jsonb_agg(row_to_json(q):: JSONB - 'table_schema' - 'table_name') AS relationships,
          array_agg(q.rel_name) AS rel_names
   FROM
     (SELECT hdb_rel.table_schema,
             hdb_rel.table_name,
             hdb_fkc.ref_table_table_schema,
             hdb_fkc.ref_table,
             hdb_rel.rel_name,
             hdb_rel.rel_type,
             hdb_rel.rel_def
      FROM hdb_catalog.hdb_relationship AS hdb_rel
      LEFT OUTER JOIN hdb_catalog.hdb_foreign_key_constraint AS hdb_fkc ON hdb_fkc.table_schema=hdb_rel.table_schema
      AND hdb_fkc.table_name=hdb_rel.table_name
      AND
        (SELECT count(*)
         FROM json_object_keys(hdb_fkc.column_mapping))=1
      AND hdb_rel.rel_def=jsonb_build_object('foreign_key_constraint_on',
                                               (SELECT json_object_keys
                                                FROM json_object_keys(hdb_fkc.column_mapping)
                                                LIMIT 1))
      WHERE hdb_rel.rel_type='object'
        AND hdb_rel.rel_def->>'foreign_key_constraint_on' IS NOT NULL
      GROUP BY hdb_rel.table_schema,
               hdb_rel.table_name,
               hdb_fkc.ref_table_table_schema,
               hdb_fkc.ref_table,
               hdb_rel.rel_def,
               hdb_rel.rel_name
      UNION SELECT hdb_rel.table_schema,
                   hdb_rel.table_name,
                   CASE
                       WHEN hdb_rel.rel_type='object' THEN CASE
                                                               WHEN hdb_rel.rel_def#>>'{manual_configuration,remote_table,schema}' IS NULL THEN 'public'
                                                               ELSE hdb_rel.rel_def#>>'{manual_configuration,remote_table,schema}'
                                                           END
                       ELSE CASE
                                WHEN hdb_rel.rel_def#>>'{foreign_key_constraint_on}' IS NOT NULL THEN CASE
                                                                                                          WHEN hdb_rel.rel_def#>>'{foreign_key_constraint_on,table,schema}' IS NULL THEN 'public'
                                                                                                          ELSE hdb_rel.rel_def#>>'{foreign_key_constraint_on,table,schema}'
                                                                                                      END
                                ELSE CASE
                                         WHEN hdb_rel.rel_def#>>'{manual_configuration,remote_table,schema}' IS NULL THEN 'public'
                                         ELSE hdb_rel.rel_def#>>'{manual_configuration,remote_table,schema}'
                                     END
                            END
                   END AS ref_table_table_schema,
                   CASE
                       WHEN hdb_rel.rel_type='object' THEN CASE
                                                               WHEN hdb_rel.rel_def#>>'{manual_configuration,remote_table,name}' IS NULL THEN hdb_rel.rel_def#>>'{manual_configuration,remote_table}'
                                                               ELSE hdb_rel.rel_def#>>'{manual_configuration,remote_table,name}'
                                                           END
                       ELSE CASE
                                WHEN hdb_rel.rel_def#>>'{foreign_key_constraint_on}' IS NOT NULL THEN CASE
                                                                                                          WHEN hdb_rel.rel_def#>>'{foreign_key_constraint_on,table,name}' IS NULL THEN hdb_rel.rel_def#>>'{foreign_key_constraint_on,table}'
                                                                                                          ELSE hdb_rel.rel_def#>>'{foreign_key_constraint_on,table,name}'
                                                                                                      END
                                ELSE CASE
                                         WHEN hdb_rel.rel_def#>>'{manual_configuration,remote_table,name}' IS NULL THEN hdb_rel.rel_def#>>'{manual_configuration,remote_table}'
                                         ELSE hdb_rel.rel_def#>>'{manual_configuration,remote_table,name}'
                                     END
                            END
                   END AS ref_table,
                   hdb_rel.rel_name,
                   hdb_rel.rel_type,
                   hdb_rel.rel_def
      FROM hdb_catalog.hdb_relationship AS hdb_rel
      WHERE (hdb_rel.rel_type='object'
             AND hdb_rel.rel_def->>'foreign_key_constraint_on' IS NULL)
        OR (hdb_rel.rel_type='array')) AS Q
   GROUP BY q.table_schema,
            q.table_name),
     table_columns AS
  (SELECT table_schema,
          TABLE_NAME,
          array_agg(COLUMN_NAME :: text) AS columns
   FROM information_schema.columns
   GROUP BY table_schema,
            TABLE_NAME)
SELECT ist.table_name,
       hdbt.table_name IS NOT NULL AS is_table_tracked,
                                      CASE
                                          WHEN trs.relationships IS NULL THEN '[]' :: JSONB
                                          ELSE trs.relationships
                                      END AS relationship_suggestions,
                                      CASE
                                          WHEN tr.relationships IS NULL THEN '[]' :: JSONB
                                          ELSE tr.relationships
                                      END AS relationships,
                                      to_json(array_remove(array_cat(tc.columns, tr.rel_names), NULL)) AS columns
FROM information_schema.tables AS ist
LEFT OUTER JOIN hdb_catalog.hdb_table AS hdbt ON hdbt.table_name = ist.table_name
AND hdbt.table_schema = ist.table_schema
LEFT OUTER JOIN table_rel_suggestions AS trs ON trs.table_schema = ist.table_schema
AND trs.table_name = ist.table_name
LEFT OUTER JOIN table_columns AS tc ON tc.table_schema = ist.table_schema
AND tc.table_name = ist.table_name
LEFT OUTER JOIN table_rel AS tr ON tr.table_schema = ist.table_schema
AND tr.table_name = ist.table_name
WHERE ist.table_schema = '%s'
GROUP BY ist.table_name,
         hdbt.table_name,
         trs.relationships,
         tr.relationships,
         tc.columns,
         tr.rel_names