---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/type_permissions/v2/role_based/metadata.json
---
(
    Metadata {
        object_types: {
            Qualified {
                subgraph: SubgraphName(
                    "subgraphs",
                ),
                name: CustomTypeName(
                    Identifier(
                        "Album",
                    ),
                ),
            }: ObjectTypeWithRelationships {
                object_type: ObjectTypeRepresentation {
                    fields: {
                        FieldName(
                            Identifier(
                                "AlbumId",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        Int,
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "ArtistId",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        Int,
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "Title",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                    },
                    global_id_fields: [],
                    apollo_federation_config: None,
                    graphql_output_type_name: Some(
                        TypeName(
                            Name(
                                "Album",
                            ),
                        ),
                    ),
                    graphql_input_type_name: Some(
                        TypeName(
                            Name(
                                "Album_input",
                            ),
                        ),
                    ),
                    description: None,
                },
                type_output_permissions: TypeOutputPermissions {
                    authorization_rules: [
                        AllowFields {
                            fields: [
                                FieldName(
                                    Identifier(
                                        "AlbumId",
                                    ),
                                ),
                                FieldName(
                                    Identifier(
                                        "ArtistId",
                                    ),
                                ),
                                FieldName(
                                    Identifier(
                                        "Title",
                                    ),
                                ),
                            ],
                            condition: Some(
                                ConditionHash(
                                    5261800314210927403,
                                ),
                            ),
                        },
                    ],
                    by_role: {
                        Role(
                            "user",
                        ): TypeOutputPermission {
                            allowed_fields: {
                                FieldName(
                                    Identifier(
                                        "AlbumId",
                                    ),
                                ),
                                FieldName(
                                    Identifier(
                                        "ArtistId",
                                    ),
                                ),
                                FieldName(
                                    Identifier(
                                        "Title",
                                    ),
                                ),
                            },
                        },
                    },
                    uses_rules_based_auth: false,
                },
                type_input_permissions: TypeInputPermissions {
                    authorization_rules: [],
                    by_role: {},
                    uses_rules_based_auth: false,
                },
                relationship_fields: {},
                type_mappings: DataConnectorTypeMappingsForObject {
                    mappings: {},
                },
            },
        },
        scalar_types: {},
        models: {},
        commands: {},
        boolean_expression_types: BooleanExpressionTypes {
            objects: {},
            scalars: {},
            object_aggregates: {},
            scalar_aggregates: {},
        },
        order_by_expressions: OrderByExpressions {
            objects: {},
            scalars: {},
        },
        aggregate_expressions: {},
        graphql_config: GlobalGraphqlConfig {
            query_root_type_name: TypeName(
                Name(
                    "Query",
                ),
            ),
            mutation_root_type_name: TypeName(
                Name(
                    "Mutation",
                ),
            ),
            subscription_root_type_name: None,
            order_by_input: Some(
                OrderByInputGraphqlConfig {
                    asc_direction_field_value: Name(
                        "Asc",
                    ),
                    desc_direction_field_value: Name(
                        "Desc",
                    ),
                    enum_type_name: TypeName(
                        Name(
                            "order_by",
                        ),
                    ),
                },
            ),
            enable_apollo_federation_fields: false,
            bypass_relation_comparisons_ndc_capability: false,
            propagate_boolean_expression_deprecation_status: false,
            multiple_order_by_input_object_fields: Allow,
        },
        plugin_configs: LifecyclePluginConfigs {
            pre_parse_plugins: [],
            pre_response_plugins: ResolvedLifecyclePreResponsePluginHooks {
                sync_hooks: [],
                async_hooks: [],
            },
            pre_route_plugins: [],
            pre_ndc_request_plugins: {},
            pre_ndc_response_plugins: {},
        },
        roles: {
            Role(
                "user",
            ),
        },
        conditions: Conditions {
            conditions: {
                ConditionHash(
                    5261800314210927403,
                ): BinaryOperation {
                    op: Equals,
                    left: SessionVariable(
                        SessionVariableReference {
                            name: SessionVariableName(
                                "x-hasura-role",
                            ),
                            passed_as_json: false,
                            disallow_unknown_fields: false,
                        },
                    ),
                    right: Literal(
                        String("user"),
                    ),
                },
            },
        },
        runtime_flags: RuntimeFlags(
            {},
        ),
    },
    [],
)
