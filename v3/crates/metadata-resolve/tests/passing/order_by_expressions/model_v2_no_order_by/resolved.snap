---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/order_by_expressions/model_v2_no_order_by/metadata.json
---
(
    Metadata {
        object_types: {
            Qualified {
                subgraph: SubgraphName(
                    "default",
                ),
                name: CustomTypeName(
                    Identifier(
                        "RowType",
                    ),
                ),
            }: ObjectTypeWithRelationships {
                object_type: ObjectTypeRepresentation {
                    fields: {
                        FieldName(
                            Identifier(
                                "test",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                    },
                    global_id_fields: [],
                    apollo_federation_config: None,
                    graphql_output_type_name: None,
                    graphql_input_type_name: None,
                    description: None,
                },
                type_output_permissions: {},
                type_input_permissions: {},
                relationship_fields: {},
                type_mappings: DataConnectorTypeMappingsForObject {
                    mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "default",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "myconnector",
                                ),
                            ),
                        }: {
                            DataConnectorObjectType(
                                "row_type",
                            ): Object {
                                ndc_object_type_name: DataConnectorObjectType(
                                    "row_type",
                                ),
                                field_mappings: {
                                    FieldName(
                                        Identifier(
                                            "test",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "test",
                                        ),
                                        column_type: Named {
                                            name: TypeName(
                                                "String",
                                            ),
                                        },
                                        column_type_representation: Some(
                                            String,
                                        ),
                                        comparison_operators: Some(
                                            ComparisonOperators {
                                                eq_operator: None,
                                                in_operator: None,
                                                lt_operator: None,
                                                lte_operator: None,
                                                gt_operator: None,
                                                gte_operator: None,
                                                contains_operator: None,
                                                icontains_operator: None,
                                                starts_with_operator: None,
                                                istarts_with_operator: None,
                                                ends_with_operator: None,
                                                iends_with_operator: None,
                                                other_operators: [],
                                            },
                                        ),
                                        aggregate_functions: Some(
                                            AggregateFunctions {
                                                sum_function: None,
                                                min_function: None,
                                                max_function: None,
                                                avg_function: None,
                                                other_functions: [],
                                            },
                                        ),
                                        extraction_functions: Some(
                                            ExtractionFunctions {
                                                year_function: None,
                                                month_function: None,
                                                day_function: None,
                                                nanosecond_function: None,
                                                microsecond_function: None,
                                                millisecond_function: None,
                                                second_function: None,
                                                minute_function: None,
                                                hour_function: None,
                                                week_function: None,
                                                quarter_function: None,
                                                day_of_week_function: None,
                                                day_of_year_function: None,
                                                other_functions: [],
                                            },
                                        ),
                                        argument_mappings: {},
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },
        scalar_types: {},
        models: {
            Qualified {
                subgraph: SubgraphName(
                    "default",
                ),
                name: ModelName(
                    Identifier(
                        "mymodel",
                    ),
                ),
            }: ModelWithPermissions {
                model: Model {
                    path: JSONPath(
                        [
                            Key(
                                "subgraphs",
                            ),
                            Index(
                                0,
                            ),
                            Key(
                                "objects",
                            ),
                            Index(
                                1,
                            ),
                        ],
                    ),
                    name: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: ModelName(
                            Identifier(
                                "mymodel",
                            ),
                        ),
                    },
                    data_type: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "RowType",
                            ),
                        ),
                    },
                    data_type_path: JSONPath(
                        [
                            Key(
                                "subgraphs",
                            ),
                            Index(
                                0,
                            ),
                            Key(
                                "objects",
                            ),
                            Index(
                                1,
                            ),
                            Key(
                                "definition",
                            ),
                            Key(
                                "objectType",
                            ),
                        ],
                    ),
                    type_fields: {
                        FieldName(
                            Identifier(
                                "test",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                    },
                    global_id_fields: [],
                    arguments: {},
                    source: Some(
                        ModelSource {
                            data_connector: DataConnectorLink {
                                name: Qualified {
                                    subgraph: SubgraphName(
                                        "default",
                                    ),
                                    name: DataConnectorName(
                                        Identifier(
                                            "myconnector",
                                        ),
                                    ),
                                },
                                url: ReadWriteUrls(
                                    ResolvedReadWriteUrls {
                                        read: SerializableUrl(
                                            Url {
                                                scheme: "http",
                                                cannot_be_a_base: false,
                                                username: "",
                                                password: None,
                                                host: Some(
                                                    Domain(
                                                        "local-dev.hasura.me",
                                                    ),
                                                ),
                                                port: Some(
                                                    8080,
                                                ),
                                                path: "/",
                                                query: None,
                                                fragment: None,
                                            },
                                        ),
                                        write: SerializableUrl(
                                            Url {
                                                scheme: "http",
                                                cannot_be_a_base: false,
                                                username: "",
                                                password: None,
                                                host: Some(
                                                    Domain(
                                                        "local-dev.hasura.me",
                                                    ),
                                                ),
                                                port: Some(
                                                    8080,
                                                ),
                                                path: "/",
                                                query: None,
                                                fragment: None,
                                            },
                                        ),
                                    },
                                ),
                                headers: SerializableHeaderMap(
                                    {},
                                ),
                                response_config: None,
                                capabilities: DataConnectorCapabilities {
                                    supported_ndc_version: V01,
                                    supports_explaining_queries: true,
                                    supports_explaining_mutations: true,
                                    supports_nested_object_filtering: false,
                                    supports_nested_object_ordering: false,
                                    supports_nested_object_array_filtering: false,
                                    supports_nested_scalar_array_filtering: false,
                                    supports_aggregates: Some(
                                        DataConnectorAggregateCapabilities {
                                            supports_nested_object_aggregations: false,
                                            aggregate_count_scalar_type: None,
                                            supports_grouping: None,
                                        },
                                    ),
                                    supports_query_variables: true,
                                    supports_relationships: Some(
                                        DataConnectorRelationshipCapabilities {
                                            supports_relation_comparisons: true,
                                            supports_nested_relationships: Some(
                                                DataConnectorNestedRelationshipCapabilities {
                                                    supports_nested_array_selection: true,
                                                    supports_nested_in_filtering: false,
                                                    supports_nested_in_ordering: false,
                                                },
                                            ),
                                        },
                                    ),
                                    supports_relational_queries: None,
                                },
                            },
                            collection: CollectionName(
                                "mycollection",
                            ),
                            collection_type: DataConnectorObjectType(
                                "row_type",
                            ),
                            type_mappings: {
                                Qualified {
                                    subgraph: SubgraphName(
                                        "default",
                                    ),
                                    name: CustomTypeName(
                                        Identifier(
                                            "RowType",
                                        ),
                                    ),
                                }: Object {
                                    ndc_object_type_name: DataConnectorObjectType(
                                        "row_type",
                                    ),
                                    field_mappings: {
                                        FieldName(
                                            Identifier(
                                                "test",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "test",
                                            ),
                                            column_type: Named {
                                                name: TypeName(
                                                    "String",
                                                ),
                                            },
                                            column_type_representation: Some(
                                                String,
                                            ),
                                            comparison_operators: Some(
                                                ComparisonOperators {
                                                    eq_operator: None,
                                                    in_operator: None,
                                                    lt_operator: None,
                                                    lte_operator: None,
                                                    gt_operator: None,
                                                    gte_operator: None,
                                                    contains_operator: None,
                                                    icontains_operator: None,
                                                    starts_with_operator: None,
                                                    istarts_with_operator: None,
                                                    ends_with_operator: None,
                                                    iends_with_operator: None,
                                                    other_operators: [],
                                                },
                                            ),
                                            aggregate_functions: Some(
                                                AggregateFunctions {
                                                    sum_function: None,
                                                    min_function: None,
                                                    max_function: None,
                                                    avg_function: None,
                                                    other_functions: [],
                                                },
                                            ),
                                            extraction_functions: Some(
                                                ExtractionFunctions {
                                                    year_function: None,
                                                    month_function: None,
                                                    day_function: None,
                                                    nanosecond_function: None,
                                                    microsecond_function: None,
                                                    millisecond_function: None,
                                                    second_function: None,
                                                    minute_function: None,
                                                    hour_function: None,
                                                    week_function: None,
                                                    quarter_function: None,
                                                    day_of_week_function: None,
                                                    day_of_year_function: None,
                                                    other_functions: [],
                                                },
                                            ),
                                            argument_mappings: {},
                                        },
                                    },
                                },
                            },
                            argument_mappings: {},
                            data_connector_link_argument_presets: {},
                            source_arguments: {},
                        },
                    ),
                    global_id_source: None,
                    apollo_federation_key_source: None,
                    aggregate_expression: None,
                    raw: ModelRaw {
                        filter_expression_type: None,
                        graphql: Some(
                            ModelGraphQlDefinitionV2 {
                                select_uniques: [],
                                select_many: Some(
                                    SelectManyGraphQlDefinition {
                                        query_root_field: GraphQlFieldName(
                                            "mycollection",
                                        ),
                                        description: None,
                                        deprecated: None,
                                        subscription: None,
                                    },
                                ),
                                arguments_input_type: None,
                                apollo_federation: None,
                                filter_input_type_name: None,
                                aggregate: None,
                            },
                        ),
                        description: None,
                        order_by: ModelV2(
                            None,
                        ),
                    },
                },
                select_permissions: {},
                filter_expression_type: None,
                graphql_api: ModelGraphQlApi {
                    arguments_input_config: None,
                    select_uniques: [],
                    select_many: Some(
                        SelectManyGraphQlDefinition {
                            query_root_field: Name(
                                "mycollection",
                            ),
                            description: None,
                            deprecated: None,
                            subscription: None,
                        },
                    ),
                    select_aggregate: None,
                    order_by_expression: None,
                    limit_field: Some(
                        LimitFieldGraphqlConfig {
                            field_name: Name(
                                "limit",
                            ),
                        },
                    ),
                    offset_field: Some(
                        OffsetFieldGraphqlConfig {
                            field_name: Name(
                                "offset",
                            ),
                        },
                    ),
                    filter_input_type_name: None,
                },
            },
        },
        commands: {},
        boolean_expression_types: BooleanExpressionTypes {
            objects: {},
            scalars: {},
            object_aggregates: {},
            scalar_aggregates: {},
        },
        order_by_expressions: OrderByExpressions {
            objects: {},
            scalars: {},
        },
        aggregate_expressions: {},
        graphql_config: GlobalGraphqlConfig {
            query_root_type_name: TypeName(
                Name(
                    "Query",
                ),
            ),
            mutation_root_type_name: TypeName(
                Name(
                    "Mutation",
                ),
            ),
            subscription_root_type_name: None,
            order_by_input: Some(
                OrderByInputGraphqlConfig {
                    asc_direction_field_value: Name(
                        "Asc",
                    ),
                    desc_direction_field_value: Name(
                        "Desc",
                    ),
                    enum_type_name: TypeName(
                        Name(
                            "order_by",
                        ),
                    ),
                },
            ),
            enable_apollo_federation_fields: false,
            bypass_relation_comparisons_ndc_capability: false,
            propagate_boolean_expression_deprecation_status: false,
            multiple_order_by_input_object_fields: Allow,
        },
        plugin_configs: LifecyclePluginConfigs {
            pre_parse_plugins: [],
            pre_response_plugins: [],
            pre_route_plugins: [],
        },
        roles: {},
        runtime_flags: RuntimeFlags(
            {},
        ),
    },
    [],
)
