---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/boolean_expression_type/nested_recursive_object/metadata.json
---
(
    Metadata {
        object_types: {
            Qualified {
                subgraph: SubgraphName(
                    "app",
                ),
                name: CustomTypeName(
                    Identifier(
                        "Folder",
                    ),
                ),
            }: ObjectTypeWithRelationships {
                object_type: ObjectTypeRepresentation {
                    fields: {
                        FieldName(
                            Identifier(
                                "id",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Custom(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "ObjectId",
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "children",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: List(
                                    QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Folder",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "createdAt",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Custom(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "Date",
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "name",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "path",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "type",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                    },
                    global_id_fields: [],
                    apollo_federation_config: None,
                    graphql_output_type_name: Some(
                        TypeName(
                            Name(
                                "Folder",
                            ),
                        ),
                    ),
                    graphql_input_type_name: Some(
                        TypeName(
                            Name(
                                "FolderInput",
                            ),
                        ),
                    ),
                    description: None,
                },
                type_output_permissions: {
                    Role(
                        "admin",
                    ): TypeOutputPermission {
                        allowed_fields: {
                            FieldName(
                                Identifier(
                                    "id",
                                ),
                            ),
                            FieldName(
                                Identifier(
                                    "children",
                                ),
                            ),
                            FieldName(
                                Identifier(
                                    "createdAt",
                                ),
                            ),
                            FieldName(
                                Identifier(
                                    "name",
                                ),
                            ),
                            FieldName(
                                Identifier(
                                    "path",
                                ),
                            ),
                            FieldName(
                                Identifier(
                                    "type",
                                ),
                            ),
                        },
                    },
                },
                type_input_permissions: {},
                relationship_fields: {},
                type_mappings: DataConnectorTypeMappingsForObject {
                    mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                        }: {
                            DataConnectorObjectType(
                                "Folder",
                            ): Object {
                                ndc_object_type_name: DataConnectorObjectType(
                                    "Folder",
                                ),
                                field_mappings: {
                                    FieldName(
                                        Identifier(
                                            "children",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "children",
                                        ),
                                        column_type: Nullable {
                                            underlying_type: Array {
                                                element_type: Named {
                                                    name: TypeName(
                                                        "Folder",
                                                    ),
                                                },
                                            },
                                        },
                                        column_type_representation: None,
                                        comparison_operators: None,
                                        aggregate_functions: None,
                                        extraction_functions: None,
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "createdAt",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "created_at",
                                        ),
                                        column_type: Nullable {
                                            underlying_type: Named {
                                                name: TypeName(
                                                    "Date",
                                                ),
                                            },
                                        },
                                        column_type_representation: Some(
                                            Timestamp,
                                        ),
                                        comparison_operators: Some(
                                            ComparisonOperators {
                                                eq_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_eq",
                                                    ),
                                                ),
                                                in_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_in",
                                                    ),
                                                ),
                                                lt_operator: None,
                                                lte_operator: None,
                                                gt_operator: None,
                                                gte_operator: None,
                                                contains_operator: None,
                                                icontains_operator: None,
                                                starts_with_operator: None,
                                                istarts_with_operator: None,
                                                ends_with_operator: None,
                                                iends_with_operator: None,
                                                other_operators: [
                                                    DataConnectorOperatorName(
                                                        "_gt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_gte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_neq",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_nin",
                                                    ),
                                                ],
                                            },
                                        ),
                                        aggregate_functions: Some(
                                            AggregateFunctions {
                                                sum_function: None,
                                                min_function: None,
                                                max_function: None,
                                                avg_function: None,
                                                other_functions: [
                                                    DataConnectorAggregationFunctionName(
                                                        "count",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "max",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "min",
                                                    ),
                                                ],
                                            },
                                        ),
                                        extraction_functions: Some(
                                            ExtractionFunctions {
                                                year_function: None,
                                                month_function: None,
                                                day_function: None,
                                                nanosecond_function: None,
                                                microsecond_function: None,
                                                millisecond_function: None,
                                                second_function: None,
                                                minute_function: None,
                                                hour_function: None,
                                                week_function: None,
                                                quarter_function: None,
                                                day_of_week_function: None,
                                                day_of_year_function: None,
                                                other_functions: [],
                                            },
                                        ),
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "id",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "_id",
                                        ),
                                        column_type: Named {
                                            name: TypeName(
                                                "ObjectId",
                                            ),
                                        },
                                        column_type_representation: Some(
                                            String,
                                        ),
                                        comparison_operators: Some(
                                            ComparisonOperators {
                                                eq_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_eq",
                                                    ),
                                                ),
                                                in_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_in",
                                                    ),
                                                ),
                                                lt_operator: None,
                                                lte_operator: None,
                                                gt_operator: None,
                                                gte_operator: None,
                                                contains_operator: None,
                                                icontains_operator: None,
                                                starts_with_operator: None,
                                                istarts_with_operator: None,
                                                ends_with_operator: None,
                                                iends_with_operator: None,
                                                other_operators: [
                                                    DataConnectorOperatorName(
                                                        "_neq",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_nin",
                                                    ),
                                                ],
                                            },
                                        ),
                                        aggregate_functions: Some(
                                            AggregateFunctions {
                                                sum_function: None,
                                                min_function: None,
                                                max_function: None,
                                                avg_function: None,
                                                other_functions: [
                                                    DataConnectorAggregationFunctionName(
                                                        "count",
                                                    ),
                                                ],
                                            },
                                        ),
                                        extraction_functions: Some(
                                            ExtractionFunctions {
                                                year_function: None,
                                                month_function: None,
                                                day_function: None,
                                                nanosecond_function: None,
                                                microsecond_function: None,
                                                millisecond_function: None,
                                                second_function: None,
                                                minute_function: None,
                                                hour_function: None,
                                                week_function: None,
                                                quarter_function: None,
                                                day_of_week_function: None,
                                                day_of_year_function: None,
                                                other_functions: [],
                                            },
                                        ),
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "name",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "name",
                                        ),
                                        column_type: Nullable {
                                            underlying_type: Named {
                                                name: TypeName(
                                                    "String",
                                                ),
                                            },
                                        },
                                        column_type_representation: Some(
                                            String,
                                        ),
                                        comparison_operators: Some(
                                            ComparisonOperators {
                                                eq_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_eq",
                                                    ),
                                                ),
                                                in_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_in",
                                                    ),
                                                ),
                                                lt_operator: None,
                                                lte_operator: None,
                                                gt_operator: None,
                                                gte_operator: None,
                                                contains_operator: None,
                                                icontains_operator: None,
                                                starts_with_operator: None,
                                                istarts_with_operator: None,
                                                ends_with_operator: None,
                                                iends_with_operator: None,
                                                other_operators: [
                                                    DataConnectorOperatorName(
                                                        "_gt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_gte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_iregex",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_neq",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_nin",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_regex",
                                                    ),
                                                ],
                                            },
                                        ),
                                        aggregate_functions: Some(
                                            AggregateFunctions {
                                                sum_function: None,
                                                min_function: None,
                                                max_function: None,
                                                avg_function: None,
                                                other_functions: [
                                                    DataConnectorAggregationFunctionName(
                                                        "count",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "max",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "min",
                                                    ),
                                                ],
                                            },
                                        ),
                                        extraction_functions: Some(
                                            ExtractionFunctions {
                                                year_function: None,
                                                month_function: None,
                                                day_function: None,
                                                nanosecond_function: None,
                                                microsecond_function: None,
                                                millisecond_function: None,
                                                second_function: None,
                                                minute_function: None,
                                                hour_function: None,
                                                week_function: None,
                                                quarter_function: None,
                                                day_of_week_function: None,
                                                day_of_year_function: None,
                                                other_functions: [],
                                            },
                                        ),
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "path",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "path",
                                        ),
                                        column_type: Nullable {
                                            underlying_type: Named {
                                                name: TypeName(
                                                    "String",
                                                ),
                                            },
                                        },
                                        column_type_representation: Some(
                                            String,
                                        ),
                                        comparison_operators: Some(
                                            ComparisonOperators {
                                                eq_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_eq",
                                                    ),
                                                ),
                                                in_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_in",
                                                    ),
                                                ),
                                                lt_operator: None,
                                                lte_operator: None,
                                                gt_operator: None,
                                                gte_operator: None,
                                                contains_operator: None,
                                                icontains_operator: None,
                                                starts_with_operator: None,
                                                istarts_with_operator: None,
                                                ends_with_operator: None,
                                                iends_with_operator: None,
                                                other_operators: [
                                                    DataConnectorOperatorName(
                                                        "_gt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_gte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_iregex",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_neq",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_nin",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_regex",
                                                    ),
                                                ],
                                            },
                                        ),
                                        aggregate_functions: Some(
                                            AggregateFunctions {
                                                sum_function: None,
                                                min_function: None,
                                                max_function: None,
                                                avg_function: None,
                                                other_functions: [
                                                    DataConnectorAggregationFunctionName(
                                                        "count",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "max",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "min",
                                                    ),
                                                ],
                                            },
                                        ),
                                        extraction_functions: Some(
                                            ExtractionFunctions {
                                                year_function: None,
                                                month_function: None,
                                                day_function: None,
                                                nanosecond_function: None,
                                                microsecond_function: None,
                                                millisecond_function: None,
                                                second_function: None,
                                                minute_function: None,
                                                hour_function: None,
                                                week_function: None,
                                                quarter_function: None,
                                                day_of_week_function: None,
                                                day_of_year_function: None,
                                                other_functions: [],
                                            },
                                        ),
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "type",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "type",
                                        ),
                                        column_type: Nullable {
                                            underlying_type: Named {
                                                name: TypeName(
                                                    "String",
                                                ),
                                            },
                                        },
                                        column_type_representation: Some(
                                            String,
                                        ),
                                        comparison_operators: Some(
                                            ComparisonOperators {
                                                eq_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_eq",
                                                    ),
                                                ),
                                                in_operator: Some(
                                                    DataConnectorOperatorName(
                                                        "_in",
                                                    ),
                                                ),
                                                lt_operator: None,
                                                lte_operator: None,
                                                gt_operator: None,
                                                gte_operator: None,
                                                contains_operator: None,
                                                icontains_operator: None,
                                                starts_with_operator: None,
                                                istarts_with_operator: None,
                                                ends_with_operator: None,
                                                iends_with_operator: None,
                                                other_operators: [
                                                    DataConnectorOperatorName(
                                                        "_gt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_gte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_iregex",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lt",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_lte",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_neq",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_nin",
                                                    ),
                                                    DataConnectorOperatorName(
                                                        "_regex",
                                                    ),
                                                ],
                                            },
                                        ),
                                        aggregate_functions: Some(
                                            AggregateFunctions {
                                                sum_function: None,
                                                min_function: None,
                                                max_function: None,
                                                avg_function: None,
                                                other_functions: [
                                                    DataConnectorAggregationFunctionName(
                                                        "count",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "max",
                                                    ),
                                                    DataConnectorAggregationFunctionName(
                                                        "min",
                                                    ),
                                                ],
                                            },
                                        ),
                                        extraction_functions: Some(
                                            ExtractionFunctions {
                                                year_function: None,
                                                month_function: None,
                                                day_function: None,
                                                nanosecond_function: None,
                                                microsecond_function: None,
                                                millisecond_function: None,
                                                second_function: None,
                                                minute_function: None,
                                                hour_function: None,
                                                week_function: None,
                                                quarter_function: None,
                                                day_of_week_function: None,
                                                day_of_year_function: None,
                                                other_functions: [],
                                            },
                                        ),
                                        argument_mappings: {},
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },
        scalar_types: {
            Qualified {
                subgraph: SubgraphName(
                    "app",
                ),
                name: CustomTypeName(
                    Identifier(
                        "Bool",
                    ),
                ),
            }: ScalarTypeRepresentation {
                graphql_type_name: Some(
                    TypeName(
                        Name(
                            "Bool",
                        ),
                    ),
                ),
                description: None,
                representations: {
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: DataConnectorName(
                            Identifier(
                                "mongo",
                            ),
                        ),
                    }: Boolean,
                },
            },
            Qualified {
                subgraph: SubgraphName(
                    "app",
                ),
                name: CustomTypeName(
                    Identifier(
                        "Date",
                    ),
                ),
            }: ScalarTypeRepresentation {
                graphql_type_name: Some(
                    TypeName(
                        Name(
                            "Date",
                        ),
                    ),
                ),
                description: None,
                representations: {
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: DataConnectorName(
                            Identifier(
                                "mongo",
                            ),
                        ),
                    }: Timestamp,
                },
            },
            Qualified {
                subgraph: SubgraphName(
                    "app",
                ),
                name: CustomTypeName(
                    Identifier(
                        "ObjectId",
                    ),
                ),
            }: ScalarTypeRepresentation {
                graphql_type_name: Some(
                    TypeName(
                        Name(
                            "ObjectId",
                        ),
                    ),
                ),
                description: None,
                representations: {
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: DataConnectorName(
                            Identifier(
                                "mongo",
                            ),
                        ),
                    }: String,
                },
            },
        },
        models: {
            Qualified {
                subgraph: SubgraphName(
                    "app",
                ),
                name: ModelName(
                    Identifier(
                        "GetFolderTree",
                    ),
                ),
            }: ModelWithPermissions {
                model: Model {
                    path: JSONPath(
                        [
                            Key(
                                "subgraphs",
                            ),
                            Index(
                                0,
                            ),
                            Key(
                                "objects",
                            ),
                            Index(
                                3,
                            ),
                        ],
                    ),
                    name: Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: ModelName(
                            Identifier(
                                "GetFolderTree",
                            ),
                        ),
                    },
                    data_type: Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "Folder",
                            ),
                        ),
                    },
                    data_type_path: JSONPath(
                        [
                            Key(
                                "subgraphs",
                            ),
                            Index(
                                0,
                            ),
                            Key(
                                "objects",
                            ),
                            Index(
                                3,
                            ),
                            Key(
                                "definition",
                            ),
                            Key(
                                "objectType",
                            ),
                        ],
                    ),
                    type_fields: {
                        FieldName(
                            Identifier(
                                "id",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Custom(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "ObjectId",
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "children",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: List(
                                    QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Folder",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "createdAt",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Custom(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "Date",
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "name",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "path",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                        FieldName(
                            Identifier(
                                "type",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                    },
                    global_id_fields: [],
                    arguments: {
                        ArgumentName(
                            Identifier(
                                "folderId",
                            ),
                        ): ArgumentInfo {
                            argument_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Custom(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "ObjectId",
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            argument_kind: Other,
                            path: JSONPath(
                                [
                                    Key(
                                        "subgraphs",
                                    ),
                                    Index(
                                        0,
                                    ),
                                    Key(
                                        "objects",
                                    ),
                                    Index(
                                        3,
                                    ),
                                    Key(
                                        "definition",
                                    ),
                                    Key(
                                        "arguments",
                                    ),
                                    Index(
                                        0,
                                    ),
                                    Key(
                                        "name",
                                    ),
                                ],
                            ),
                        },
                    },
                    source: Some(
                        ModelSource {
                            data_connector: DataConnectorLink {
                                name: Qualified {
                                    subgraph: SubgraphName(
                                        "app",
                                    ),
                                    name: DataConnectorName(
                                        Identifier(
                                            "mongo",
                                        ),
                                    ),
                                },
                                url: ReadWriteUrls(
                                    ResolvedReadWriteUrls {
                                        read: SerializableUrl(
                                            Url {
                                                scheme: "http",
                                                cannot_be_a_base: false,
                                                username: "",
                                                password: None,
                                                host: Some(
                                                    Domain(
                                                        "local.hasura.dev",
                                                    ),
                                                ),
                                                port: Some(
                                                    4688,
                                                ),
                                                path: "/",
                                                query: None,
                                                fragment: None,
                                            },
                                        ),
                                        write: SerializableUrl(
                                            Url {
                                                scheme: "http",
                                                cannot_be_a_base: false,
                                                username: "",
                                                password: None,
                                                host: Some(
                                                    Domain(
                                                        "local.hasura.dev",
                                                    ),
                                                ),
                                                port: Some(
                                                    4688,
                                                ),
                                                path: "/",
                                                query: None,
                                                fragment: None,
                                            },
                                        ),
                                    },
                                ),
                                headers: SerializableHeaderMap(
                                    {
                                        "authorization": "Bearer RandomTokenValue",
                                    },
                                ),
                                response_config: None,
                                capabilities: DataConnectorCapabilities {
                                    supported_ndc_version: V01,
                                    supports_explaining_queries: true,
                                    supports_explaining_mutations: false,
                                    supports_nested_object_filtering: true,
                                    supports_nested_object_ordering: true,
                                    supports_nested_object_array_filtering: true,
                                    supports_nested_scalar_array_filtering: false,
                                    supports_aggregates: Some(
                                        DataConnectorAggregateCapabilities {
                                            supports_nested_object_aggregations: true,
                                            aggregate_count_scalar_type: None,
                                            supports_grouping: None,
                                        },
                                    ),
                                    supports_query_variables: true,
                                    supports_relationships: Some(
                                        DataConnectorRelationshipCapabilities {
                                            supports_relation_comparisons: true,
                                            supports_nested_relationships: Some(
                                                DataConnectorNestedRelationshipCapabilities {
                                                    supports_nested_array_selection: true,
                                                    supports_nested_in_filtering: false,
                                                    supports_nested_in_ordering: false,
                                                },
                                            ),
                                        },
                                    ),
                                    supports_relational_queries: None,
                                },
                            },
                            collection: CollectionName(
                                "getFolderTree",
                            ),
                            collection_type: DataConnectorObjectType(
                                "Folder",
                            ),
                            type_mappings: {
                                Qualified {
                                    subgraph: SubgraphName(
                                        "app",
                                    ),
                                    name: CustomTypeName(
                                        Identifier(
                                            "Folder",
                                        ),
                                    ),
                                }: Object {
                                    ndc_object_type_name: DataConnectorObjectType(
                                        "Folder",
                                    ),
                                    field_mappings: {
                                        FieldName(
                                            Identifier(
                                                "children",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "children",
                                            ),
                                            column_type: Nullable {
                                                underlying_type: Array {
                                                    element_type: Named {
                                                        name: TypeName(
                                                            "Folder",
                                                        ),
                                                    },
                                                },
                                            },
                                            column_type_representation: None,
                                            comparison_operators: None,
                                            aggregate_functions: None,
                                            extraction_functions: None,
                                            argument_mappings: {},
                                        },
                                        FieldName(
                                            Identifier(
                                                "createdAt",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "created_at",
                                            ),
                                            column_type: Nullable {
                                                underlying_type: Named {
                                                    name: TypeName(
                                                        "Date",
                                                    ),
                                                },
                                            },
                                            column_type_representation: Some(
                                                Timestamp,
                                            ),
                                            comparison_operators: Some(
                                                ComparisonOperators {
                                                    eq_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_eq",
                                                        ),
                                                    ),
                                                    in_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_in",
                                                        ),
                                                    ),
                                                    lt_operator: None,
                                                    lte_operator: None,
                                                    gt_operator: None,
                                                    gte_operator: None,
                                                    contains_operator: None,
                                                    icontains_operator: None,
                                                    starts_with_operator: None,
                                                    istarts_with_operator: None,
                                                    ends_with_operator: None,
                                                    iends_with_operator: None,
                                                    other_operators: [
                                                        DataConnectorOperatorName(
                                                            "_gt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_gte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_neq",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_nin",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            aggregate_functions: Some(
                                                AggregateFunctions {
                                                    sum_function: None,
                                                    min_function: None,
                                                    max_function: None,
                                                    avg_function: None,
                                                    other_functions: [
                                                        DataConnectorAggregationFunctionName(
                                                            "count",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "max",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "min",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            extraction_functions: Some(
                                                ExtractionFunctions {
                                                    year_function: None,
                                                    month_function: None,
                                                    day_function: None,
                                                    nanosecond_function: None,
                                                    microsecond_function: None,
                                                    millisecond_function: None,
                                                    second_function: None,
                                                    minute_function: None,
                                                    hour_function: None,
                                                    week_function: None,
                                                    quarter_function: None,
                                                    day_of_week_function: None,
                                                    day_of_year_function: None,
                                                    other_functions: [],
                                                },
                                            ),
                                            argument_mappings: {},
                                        },
                                        FieldName(
                                            Identifier(
                                                "id",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "_id",
                                            ),
                                            column_type: Named {
                                                name: TypeName(
                                                    "ObjectId",
                                                ),
                                            },
                                            column_type_representation: Some(
                                                String,
                                            ),
                                            comparison_operators: Some(
                                                ComparisonOperators {
                                                    eq_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_eq",
                                                        ),
                                                    ),
                                                    in_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_in",
                                                        ),
                                                    ),
                                                    lt_operator: None,
                                                    lte_operator: None,
                                                    gt_operator: None,
                                                    gte_operator: None,
                                                    contains_operator: None,
                                                    icontains_operator: None,
                                                    starts_with_operator: None,
                                                    istarts_with_operator: None,
                                                    ends_with_operator: None,
                                                    iends_with_operator: None,
                                                    other_operators: [
                                                        DataConnectorOperatorName(
                                                            "_neq",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_nin",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            aggregate_functions: Some(
                                                AggregateFunctions {
                                                    sum_function: None,
                                                    min_function: None,
                                                    max_function: None,
                                                    avg_function: None,
                                                    other_functions: [
                                                        DataConnectorAggregationFunctionName(
                                                            "count",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            extraction_functions: Some(
                                                ExtractionFunctions {
                                                    year_function: None,
                                                    month_function: None,
                                                    day_function: None,
                                                    nanosecond_function: None,
                                                    microsecond_function: None,
                                                    millisecond_function: None,
                                                    second_function: None,
                                                    minute_function: None,
                                                    hour_function: None,
                                                    week_function: None,
                                                    quarter_function: None,
                                                    day_of_week_function: None,
                                                    day_of_year_function: None,
                                                    other_functions: [],
                                                },
                                            ),
                                            argument_mappings: {},
                                        },
                                        FieldName(
                                            Identifier(
                                                "name",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "name",
                                            ),
                                            column_type: Nullable {
                                                underlying_type: Named {
                                                    name: TypeName(
                                                        "String",
                                                    ),
                                                },
                                            },
                                            column_type_representation: Some(
                                                String,
                                            ),
                                            comparison_operators: Some(
                                                ComparisonOperators {
                                                    eq_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_eq",
                                                        ),
                                                    ),
                                                    in_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_in",
                                                        ),
                                                    ),
                                                    lt_operator: None,
                                                    lte_operator: None,
                                                    gt_operator: None,
                                                    gte_operator: None,
                                                    contains_operator: None,
                                                    icontains_operator: None,
                                                    starts_with_operator: None,
                                                    istarts_with_operator: None,
                                                    ends_with_operator: None,
                                                    iends_with_operator: None,
                                                    other_operators: [
                                                        DataConnectorOperatorName(
                                                            "_gt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_gte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_iregex",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_neq",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_nin",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_regex",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            aggregate_functions: Some(
                                                AggregateFunctions {
                                                    sum_function: None,
                                                    min_function: None,
                                                    max_function: None,
                                                    avg_function: None,
                                                    other_functions: [
                                                        DataConnectorAggregationFunctionName(
                                                            "count",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "max",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "min",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            extraction_functions: Some(
                                                ExtractionFunctions {
                                                    year_function: None,
                                                    month_function: None,
                                                    day_function: None,
                                                    nanosecond_function: None,
                                                    microsecond_function: None,
                                                    millisecond_function: None,
                                                    second_function: None,
                                                    minute_function: None,
                                                    hour_function: None,
                                                    week_function: None,
                                                    quarter_function: None,
                                                    day_of_week_function: None,
                                                    day_of_year_function: None,
                                                    other_functions: [],
                                                },
                                            ),
                                            argument_mappings: {},
                                        },
                                        FieldName(
                                            Identifier(
                                                "path",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "path",
                                            ),
                                            column_type: Nullable {
                                                underlying_type: Named {
                                                    name: TypeName(
                                                        "String",
                                                    ),
                                                },
                                            },
                                            column_type_representation: Some(
                                                String,
                                            ),
                                            comparison_operators: Some(
                                                ComparisonOperators {
                                                    eq_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_eq",
                                                        ),
                                                    ),
                                                    in_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_in",
                                                        ),
                                                    ),
                                                    lt_operator: None,
                                                    lte_operator: None,
                                                    gt_operator: None,
                                                    gte_operator: None,
                                                    contains_operator: None,
                                                    icontains_operator: None,
                                                    starts_with_operator: None,
                                                    istarts_with_operator: None,
                                                    ends_with_operator: None,
                                                    iends_with_operator: None,
                                                    other_operators: [
                                                        DataConnectorOperatorName(
                                                            "_gt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_gte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_iregex",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_neq",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_nin",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_regex",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            aggregate_functions: Some(
                                                AggregateFunctions {
                                                    sum_function: None,
                                                    min_function: None,
                                                    max_function: None,
                                                    avg_function: None,
                                                    other_functions: [
                                                        DataConnectorAggregationFunctionName(
                                                            "count",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "max",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "min",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            extraction_functions: Some(
                                                ExtractionFunctions {
                                                    year_function: None,
                                                    month_function: None,
                                                    day_function: None,
                                                    nanosecond_function: None,
                                                    microsecond_function: None,
                                                    millisecond_function: None,
                                                    second_function: None,
                                                    minute_function: None,
                                                    hour_function: None,
                                                    week_function: None,
                                                    quarter_function: None,
                                                    day_of_week_function: None,
                                                    day_of_year_function: None,
                                                    other_functions: [],
                                                },
                                            ),
                                            argument_mappings: {},
                                        },
                                        FieldName(
                                            Identifier(
                                                "type",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "type",
                                            ),
                                            column_type: Nullable {
                                                underlying_type: Named {
                                                    name: TypeName(
                                                        "String",
                                                    ),
                                                },
                                            },
                                            column_type_representation: Some(
                                                String,
                                            ),
                                            comparison_operators: Some(
                                                ComparisonOperators {
                                                    eq_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_eq",
                                                        ),
                                                    ),
                                                    in_operator: Some(
                                                        DataConnectorOperatorName(
                                                            "_in",
                                                        ),
                                                    ),
                                                    lt_operator: None,
                                                    lte_operator: None,
                                                    gt_operator: None,
                                                    gte_operator: None,
                                                    contains_operator: None,
                                                    icontains_operator: None,
                                                    starts_with_operator: None,
                                                    istarts_with_operator: None,
                                                    ends_with_operator: None,
                                                    iends_with_operator: None,
                                                    other_operators: [
                                                        DataConnectorOperatorName(
                                                            "_gt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_gte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_iregex",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lt",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_lte",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_neq",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_nin",
                                                        ),
                                                        DataConnectorOperatorName(
                                                            "_regex",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            aggregate_functions: Some(
                                                AggregateFunctions {
                                                    sum_function: None,
                                                    min_function: None,
                                                    max_function: None,
                                                    avg_function: None,
                                                    other_functions: [
                                                        DataConnectorAggregationFunctionName(
                                                            "count",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "max",
                                                        ),
                                                        DataConnectorAggregationFunctionName(
                                                            "min",
                                                        ),
                                                    ],
                                                },
                                            ),
                                            extraction_functions: Some(
                                                ExtractionFunctions {
                                                    year_function: None,
                                                    month_function: None,
                                                    day_function: None,
                                                    nanosecond_function: None,
                                                    microsecond_function: None,
                                                    millisecond_function: None,
                                                    second_function: None,
                                                    minute_function: None,
                                                    hour_function: None,
                                                    week_function: None,
                                                    quarter_function: None,
                                                    day_of_week_function: None,
                                                    day_of_year_function: None,
                                                    other_functions: [],
                                                },
                                            ),
                                            argument_mappings: {},
                                        },
                                    },
                                },
                            },
                            argument_mappings: {
                                ArgumentName(
                                    Identifier(
                                        "folderId",
                                    ),
                                ): DataConnectorArgumentName(
                                    "folderId",
                                ),
                            },
                            data_connector_link_argument_presets: {},
                            source_arguments: {
                                DataConnectorArgumentName(
                                    "folderId",
                                ): Named {
                                    name: TypeName(
                                        "ObjectId",
                                    ),
                                },
                            },
                        },
                    ),
                    global_id_source: None,
                    apollo_federation_key_source: None,
                    aggregate_expression: None,
                    raw: ModelRaw {
                        filter_expression_type: Some(
                            Qualified {
                                subgraph: SubgraphName(
                                    "app",
                                ),
                                name: CustomTypeName(
                                    Identifier(
                                        "FolderBoolExp",
                                    ),
                                ),
                            },
                        ),
                        graphql: Some(
                            ModelGraphQlDefinitionV2 {
                                select_uniques: [
                                    SelectUniqueGraphQlDefinition {
                                        query_root_field: GraphQlFieldName(
                                            "getFolderTreeById",
                                        ),
                                        unique_identifier: [
                                            FieldName(
                                                Identifier(
                                                    "id",
                                                ),
                                            ),
                                        ],
                                        description: None,
                                        deprecated: None,
                                        subscription: Some(
                                            SubscriptionGraphQlDefinition {
                                                root_field: GraphQlFieldName(
                                                    "getFolderTreeById",
                                                ),
                                                description: None,
                                                deprecated: None,
                                                polling_interval_ms: 1000,
                                            },
                                        ),
                                    },
                                ],
                                select_many: Some(
                                    SelectManyGraphQlDefinition {
                                        query_root_field: GraphQlFieldName(
                                            "getFolderTree",
                                        ),
                                        description: None,
                                        deprecated: None,
                                        subscription: Some(
                                            SubscriptionGraphQlDefinition {
                                                root_field: GraphQlFieldName(
                                                    "getFolderTree",
                                                ),
                                                description: None,
                                                deprecated: None,
                                                polling_interval_ms: 1000,
                                            },
                                        ),
                                    },
                                ),
                                arguments_input_type: Some(
                                    GraphQlTypeName(
                                        "GetFolderTreeArguments",
                                    ),
                                ),
                                apollo_federation: None,
                                filter_input_type_name: None,
                                aggregate: Some(
                                    ModelAggregateGraphQlDefinition {
                                        query_root_field: GraphQlFieldName(
                                            "getFolderTreeAggregate",
                                        ),
                                        description: None,
                                        deprecated: None,
                                        subscription: Some(
                                            SubscriptionGraphQlDefinition {
                                                root_field: GraphQlFieldName(
                                                    "getFolderTreeAggregate",
                                                ),
                                                description: None,
                                                deprecated: None,
                                                polling_interval_ms: 1000,
                                            },
                                        ),
                                    },
                                ),
                            },
                        ),
                        description: Some(
                            "Get a folder and its children recursively",
                        ),
                        order_by: ModelV2(
                            None,
                        ),
                    },
                },
                select_permissions: {
                    Role(
                        "admin",
                    ): SelectPermission {
                        filter: AllowAll,
                        argument_presets: {},
                        allow_subscriptions: true,
                    },
                },
                filter_expression_type: Some(
                    ResolvedObjectBooleanExpressionType {
                        name: Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: CustomTypeName(
                                Identifier(
                                    "FolderBoolExp",
                                ),
                            ),
                        },
                        object_type: Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: CustomTypeName(
                                Identifier(
                                    "Folder",
                                ),
                            ),
                        },
                        graphql: Some(
                            BooleanExpressionGraphqlConfig {
                                type_name: TypeName(
                                    Name(
                                        "FolderBoolExp",
                                    ),
                                ),
                                object_fields: {
                                    FieldName(
                                        Identifier(
                                            "children",
                                        ),
                                    ): ObjectBooleanExpressionGraphqlConfig {
                                        graphql_type_name: TypeName(
                                            Name(
                                                "FolderBoolExp",
                                            ),
                                        ),
                                    },
                                },
                                scalar_fields: {
                                    FieldName(
                                        Identifier(
                                            "createdAt",
                                        ),
                                    ): ScalarBooleanExpressionGraphqlConfig {
                                        type_name: TypeName(
                                            Name(
                                                "DateBoolExp",
                                            ),
                                        ),
                                        is_null_operator_name: Some(
                                            Name(
                                                "_is_null",
                                            ),
                                        ),
                                    },
                                    FieldName(
                                        Identifier(
                                            "id",
                                        ),
                                    ): ScalarBooleanExpressionGraphqlConfig {
                                        type_name: TypeName(
                                            Name(
                                                "ObjectIdBoolExp",
                                            ),
                                        ),
                                        is_null_operator_name: Some(
                                            Name(
                                                "_is_null",
                                            ),
                                        ),
                                    },
                                    FieldName(
                                        Identifier(
                                            "name",
                                        ),
                                    ): ScalarBooleanExpressionGraphqlConfig {
                                        type_name: TypeName(
                                            Name(
                                                "StringBoolExp",
                                            ),
                                        ),
                                        is_null_operator_name: Some(
                                            Name(
                                                "_is_null",
                                            ),
                                        ),
                                    },
                                    FieldName(
                                        Identifier(
                                            "path",
                                        ),
                                    ): ScalarBooleanExpressionGraphqlConfig {
                                        type_name: TypeName(
                                            Name(
                                                "StringBoolExp",
                                            ),
                                        ),
                                        is_null_operator_name: Some(
                                            Name(
                                                "_is_null",
                                            ),
                                        ),
                                    },
                                    FieldName(
                                        Identifier(
                                            "type",
                                        ),
                                    ): ScalarBooleanExpressionGraphqlConfig {
                                        type_name: TypeName(
                                            Name(
                                                "StringBoolExp",
                                            ),
                                        ),
                                        is_null_operator_name: Some(
                                            Name(
                                                "_is_null",
                                            ),
                                        ),
                                    },
                                },
                                field_config: BooleanExpressionGraphqlFieldConfig {
                                    where_field_name: Name(
                                        "where",
                                    ),
                                    logical_operators: LogicalOperatorsGraphqlConfig {
                                        and_operator_name: Name(
                                            "_and",
                                        ),
                                        or_operator_name: Name(
                                            "_or",
                                        ),
                                        not_operator_name: Name(
                                            "_not",
                                        ),
                                    },
                                },
                            },
                        ),
                        fields: ResolvedObjectBooleanExpressionTypeFields {
                            object_fields: {
                                FieldName(
                                    Identifier(
                                        "children",
                                    ),
                                ): ObjectComparisonExpressionInfo {
                                    boolean_expression_type_name: Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "FolderBoolExp",
                                            ),
                                        ),
                                    },
                                    underlying_object_type_name: Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Folder",
                                            ),
                                        ),
                                    },
                                    field_kind: ObjectArray,
                                },
                            },
                            scalar_fields: {
                                FieldName(
                                    Identifier(
                                        "createdAt",
                                    ),
                                ): ComparisonExpressionInfo {
                                    boolean_expression_type_name: FromBooleanExpressionType(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "DateBoolExp",
                                                ),
                                            ),
                                        },
                                    ),
                                    operators: {
                                        OperatorName(
                                            "_eq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "Date",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "Date",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "Date",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_in",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Custom(
                                                            Qualified {
                                                                subgraph: SubgraphName(
                                                                    "app",
                                                                ),
                                                                name: CustomTypeName(
                                                                    Identifier(
                                                                        "Date",
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "Date",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "Date",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_neq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "Date",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_nin",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Custom(
                                                            Qualified {
                                                                subgraph: SubgraphName(
                                                                    "app",
                                                                ),
                                                                name: CustomTypeName(
                                                                    Identifier(
                                                                        "Date",
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                    },
                                    operator_mapping: {
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: DataConnectorName(
                                                Identifier(
                                                    "mongo",
                                                ),
                                            ),
                                        }: OperatorMapping(
                                            {
                                                OperatorName(
                                                    "_eq",
                                                ): DataConnectorOperatorName(
                                                    "_eq",
                                                ),
                                                OperatorName(
                                                    "_gt",
                                                ): DataConnectorOperatorName(
                                                    "_gt",
                                                ),
                                                OperatorName(
                                                    "_gte",
                                                ): DataConnectorOperatorName(
                                                    "_gte",
                                                ),
                                                OperatorName(
                                                    "_in",
                                                ): DataConnectorOperatorName(
                                                    "_in",
                                                ),
                                                OperatorName(
                                                    "_lt",
                                                ): DataConnectorOperatorName(
                                                    "_lt",
                                                ),
                                                OperatorName(
                                                    "_lte",
                                                ): DataConnectorOperatorName(
                                                    "_lte",
                                                ),
                                                OperatorName(
                                                    "_neq",
                                                ): DataConnectorOperatorName(
                                                    "_neq",
                                                ),
                                                OperatorName(
                                                    "_nin",
                                                ): DataConnectorOperatorName(
                                                    "_nin",
                                                ),
                                            },
                                        ),
                                    },
                                    logical_operators: Include {
                                        graphql: Some(
                                            LogicalOperatorsGraphqlConfig {
                                                and_operator_name: Name(
                                                    "_and",
                                                ),
                                                or_operator_name: Name(
                                                    "_or",
                                                ),
                                                not_operator_name: Name(
                                                    "_not",
                                                ),
                                            },
                                        ),
                                    },
                                    field_kind: Scalar,
                                },
                                FieldName(
                                    Identifier(
                                        "id",
                                    ),
                                ): ComparisonExpressionInfo {
                                    boolean_expression_type_name: FromBooleanExpressionType(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "ObjectIdBoolExp",
                                                ),
                                            ),
                                        },
                                    ),
                                    operators: {
                                        OperatorName(
                                            "_eq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "ObjectId",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_in",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Custom(
                                                            Qualified {
                                                                subgraph: SubgraphName(
                                                                    "app",
                                                                ),
                                                                name: CustomTypeName(
                                                                    Identifier(
                                                                        "ObjectId",
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_neq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Custom(
                                                    Qualified {
                                                        subgraph: SubgraphName(
                                                            "app",
                                                        ),
                                                        name: CustomTypeName(
                                                            Identifier(
                                                                "ObjectId",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_nin",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Custom(
                                                            Qualified {
                                                                subgraph: SubgraphName(
                                                                    "app",
                                                                ),
                                                                name: CustomTypeName(
                                                                    Identifier(
                                                                        "ObjectId",
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                    },
                                    operator_mapping: {
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: DataConnectorName(
                                                Identifier(
                                                    "mongo",
                                                ),
                                            ),
                                        }: OperatorMapping(
                                            {
                                                OperatorName(
                                                    "_eq",
                                                ): DataConnectorOperatorName(
                                                    "_eq",
                                                ),
                                                OperatorName(
                                                    "_in",
                                                ): DataConnectorOperatorName(
                                                    "_in",
                                                ),
                                                OperatorName(
                                                    "_neq",
                                                ): DataConnectorOperatorName(
                                                    "_neq",
                                                ),
                                                OperatorName(
                                                    "_nin",
                                                ): DataConnectorOperatorName(
                                                    "_nin",
                                                ),
                                            },
                                        ),
                                    },
                                    logical_operators: Include {
                                        graphql: Some(
                                            LogicalOperatorsGraphqlConfig {
                                                and_operator_name: Name(
                                                    "_and",
                                                ),
                                                or_operator_name: Name(
                                                    "_or",
                                                ),
                                                not_operator_name: Name(
                                                    "_not",
                                                ),
                                            },
                                        ),
                                    },
                                    field_kind: Scalar,
                                },
                                FieldName(
                                    Identifier(
                                        "name",
                                    ),
                                ): ComparisonExpressionInfo {
                                    boolean_expression_type_name: FromBooleanExpressionType(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "StringBoolExp",
                                                ),
                                            ),
                                        },
                                    ),
                                    operators: {
                                        OperatorName(
                                            "_eq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_in",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Inbuilt(
                                                            String,
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_iregex",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_neq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_nin",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Inbuilt(
                                                            String,
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_regex",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                    },
                                    operator_mapping: {
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: DataConnectorName(
                                                Identifier(
                                                    "mongo",
                                                ),
                                            ),
                                        }: OperatorMapping(
                                            {
                                                OperatorName(
                                                    "_eq",
                                                ): DataConnectorOperatorName(
                                                    "_eq",
                                                ),
                                                OperatorName(
                                                    "_gt",
                                                ): DataConnectorOperatorName(
                                                    "_gt",
                                                ),
                                                OperatorName(
                                                    "_gte",
                                                ): DataConnectorOperatorName(
                                                    "_gte",
                                                ),
                                                OperatorName(
                                                    "_in",
                                                ): DataConnectorOperatorName(
                                                    "_in",
                                                ),
                                                OperatorName(
                                                    "_iregex",
                                                ): DataConnectorOperatorName(
                                                    "_iregex",
                                                ),
                                                OperatorName(
                                                    "_lt",
                                                ): DataConnectorOperatorName(
                                                    "_lt",
                                                ),
                                                OperatorName(
                                                    "_lte",
                                                ): DataConnectorOperatorName(
                                                    "_lte",
                                                ),
                                                OperatorName(
                                                    "_neq",
                                                ): DataConnectorOperatorName(
                                                    "_neq",
                                                ),
                                                OperatorName(
                                                    "_nin",
                                                ): DataConnectorOperatorName(
                                                    "_nin",
                                                ),
                                                OperatorName(
                                                    "_regex",
                                                ): DataConnectorOperatorName(
                                                    "_regex",
                                                ),
                                            },
                                        ),
                                    },
                                    logical_operators: Include {
                                        graphql: Some(
                                            LogicalOperatorsGraphqlConfig {
                                                and_operator_name: Name(
                                                    "_and",
                                                ),
                                                or_operator_name: Name(
                                                    "_or",
                                                ),
                                                not_operator_name: Name(
                                                    "_not",
                                                ),
                                            },
                                        ),
                                    },
                                    field_kind: Scalar,
                                },
                                FieldName(
                                    Identifier(
                                        "path",
                                    ),
                                ): ComparisonExpressionInfo {
                                    boolean_expression_type_name: FromBooleanExpressionType(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "StringBoolExp",
                                                ),
                                            ),
                                        },
                                    ),
                                    operators: {
                                        OperatorName(
                                            "_eq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_in",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Inbuilt(
                                                            String,
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_iregex",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_neq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_nin",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Inbuilt(
                                                            String,
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_regex",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                    },
                                    operator_mapping: {
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: DataConnectorName(
                                                Identifier(
                                                    "mongo",
                                                ),
                                            ),
                                        }: OperatorMapping(
                                            {
                                                OperatorName(
                                                    "_eq",
                                                ): DataConnectorOperatorName(
                                                    "_eq",
                                                ),
                                                OperatorName(
                                                    "_gt",
                                                ): DataConnectorOperatorName(
                                                    "_gt",
                                                ),
                                                OperatorName(
                                                    "_gte",
                                                ): DataConnectorOperatorName(
                                                    "_gte",
                                                ),
                                                OperatorName(
                                                    "_in",
                                                ): DataConnectorOperatorName(
                                                    "_in",
                                                ),
                                                OperatorName(
                                                    "_iregex",
                                                ): DataConnectorOperatorName(
                                                    "_iregex",
                                                ),
                                                OperatorName(
                                                    "_lt",
                                                ): DataConnectorOperatorName(
                                                    "_lt",
                                                ),
                                                OperatorName(
                                                    "_lte",
                                                ): DataConnectorOperatorName(
                                                    "_lte",
                                                ),
                                                OperatorName(
                                                    "_neq",
                                                ): DataConnectorOperatorName(
                                                    "_neq",
                                                ),
                                                OperatorName(
                                                    "_nin",
                                                ): DataConnectorOperatorName(
                                                    "_nin",
                                                ),
                                                OperatorName(
                                                    "_regex",
                                                ): DataConnectorOperatorName(
                                                    "_regex",
                                                ),
                                            },
                                        ),
                                    },
                                    logical_operators: Include {
                                        graphql: Some(
                                            LogicalOperatorsGraphqlConfig {
                                                and_operator_name: Name(
                                                    "_and",
                                                ),
                                                or_operator_name: Name(
                                                    "_or",
                                                ),
                                                not_operator_name: Name(
                                                    "_not",
                                                ),
                                            },
                                        ),
                                    },
                                    field_kind: Scalar,
                                },
                                FieldName(
                                    Identifier(
                                        "type",
                                    ),
                                ): ComparisonExpressionInfo {
                                    boolean_expression_type_name: FromBooleanExpressionType(
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: CustomTypeName(
                                                Identifier(
                                                    "StringBoolExp",
                                                ),
                                            ),
                                        },
                                    ),
                                    operators: {
                                        OperatorName(
                                            "_eq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_gte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_in",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Inbuilt(
                                                            String,
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_iregex",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lt",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_lte",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_neq",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_nin",
                                        ): QualifiedTypeReference {
                                            underlying_type: List(
                                                QualifiedTypeReference {
                                                    underlying_type: Named(
                                                        Inbuilt(
                                                            String,
                                                        ),
                                                    ),
                                                    nullable: false,
                                                },
                                            ),
                                            nullable: false,
                                        },
                                        OperatorName(
                                            "_regex",
                                        ): QualifiedTypeReference {
                                            underlying_type: Named(
                                                Inbuilt(
                                                    String,
                                                ),
                                            ),
                                            nullable: false,
                                        },
                                    },
                                    operator_mapping: {
                                        Qualified {
                                            subgraph: SubgraphName(
                                                "app",
                                            ),
                                            name: DataConnectorName(
                                                Identifier(
                                                    "mongo",
                                                ),
                                            ),
                                        }: OperatorMapping(
                                            {
                                                OperatorName(
                                                    "_eq",
                                                ): DataConnectorOperatorName(
                                                    "_eq",
                                                ),
                                                OperatorName(
                                                    "_gt",
                                                ): DataConnectorOperatorName(
                                                    "_gt",
                                                ),
                                                OperatorName(
                                                    "_gte",
                                                ): DataConnectorOperatorName(
                                                    "_gte",
                                                ),
                                                OperatorName(
                                                    "_in",
                                                ): DataConnectorOperatorName(
                                                    "_in",
                                                ),
                                                OperatorName(
                                                    "_iregex",
                                                ): DataConnectorOperatorName(
                                                    "_iregex",
                                                ),
                                                OperatorName(
                                                    "_lt",
                                                ): DataConnectorOperatorName(
                                                    "_lt",
                                                ),
                                                OperatorName(
                                                    "_lte",
                                                ): DataConnectorOperatorName(
                                                    "_lte",
                                                ),
                                                OperatorName(
                                                    "_neq",
                                                ): DataConnectorOperatorName(
                                                    "_neq",
                                                ),
                                                OperatorName(
                                                    "_nin",
                                                ): DataConnectorOperatorName(
                                                    "_nin",
                                                ),
                                                OperatorName(
                                                    "_regex",
                                                ): DataConnectorOperatorName(
                                                    "_regex",
                                                ),
                                            },
                                        ),
                                    },
                                    logical_operators: Include {
                                        graphql: Some(
                                            LogicalOperatorsGraphqlConfig {
                                                and_operator_name: Name(
                                                    "_and",
                                                ),
                                                or_operator_name: Name(
                                                    "_or",
                                                ),
                                                not_operator_name: Name(
                                                    "_not",
                                                ),
                                            },
                                        ),
                                    },
                                    field_kind: Scalar,
                                },
                            },
                            relationship_fields: {},
                        },
                        include_logical_operators: Yes,
                        data_connector: None,
                    },
                ),
                graphql_api: ModelGraphQlApi {
                    arguments_input_config: Some(
                        ModelGraphqlApiArgumentsConfig {
                            field_name: Name(
                                "args",
                            ),
                            type_name: TypeName(
                                Name(
                                    "GetFolderTreeArguments",
                                ),
                            ),
                        },
                    ),
                    select_uniques: [
                        SelectUniqueGraphQlDefinition {
                            query_root_field: Name(
                                "getFolderTreeById",
                            ),
                            unique_identifier: {
                                FieldName(
                                    Identifier(
                                        "id",
                                    ),
                                ): UniqueIdentifierField {
                                    field_type: QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "ObjectId",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    ndc_column: Some(
                                        NdcColumnForComparison {
                                            column: DataConnectorColumnName(
                                                "_id",
                                            ),
                                            equal_operator: DataConnectorOperatorName(
                                                "_eq",
                                            ),
                                        },
                                    ),
                                },
                            },
                            description: Some(
                                "Selects a single object from the model. Model description: Get a folder and its children recursively",
                            ),
                            deprecated: None,
                            subscription: Some(
                                SubscriptionGraphQlDefinition {
                                    root_field: Name(
                                        "getFolderTreeById",
                                    ),
                                    description: None,
                                    deprecated: None,
                                    polling_interval_ms: 1000,
                                },
                            ),
                        },
                    ],
                    select_many: Some(
                        SelectManyGraphQlDefinition {
                            query_root_field: Name(
                                "getFolderTree",
                            ),
                            description: Some(
                                "Selects multiple objects from the model. Model description: Get a folder and its children recursively",
                            ),
                            deprecated: None,
                            subscription: Some(
                                SubscriptionGraphQlDefinition {
                                    root_field: Name(
                                        "getFolderTree",
                                    ),
                                    description: None,
                                    deprecated: None,
                                    polling_interval_ms: 1000,
                                },
                            ),
                        },
                    ),
                    select_aggregate: None,
                    order_by_expression: None,
                    limit_field: Some(
                        LimitFieldGraphqlConfig {
                            field_name: Name(
                                "limit",
                            ),
                        },
                    ),
                    offset_field: Some(
                        OffsetFieldGraphqlConfig {
                            field_name: Name(
                                "offset",
                            ),
                        },
                    ),
                    filter_input_type_name: None,
                },
            },
        },
        commands: {},
        boolean_expression_types: BooleanExpressionTypes {
            objects: {
                Qualified {
                    subgraph: SubgraphName(
                        "app",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "FolderBoolExp",
                        ),
                    ),
                }: ResolvedObjectBooleanExpressionType {
                    name: Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "FolderBoolExp",
                            ),
                        ),
                    },
                    object_type: Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "Folder",
                            ),
                        ),
                    },
                    graphql: Some(
                        BooleanExpressionGraphqlConfig {
                            type_name: TypeName(
                                Name(
                                    "FolderBoolExp",
                                ),
                            ),
                            object_fields: {
                                FieldName(
                                    Identifier(
                                        "children",
                                    ),
                                ): ObjectBooleanExpressionGraphqlConfig {
                                    graphql_type_name: TypeName(
                                        Name(
                                            "FolderBoolExp",
                                        ),
                                    ),
                                },
                            },
                            scalar_fields: {
                                FieldName(
                                    Identifier(
                                        "createdAt",
                                    ),
                                ): ScalarBooleanExpressionGraphqlConfig {
                                    type_name: TypeName(
                                        Name(
                                            "DateBoolExp",
                                        ),
                                    ),
                                    is_null_operator_name: Some(
                                        Name(
                                            "_is_null",
                                        ),
                                    ),
                                },
                                FieldName(
                                    Identifier(
                                        "id",
                                    ),
                                ): ScalarBooleanExpressionGraphqlConfig {
                                    type_name: TypeName(
                                        Name(
                                            "ObjectIdBoolExp",
                                        ),
                                    ),
                                    is_null_operator_name: Some(
                                        Name(
                                            "_is_null",
                                        ),
                                    ),
                                },
                                FieldName(
                                    Identifier(
                                        "name",
                                    ),
                                ): ScalarBooleanExpressionGraphqlConfig {
                                    type_name: TypeName(
                                        Name(
                                            "StringBoolExp",
                                        ),
                                    ),
                                    is_null_operator_name: Some(
                                        Name(
                                            "_is_null",
                                        ),
                                    ),
                                },
                                FieldName(
                                    Identifier(
                                        "path",
                                    ),
                                ): ScalarBooleanExpressionGraphqlConfig {
                                    type_name: TypeName(
                                        Name(
                                            "StringBoolExp",
                                        ),
                                    ),
                                    is_null_operator_name: Some(
                                        Name(
                                            "_is_null",
                                        ),
                                    ),
                                },
                                FieldName(
                                    Identifier(
                                        "type",
                                    ),
                                ): ScalarBooleanExpressionGraphqlConfig {
                                    type_name: TypeName(
                                        Name(
                                            "StringBoolExp",
                                        ),
                                    ),
                                    is_null_operator_name: Some(
                                        Name(
                                            "_is_null",
                                        ),
                                    ),
                                },
                            },
                            field_config: BooleanExpressionGraphqlFieldConfig {
                                where_field_name: Name(
                                    "where",
                                ),
                                logical_operators: LogicalOperatorsGraphqlConfig {
                                    and_operator_name: Name(
                                        "_and",
                                    ),
                                    or_operator_name: Name(
                                        "_or",
                                    ),
                                    not_operator_name: Name(
                                        "_not",
                                    ),
                                },
                            },
                        },
                    ),
                    fields: ResolvedObjectBooleanExpressionTypeFields {
                        object_fields: {
                            FieldName(
                                Identifier(
                                    "children",
                                ),
                            ): ObjectComparisonExpressionInfo {
                                boolean_expression_type_name: Qualified {
                                    subgraph: SubgraphName(
                                        "app",
                                    ),
                                    name: CustomTypeName(
                                        Identifier(
                                            "FolderBoolExp",
                                        ),
                                    ),
                                },
                                underlying_object_type_name: Qualified {
                                    subgraph: SubgraphName(
                                        "app",
                                    ),
                                    name: CustomTypeName(
                                        Identifier(
                                            "Folder",
                                        ),
                                    ),
                                },
                                field_kind: ObjectArray,
                            },
                        },
                        scalar_fields: {
                            FieldName(
                                Identifier(
                                    "createdAt",
                                ),
                            ): ComparisonExpressionInfo {
                                boolean_expression_type_name: FromBooleanExpressionType(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "DateBoolExp",
                                            ),
                                        ),
                                    },
                                ),
                                operators: {
                                    OperatorName(
                                        "_eq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Date",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Date",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Date",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_in",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Custom(
                                                        Qualified {
                                                            subgraph: SubgraphName(
                                                                "app",
                                                            ),
                                                            name: CustomTypeName(
                                                                Identifier(
                                                                    "Date",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Date",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Date",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_neq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "Date",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_nin",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Custom(
                                                        Qualified {
                                                            subgraph: SubgraphName(
                                                                "app",
                                                            ),
                                                            name: CustomTypeName(
                                                                Identifier(
                                                                    "Date",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                },
                                operator_mapping: {
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: DataConnectorName(
                                            Identifier(
                                                "mongo",
                                            ),
                                        ),
                                    }: OperatorMapping(
                                        {
                                            OperatorName(
                                                "_eq",
                                            ): DataConnectorOperatorName(
                                                "_eq",
                                            ),
                                            OperatorName(
                                                "_gt",
                                            ): DataConnectorOperatorName(
                                                "_gt",
                                            ),
                                            OperatorName(
                                                "_gte",
                                            ): DataConnectorOperatorName(
                                                "_gte",
                                            ),
                                            OperatorName(
                                                "_in",
                                            ): DataConnectorOperatorName(
                                                "_in",
                                            ),
                                            OperatorName(
                                                "_lt",
                                            ): DataConnectorOperatorName(
                                                "_lt",
                                            ),
                                            OperatorName(
                                                "_lte",
                                            ): DataConnectorOperatorName(
                                                "_lte",
                                            ),
                                            OperatorName(
                                                "_neq",
                                            ): DataConnectorOperatorName(
                                                "_neq",
                                            ),
                                            OperatorName(
                                                "_nin",
                                            ): DataConnectorOperatorName(
                                                "_nin",
                                            ),
                                        },
                                    ),
                                },
                                logical_operators: Include {
                                    graphql: Some(
                                        LogicalOperatorsGraphqlConfig {
                                            and_operator_name: Name(
                                                "_and",
                                            ),
                                            or_operator_name: Name(
                                                "_or",
                                            ),
                                            not_operator_name: Name(
                                                "_not",
                                            ),
                                        },
                                    ),
                                },
                                field_kind: Scalar,
                            },
                            FieldName(
                                Identifier(
                                    "id",
                                ),
                            ): ComparisonExpressionInfo {
                                boolean_expression_type_name: FromBooleanExpressionType(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "ObjectIdBoolExp",
                                            ),
                                        ),
                                    },
                                ),
                                operators: {
                                    OperatorName(
                                        "_eq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "ObjectId",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_in",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Custom(
                                                        Qualified {
                                                            subgraph: SubgraphName(
                                                                "app",
                                                            ),
                                                            name: CustomTypeName(
                                                                Identifier(
                                                                    "ObjectId",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_neq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: SubgraphName(
                                                        "app",
                                                    ),
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "ObjectId",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_nin",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Custom(
                                                        Qualified {
                                                            subgraph: SubgraphName(
                                                                "app",
                                                            ),
                                                            name: CustomTypeName(
                                                                Identifier(
                                                                    "ObjectId",
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                },
                                operator_mapping: {
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: DataConnectorName(
                                            Identifier(
                                                "mongo",
                                            ),
                                        ),
                                    }: OperatorMapping(
                                        {
                                            OperatorName(
                                                "_eq",
                                            ): DataConnectorOperatorName(
                                                "_eq",
                                            ),
                                            OperatorName(
                                                "_in",
                                            ): DataConnectorOperatorName(
                                                "_in",
                                            ),
                                            OperatorName(
                                                "_neq",
                                            ): DataConnectorOperatorName(
                                                "_neq",
                                            ),
                                            OperatorName(
                                                "_nin",
                                            ): DataConnectorOperatorName(
                                                "_nin",
                                            ),
                                        },
                                    ),
                                },
                                logical_operators: Include {
                                    graphql: Some(
                                        LogicalOperatorsGraphqlConfig {
                                            and_operator_name: Name(
                                                "_and",
                                            ),
                                            or_operator_name: Name(
                                                "_or",
                                            ),
                                            not_operator_name: Name(
                                                "_not",
                                            ),
                                        },
                                    ),
                                },
                                field_kind: Scalar,
                            },
                            FieldName(
                                Identifier(
                                    "name",
                                ),
                            ): ComparisonExpressionInfo {
                                boolean_expression_type_name: FromBooleanExpressionType(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "StringBoolExp",
                                            ),
                                        ),
                                    },
                                ),
                                operators: {
                                    OperatorName(
                                        "_eq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_in",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Inbuilt(
                                                        String,
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_iregex",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_neq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_nin",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Inbuilt(
                                                        String,
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_regex",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                },
                                operator_mapping: {
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: DataConnectorName(
                                            Identifier(
                                                "mongo",
                                            ),
                                        ),
                                    }: OperatorMapping(
                                        {
                                            OperatorName(
                                                "_eq",
                                            ): DataConnectorOperatorName(
                                                "_eq",
                                            ),
                                            OperatorName(
                                                "_gt",
                                            ): DataConnectorOperatorName(
                                                "_gt",
                                            ),
                                            OperatorName(
                                                "_gte",
                                            ): DataConnectorOperatorName(
                                                "_gte",
                                            ),
                                            OperatorName(
                                                "_in",
                                            ): DataConnectorOperatorName(
                                                "_in",
                                            ),
                                            OperatorName(
                                                "_iregex",
                                            ): DataConnectorOperatorName(
                                                "_iregex",
                                            ),
                                            OperatorName(
                                                "_lt",
                                            ): DataConnectorOperatorName(
                                                "_lt",
                                            ),
                                            OperatorName(
                                                "_lte",
                                            ): DataConnectorOperatorName(
                                                "_lte",
                                            ),
                                            OperatorName(
                                                "_neq",
                                            ): DataConnectorOperatorName(
                                                "_neq",
                                            ),
                                            OperatorName(
                                                "_nin",
                                            ): DataConnectorOperatorName(
                                                "_nin",
                                            ),
                                            OperatorName(
                                                "_regex",
                                            ): DataConnectorOperatorName(
                                                "_regex",
                                            ),
                                        },
                                    ),
                                },
                                logical_operators: Include {
                                    graphql: Some(
                                        LogicalOperatorsGraphqlConfig {
                                            and_operator_name: Name(
                                                "_and",
                                            ),
                                            or_operator_name: Name(
                                                "_or",
                                            ),
                                            not_operator_name: Name(
                                                "_not",
                                            ),
                                        },
                                    ),
                                },
                                field_kind: Scalar,
                            },
                            FieldName(
                                Identifier(
                                    "path",
                                ),
                            ): ComparisonExpressionInfo {
                                boolean_expression_type_name: FromBooleanExpressionType(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "StringBoolExp",
                                            ),
                                        ),
                                    },
                                ),
                                operators: {
                                    OperatorName(
                                        "_eq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_in",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Inbuilt(
                                                        String,
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_iregex",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_neq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_nin",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Inbuilt(
                                                        String,
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_regex",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                },
                                operator_mapping: {
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: DataConnectorName(
                                            Identifier(
                                                "mongo",
                                            ),
                                        ),
                                    }: OperatorMapping(
                                        {
                                            OperatorName(
                                                "_eq",
                                            ): DataConnectorOperatorName(
                                                "_eq",
                                            ),
                                            OperatorName(
                                                "_gt",
                                            ): DataConnectorOperatorName(
                                                "_gt",
                                            ),
                                            OperatorName(
                                                "_gte",
                                            ): DataConnectorOperatorName(
                                                "_gte",
                                            ),
                                            OperatorName(
                                                "_in",
                                            ): DataConnectorOperatorName(
                                                "_in",
                                            ),
                                            OperatorName(
                                                "_iregex",
                                            ): DataConnectorOperatorName(
                                                "_iregex",
                                            ),
                                            OperatorName(
                                                "_lt",
                                            ): DataConnectorOperatorName(
                                                "_lt",
                                            ),
                                            OperatorName(
                                                "_lte",
                                            ): DataConnectorOperatorName(
                                                "_lte",
                                            ),
                                            OperatorName(
                                                "_neq",
                                            ): DataConnectorOperatorName(
                                                "_neq",
                                            ),
                                            OperatorName(
                                                "_nin",
                                            ): DataConnectorOperatorName(
                                                "_nin",
                                            ),
                                            OperatorName(
                                                "_regex",
                                            ): DataConnectorOperatorName(
                                                "_regex",
                                            ),
                                        },
                                    ),
                                },
                                logical_operators: Include {
                                    graphql: Some(
                                        LogicalOperatorsGraphqlConfig {
                                            and_operator_name: Name(
                                                "_and",
                                            ),
                                            or_operator_name: Name(
                                                "_or",
                                            ),
                                            not_operator_name: Name(
                                                "_not",
                                            ),
                                        },
                                    ),
                                },
                                field_kind: Scalar,
                            },
                            FieldName(
                                Identifier(
                                    "type",
                                ),
                            ): ComparisonExpressionInfo {
                                boolean_expression_type_name: FromBooleanExpressionType(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "StringBoolExp",
                                            ),
                                        ),
                                    },
                                ),
                                operators: {
                                    OperatorName(
                                        "_eq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_gte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_in",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Inbuilt(
                                                        String,
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_iregex",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lt",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_lte",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_neq",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_nin",
                                    ): QualifiedTypeReference {
                                        underlying_type: List(
                                            QualifiedTypeReference {
                                                underlying_type: Named(
                                                    Inbuilt(
                                                        String,
                                                    ),
                                                ),
                                                nullable: false,
                                            },
                                        ),
                                        nullable: false,
                                    },
                                    OperatorName(
                                        "_regex",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Inbuilt(
                                                String,
                                            ),
                                        ),
                                        nullable: false,
                                    },
                                },
                                operator_mapping: {
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: DataConnectorName(
                                            Identifier(
                                                "mongo",
                                            ),
                                        ),
                                    }: OperatorMapping(
                                        {
                                            OperatorName(
                                                "_eq",
                                            ): DataConnectorOperatorName(
                                                "_eq",
                                            ),
                                            OperatorName(
                                                "_gt",
                                            ): DataConnectorOperatorName(
                                                "_gt",
                                            ),
                                            OperatorName(
                                                "_gte",
                                            ): DataConnectorOperatorName(
                                                "_gte",
                                            ),
                                            OperatorName(
                                                "_in",
                                            ): DataConnectorOperatorName(
                                                "_in",
                                            ),
                                            OperatorName(
                                                "_iregex",
                                            ): DataConnectorOperatorName(
                                                "_iregex",
                                            ),
                                            OperatorName(
                                                "_lt",
                                            ): DataConnectorOperatorName(
                                                "_lt",
                                            ),
                                            OperatorName(
                                                "_lte",
                                            ): DataConnectorOperatorName(
                                                "_lte",
                                            ),
                                            OperatorName(
                                                "_neq",
                                            ): DataConnectorOperatorName(
                                                "_neq",
                                            ),
                                            OperatorName(
                                                "_nin",
                                            ): DataConnectorOperatorName(
                                                "_nin",
                                            ),
                                            OperatorName(
                                                "_regex",
                                            ): DataConnectorOperatorName(
                                                "_regex",
                                            ),
                                        },
                                    ),
                                },
                                logical_operators: Include {
                                    graphql: Some(
                                        LogicalOperatorsGraphqlConfig {
                                            and_operator_name: Name(
                                                "_and",
                                            ),
                                            or_operator_name: Name(
                                                "_or",
                                            ),
                                            not_operator_name: Name(
                                                "_not",
                                            ),
                                        },
                                    ),
                                },
                                field_kind: Scalar,
                            },
                        },
                        relationship_fields: {},
                    },
                    include_logical_operators: Yes,
                    data_connector: None,
                },
            },
            scalars: {
                FromBooleanExpressionType(
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "BoolBoolExp",
                            ),
                        ),
                    },
                ): ResolvedScalarBooleanExpressionType {
                    operand_type: Custom(
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: CustomTypeName(
                                Identifier(
                                    "Bool",
                                ),
                            ),
                        },
                    ),
                    comparison_operators: {
                        OperatorName(
                            "_eq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Bool",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_in",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Custom(
                                            Qualified {
                                                subgraph: SubgraphName(
                                                    "app",
                                                ),
                                                name: CustomTypeName(
                                                    Identifier(
                                                        "Bool",
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_neq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Bool",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_nin",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Custom(
                                            Qualified {
                                                subgraph: SubgraphName(
                                                    "app",
                                                ),
                                                name: CustomTypeName(
                                                    Identifier(
                                                        "Bool",
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                    },
                    data_connector_operator_mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                        }: DataConnectorOperatorMapping {
                            data_connector_name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                            data_connector_scalar_type: DataConnectorScalarType(
                                "Bool",
                            ),
                            operator_mapping: {
                                OperatorName(
                                    "_eq",
                                ): DataConnectorOperatorName(
                                    "_eq",
                                ),
                                OperatorName(
                                    "_in",
                                ): DataConnectorOperatorName(
                                    "_in",
                                ),
                                OperatorName(
                                    "_neq",
                                ): DataConnectorOperatorName(
                                    "_neq",
                                ),
                                OperatorName(
                                    "_nin",
                                ): DataConnectorOperatorName(
                                    "_nin",
                                ),
                            },
                        },
                    },
                    graphql_name: Some(
                        GraphQlTypeName(
                            "BoolBoolExp",
                        ),
                    ),
                    logical_operators: Include {
                        graphql: Some(
                            LogicalOperatorsGraphqlConfig {
                                and_operator_name: Name(
                                    "_and",
                                ),
                                or_operator_name: Name(
                                    "_or",
                                ),
                                not_operator_name: Name(
                                    "_not",
                                ),
                            },
                        ),
                    },
                    is_null_operator: Include {
                        graphql: Some(
                            IsNullOperatorGraphqlConfig {
                                is_null_operator_name: Name(
                                    "_is_null",
                                ),
                            },
                        ),
                    },
                },
                FromBooleanExpressionType(
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "DateBoolExp",
                            ),
                        ),
                    },
                ): ResolvedScalarBooleanExpressionType {
                    operand_type: Custom(
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: CustomTypeName(
                                Identifier(
                                    "Date",
                                ),
                            ),
                        },
                    ),
                    comparison_operators: {
                        OperatorName(
                            "_eq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Date",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_gt",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Date",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_gte",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Date",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_in",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Custom(
                                            Qualified {
                                                subgraph: SubgraphName(
                                                    "app",
                                                ),
                                                name: CustomTypeName(
                                                    Identifier(
                                                        "Date",
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_lt",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Date",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_lte",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Date",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_neq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "Date",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_nin",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Custom(
                                            Qualified {
                                                subgraph: SubgraphName(
                                                    "app",
                                                ),
                                                name: CustomTypeName(
                                                    Identifier(
                                                        "Date",
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                    },
                    data_connector_operator_mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                        }: DataConnectorOperatorMapping {
                            data_connector_name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                            data_connector_scalar_type: DataConnectorScalarType(
                                "Date",
                            ),
                            operator_mapping: {
                                OperatorName(
                                    "_eq",
                                ): DataConnectorOperatorName(
                                    "_eq",
                                ),
                                OperatorName(
                                    "_gt",
                                ): DataConnectorOperatorName(
                                    "_gt",
                                ),
                                OperatorName(
                                    "_gte",
                                ): DataConnectorOperatorName(
                                    "_gte",
                                ),
                                OperatorName(
                                    "_in",
                                ): DataConnectorOperatorName(
                                    "_in",
                                ),
                                OperatorName(
                                    "_lt",
                                ): DataConnectorOperatorName(
                                    "_lt",
                                ),
                                OperatorName(
                                    "_lte",
                                ): DataConnectorOperatorName(
                                    "_lte",
                                ),
                                OperatorName(
                                    "_neq",
                                ): DataConnectorOperatorName(
                                    "_neq",
                                ),
                                OperatorName(
                                    "_nin",
                                ): DataConnectorOperatorName(
                                    "_nin",
                                ),
                            },
                        },
                    },
                    graphql_name: Some(
                        GraphQlTypeName(
                            "DateBoolExp",
                        ),
                    ),
                    logical_operators: Include {
                        graphql: Some(
                            LogicalOperatorsGraphqlConfig {
                                and_operator_name: Name(
                                    "_and",
                                ),
                                or_operator_name: Name(
                                    "_or",
                                ),
                                not_operator_name: Name(
                                    "_not",
                                ),
                            },
                        ),
                    },
                    is_null_operator: Include {
                        graphql: Some(
                            IsNullOperatorGraphqlConfig {
                                is_null_operator_name: Name(
                                    "_is_null",
                                ),
                            },
                        ),
                    },
                },
                FromBooleanExpressionType(
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "IntBoolExp",
                            ),
                        ),
                    },
                ): ResolvedScalarBooleanExpressionType {
                    operand_type: Inbuilt(
                        Int,
                    ),
                    comparison_operators: {
                        OperatorName(
                            "_eq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_gt",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_gte",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_in",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Inbuilt(
                                            Int,
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_lt",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_lte",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_neq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_nin",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Inbuilt(
                                            Int,
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                    },
                    data_connector_operator_mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                        }: DataConnectorOperatorMapping {
                            data_connector_name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                            data_connector_scalar_type: DataConnectorScalarType(
                                "Int",
                            ),
                            operator_mapping: {
                                OperatorName(
                                    "_eq",
                                ): DataConnectorOperatorName(
                                    "_eq",
                                ),
                                OperatorName(
                                    "_gt",
                                ): DataConnectorOperatorName(
                                    "_gt",
                                ),
                                OperatorName(
                                    "_gte",
                                ): DataConnectorOperatorName(
                                    "_gte",
                                ),
                                OperatorName(
                                    "_in",
                                ): DataConnectorOperatorName(
                                    "_in",
                                ),
                                OperatorName(
                                    "_lt",
                                ): DataConnectorOperatorName(
                                    "_lt",
                                ),
                                OperatorName(
                                    "_lte",
                                ): DataConnectorOperatorName(
                                    "_lte",
                                ),
                                OperatorName(
                                    "_neq",
                                ): DataConnectorOperatorName(
                                    "_neq",
                                ),
                                OperatorName(
                                    "_nin",
                                ): DataConnectorOperatorName(
                                    "_nin",
                                ),
                            },
                        },
                    },
                    graphql_name: Some(
                        GraphQlTypeName(
                            "IntBoolExp",
                        ),
                    ),
                    logical_operators: Include {
                        graphql: Some(
                            LogicalOperatorsGraphqlConfig {
                                and_operator_name: Name(
                                    "_and",
                                ),
                                or_operator_name: Name(
                                    "_or",
                                ),
                                not_operator_name: Name(
                                    "_not",
                                ),
                            },
                        ),
                    },
                    is_null_operator: Include {
                        graphql: Some(
                            IsNullOperatorGraphqlConfig {
                                is_null_operator_name: Name(
                                    "_is_null",
                                ),
                            },
                        ),
                    },
                },
                FromBooleanExpressionType(
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "ObjectIdBoolExp",
                            ),
                        ),
                    },
                ): ResolvedScalarBooleanExpressionType {
                    operand_type: Custom(
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: CustomTypeName(
                                Identifier(
                                    "ObjectId",
                                ),
                            ),
                        },
                    ),
                    comparison_operators: {
                        OperatorName(
                            "_eq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "ObjectId",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_in",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Custom(
                                            Qualified {
                                                subgraph: SubgraphName(
                                                    "app",
                                                ),
                                                name: CustomTypeName(
                                                    Identifier(
                                                        "ObjectId",
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_neq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Custom(
                                    Qualified {
                                        subgraph: SubgraphName(
                                            "app",
                                        ),
                                        name: CustomTypeName(
                                            Identifier(
                                                "ObjectId",
                                            ),
                                        ),
                                    },
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_nin",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Custom(
                                            Qualified {
                                                subgraph: SubgraphName(
                                                    "app",
                                                ),
                                                name: CustomTypeName(
                                                    Identifier(
                                                        "ObjectId",
                                                    ),
                                                ),
                                            },
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                    },
                    data_connector_operator_mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                        }: DataConnectorOperatorMapping {
                            data_connector_name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                            data_connector_scalar_type: DataConnectorScalarType(
                                "ObjectId",
                            ),
                            operator_mapping: {
                                OperatorName(
                                    "_eq",
                                ): DataConnectorOperatorName(
                                    "_eq",
                                ),
                                OperatorName(
                                    "_in",
                                ): DataConnectorOperatorName(
                                    "_in",
                                ),
                                OperatorName(
                                    "_neq",
                                ): DataConnectorOperatorName(
                                    "_neq",
                                ),
                                OperatorName(
                                    "_nin",
                                ): DataConnectorOperatorName(
                                    "_nin",
                                ),
                            },
                        },
                    },
                    graphql_name: Some(
                        GraphQlTypeName(
                            "ObjectIdBoolExp",
                        ),
                    ),
                    logical_operators: Include {
                        graphql: Some(
                            LogicalOperatorsGraphqlConfig {
                                and_operator_name: Name(
                                    "_and",
                                ),
                                or_operator_name: Name(
                                    "_or",
                                ),
                                not_operator_name: Name(
                                    "_not",
                                ),
                            },
                        ),
                    },
                    is_null_operator: Include {
                        graphql: Some(
                            IsNullOperatorGraphqlConfig {
                                is_null_operator_name: Name(
                                    "_is_null",
                                ),
                            },
                        ),
                    },
                },
                FromBooleanExpressionType(
                    Qualified {
                        subgraph: SubgraphName(
                            "app",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "StringBoolExp",
                            ),
                        ),
                    },
                ): ResolvedScalarBooleanExpressionType {
                    operand_type: Inbuilt(
                        String,
                    ),
                    comparison_operators: {
                        OperatorName(
                            "_eq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_gt",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_gte",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_in",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Inbuilt(
                                            String,
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_iregex",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_lt",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_lte",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_neq",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_nin",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Inbuilt(
                                            String,
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "_regex",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                    },
                    data_connector_operator_mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "app",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                        }: DataConnectorOperatorMapping {
                            data_connector_name: DataConnectorName(
                                Identifier(
                                    "mongo",
                                ),
                            ),
                            data_connector_scalar_type: DataConnectorScalarType(
                                "String",
                            ),
                            operator_mapping: {
                                OperatorName(
                                    "_eq",
                                ): DataConnectorOperatorName(
                                    "_eq",
                                ),
                                OperatorName(
                                    "_gt",
                                ): DataConnectorOperatorName(
                                    "_gt",
                                ),
                                OperatorName(
                                    "_gte",
                                ): DataConnectorOperatorName(
                                    "_gte",
                                ),
                                OperatorName(
                                    "_in",
                                ): DataConnectorOperatorName(
                                    "_in",
                                ),
                                OperatorName(
                                    "_iregex",
                                ): DataConnectorOperatorName(
                                    "_iregex",
                                ),
                                OperatorName(
                                    "_lt",
                                ): DataConnectorOperatorName(
                                    "_lt",
                                ),
                                OperatorName(
                                    "_lte",
                                ): DataConnectorOperatorName(
                                    "_lte",
                                ),
                                OperatorName(
                                    "_neq",
                                ): DataConnectorOperatorName(
                                    "_neq",
                                ),
                                OperatorName(
                                    "_nin",
                                ): DataConnectorOperatorName(
                                    "_nin",
                                ),
                                OperatorName(
                                    "_regex",
                                ): DataConnectorOperatorName(
                                    "_regex",
                                ),
                            },
                        },
                    },
                    graphql_name: Some(
                        GraphQlTypeName(
                            "StringBoolExp",
                        ),
                    ),
                    logical_operators: Include {
                        graphql: Some(
                            LogicalOperatorsGraphqlConfig {
                                and_operator_name: Name(
                                    "_and",
                                ),
                                or_operator_name: Name(
                                    "_or",
                                ),
                                not_operator_name: Name(
                                    "_not",
                                ),
                            },
                        ),
                    },
                    is_null_operator: Include {
                        graphql: Some(
                            IsNullOperatorGraphqlConfig {
                                is_null_operator_name: Name(
                                    "_is_null",
                                ),
                            },
                        ),
                    },
                },
            },
            object_aggregates: {},
            scalar_aggregates: {},
        },
        order_by_expressions: OrderByExpressions {
            objects: {},
            scalars: {},
        },
        aggregate_expressions: {},
        graphql_config: GlobalGraphqlConfig {
            query_root_type_name: TypeName(
                Name(
                    "Query",
                ),
            ),
            mutation_root_type_name: TypeName(
                Name(
                    "Mutation",
                ),
            ),
            subscription_root_type_name: None,
            order_by_input: Some(
                OrderByInputGraphqlConfig {
                    asc_direction_field_value: Name(
                        "Asc",
                    ),
                    desc_direction_field_value: Name(
                        "Desc",
                    ),
                    enum_type_name: TypeName(
                        Name(
                            "order_by",
                        ),
                    ),
                },
            ),
            enable_apollo_federation_fields: false,
            bypass_relation_comparisons_ndc_capability: true,
            propagate_boolean_expression_deprecation_status: true,
            multiple_order_by_input_object_fields: Disallow,
        },
        plugin_configs: LifecyclePluginConfigs {
            pre_parse_plugins: [],
            pre_response_plugins: [],
            pre_route_plugins: [],
        },
        roles: {
            Role(
                "admin",
            ),
        },
        runtime_flags: RuntimeFlags(
            {},
        ),
    },
    [],
)
