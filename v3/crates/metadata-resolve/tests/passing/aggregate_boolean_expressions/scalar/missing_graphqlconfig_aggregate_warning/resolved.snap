---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/aggregate_boolean_expressions/scalar/missing_graphqlconfig_aggregate_warning/metadata.json
---
(
    Metadata {
        object_types: {},
        scalar_types: {},
        models: {},
        commands: {},
        object_boolean_expression_types: {},
        boolean_expression_types: BooleanExpressionTypes {
            objects: {},
            scalars: {
                Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "Int_bool_exp",
                        ),
                    ),
                }: ResolvedScalarBooleanExpressionType {
                    name: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "Int_bool_exp",
                            ),
                        ),
                    },
                    operand_type: Inbuilt(
                        Int,
                    ),
                    comparison_operators: {},
                    data_connector_operator_mappings: {},
                    graphql_name: Some(
                        GraphQlTypeName(
                            "Int_bool_exp",
                        ),
                    ),
                    include_is_null: Yes,
                },
                Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "String_bool_exp",
                        ),
                    ),
                }: ResolvedScalarBooleanExpressionType {
                    name: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "String_bool_exp",
                            ),
                        ),
                    },
                    operand_type: Inbuilt(
                        String,
                    ),
                    comparison_operators: {},
                    data_connector_operator_mappings: {},
                    graphql_name: Some(
                        GraphQlTypeName(
                            "String_bool_exp",
                        ),
                    ),
                    include_is_null: Yes,
                },
            },
            object_aggregates: {},
            scalar_aggregates: {
                Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "String_aggregate_bool_exp",
                        ),
                    ),
                }: ScalarAggregateBooleanExpression {
                    operand_type: Inbuilt(
                        String,
                    ),
                    aggregate_expression: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: AggregateExpressionName(
                            Identifier(
                                "String_agg_exp",
                            ),
                        ),
                    },
                    aggregation_functions: [
                        ComparableAggregationFunction {
                            aggregate_function_name: AggregationFunctionName(
                                Identifier(
                                    "_min",
                                ),
                            ),
                            description: Some(
                                "The lexicographically least string",
                            ),
                            boolean_expression_type: Qualified {
                                subgraph: SubgraphName(
                                    "default",
                                ),
                                name: CustomTypeName(
                                    Identifier(
                                        "String_bool_exp",
                                    ),
                                ),
                            },
                        },
                    ],
                    count_aggregation: Some(
                        ComparableCountAggregation {
                            boolean_expression_type: Qualified {
                                subgraph: SubgraphName(
                                    "default",
                                ),
                                name: CustomTypeName(
                                    Identifier(
                                        "Int_bool_exp",
                                    ),
                                ),
                            },
                            graphql: None,
                        },
                    ),
                    count_distinct_aggregation: Some(
                        ComparableCountAggregation {
                            boolean_expression_type: Qualified {
                                subgraph: SubgraphName(
                                    "default",
                                ),
                                name: CustomTypeName(
                                    Identifier(
                                        "Int_bool_exp",
                                    ),
                                ),
                            },
                            graphql: None,
                        },
                    ),
                    logical_operators: Include {
                        graphql: Some(
                            LogicalOperatorsGraphqlConfig {
                                and_operator_name: Name(
                                    "_and",
                                ),
                                or_operator_name: Name(
                                    "_or",
                                ),
                                not_operator_name: Name(
                                    "_not",
                                ),
                            },
                        ),
                    },
                    graphql: Some(
                        AggregateBooleanExpressionGraphqlConfig {
                            type_name: TypeName(
                                Name(
                                    "String_aggregate_bool_exp",
                                ),
                            ),
                        },
                    ),
                },
            },
        },
        order_by_expressions: OrderByExpressions {
            objects: {},
        },
        aggregate_expressions: {
            Qualified {
                subgraph: SubgraphName(
                    "default",
                ),
                name: AggregateExpressionName(
                    Identifier(
                        "String_agg_exp",
                    ),
                ),
            }: AggregateExpression {
                name: Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: AggregateExpressionName(
                        Identifier(
                            "String_agg_exp",
                        ),
                    ),
                },
                operand: AggregateOperand {
                    aggregated_type: Inbuilt(
                        String,
                    ),
                    aggregatable_fields: [],
                    aggregation_functions: [
                        AggregationFunctionInfo {
                            name: AggregationFunctionName(
                                Identifier(
                                    "_min",
                                ),
                            ),
                            description: Some(
                                "The lexicographically least string",
                            ),
                            return_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            data_connector_functions: [],
                        },
                    ],
                },
                count: AggregateCountDefinition {
                    enable: true,
                    description: None,
                },
                count_distinct: AggregateCountDefinition {
                    enable: true,
                    description: None,
                },
                graphql: None,
                description: None,
            },
        },
        graphql_config: GlobalGraphqlConfig {
            query_root_type_name: TypeName(
                Name(
                    "Query",
                ),
            ),
            mutation_root_type_name: TypeName(
                Name(
                    "Mutation",
                ),
            ),
            subscription_root_type_name: None,
            order_by_input: Some(
                OrderByInputGraphqlConfig {
                    asc_direction_field_value: Name(
                        "Asc",
                    ),
                    desc_direction_field_value: Name(
                        "Desc",
                    ),
                    enum_type_name: TypeName(
                        Name(
                            "OrderBy",
                        ),
                    ),
                },
            ),
            enable_apollo_federation_fields: false,
            bypass_relation_comparisons_ndc_capability: true,
            propagate_boolean_expression_deprecation_status: true,
        },
        plugin_configs: LifecyclePluginConfigs {
            pre_parse_plugins: [],
            pre_response_plugins: [],
        },
        roles: [],
    },
    [
        AggregateBooleanExpressionIssue(
            NamedAggregateBooleanExpressionIssue {
                type_name: Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "String_aggregate_bool_exp",
                        ),
                    ),
                },
                issue: MissingCountAggregationNamesInGraphqlConfig {
                    count_type: Count,
                },
            },
        ),
        AggregateBooleanExpressionIssue(
            NamedAggregateBooleanExpressionIssue {
                type_name: Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "String_aggregate_bool_exp",
                        ),
                    ),
                },
                issue: MissingCountAggregationNamesInGraphqlConfig {
                    count_type: CountDistinct,
                },
            },
        ),
    ],
)
