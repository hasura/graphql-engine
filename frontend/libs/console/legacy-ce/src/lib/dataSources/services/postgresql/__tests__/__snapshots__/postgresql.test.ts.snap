// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`postgresql datasource tests getAlterColumnCommentSql should generate SQL for modifying column comment 1`] = `
"
  comment on column \\"public\\".\\"users\\".\\"id\\" is E'user\\\\'s comment'
"
`;

exports[`postgresql datasource tests getAlterFunctionCommentSql should generate SQL for modifying function comment 1`] = `
"
comment on function \\"public\\".\\"users\\" is E'user\\\\'s comment'
"
`;

exports[`postgresql datasource tests getAlterPkSql should generate alter operation as a single transaction  1`] = `
"BEGIN TRANSACTION;
ALTER TABLE \\"public\\".\\"users\\" DROP CONSTRAINT \\"PK__users__1234\\";

ALTER TABLE \\"public\\".\\"users\\"
    ADD CONSTRAINT \\"PK__users__1234\\" PRIMARY KEY (\\"id\\");
COMMIT TRANSACTION;"
`;

exports[`postgresql datasource tests getAlterPkSql should work with multi-column PKs  1`] = `
"BEGIN TRANSACTION;
ALTER TABLE \\"public\\".\\"users\\" DROP CONSTRAINT \\"test_constraint\\";

ALTER TABLE \\"public\\".\\"users\\"
    ADD CONSTRAINT \\"test_constraint\\" PRIMARY KEY (\\"id\\", \\"account\\");
COMMIT TRANSACTION;"
`;

exports[`postgresql datasource tests getAlterTableCommentSql should generate SQL for modifying table comment 1`] = `"comment on table \\"public\\".\\"users\\" is E'user\\\\'s comment'"`;

exports[`postgresql datasource tests getAlterViewCommentSql should generate SQL for modifying view comment 1`] = `"comment on view \\"public\\".\\"view_users\\" is E'user\\\\'s comment'"`;

exports[`postgresql datasource tests getDataTriggerInvocations should generate SQL to fetch invocations for an event 1`] = `
"SELECT *
    FROM \\"hdb_catalog\\".\\"event_invocation_logs\\"
    WHERE event_id = '298f6a71-f503-46f1-814c-45daef0afe4d'
    ORDER BY created_at DESC NULLS LAST;"
`;

exports[`postgresql datasource tests getDataTriggerLogsCountQuery should generate SQL query for invocation event count 1`] = `
"SELECT
      COUNT(*)
      FROM \\"hdb_catalog\\".\\"event_invocation_logs\\" original_table 
      LEFT JOIN \\"hdb_catalog\\".\\"event_log\\" data_table
      ON original_table.event_id = data_table.id
      WHERE data_table.trigger_name = 'test_event' OR original_table.trigger_name = 'test_event' "
`;

exports[`postgresql datasource tests getDataTriggerLogsCountQuery should generate SQL query for pending event count  1`] = `
"SELECT
	COUNT(*)
  FROM \\"hdb_catalog\\".\\"event_log\\" data_table
  WHERE data_table.trigger_name = 'new_user' AND delivered=false AND error=false AND archived=false;"
`;

exports[`postgresql datasource tests getDataTriggerLogsCountQuery should generate SQL query for processed event count 1`] = `
"SELECT
	COUNT(*)
  FROM \\"hdb_catalog\\".\\"event_log\\" data_table
  WHERE data_table.trigger_name = 'new_user' AND (delivered=true OR error=true) AND archived=false;"
`;

exports[`postgresql datasource tests getDataTriggerLogsQuery should generate SQL query for event invocation logs 1`] = `
"SELECT *
      FROM \\"hdb_catalog\\".\\"event_log\\" data_table 
      WHERE data_table.trigger_name = 'test_event' 
      AND (delivered=true OR error=true) AND archived=false ORDER BY created_at DESC  LIMIT 100 OFFSET 0;"
`;

exports[`postgresql datasource tests getDataTriggerLogsQuery should generate SQL query for pending event logs 1`] = `
"SELECT *
      FROM \\"hdb_catalog\\".\\"event_log\\" data_table
      WHERE data_table.trigger_name = 'new_user'  
      AND delivered=false AND error=false AND archived=false ORDER BY created_at DESC  LIMIT 10 OFFSET 10;"
`;

exports[`postgresql datasource tests getDataTriggerLogsQuery should generate SQL query for processed event logs 1`] = `
"SELECT *
      FROM \\"hdb_catalog\\".\\"event_log\\" data_table 
      WHERE data_table.trigger_name = 'test_event' 
      AND (delivered=true OR error=true) AND archived=false ORDER BY created_at DESC  LIMIT 100 OFFSET 0;"
`;
