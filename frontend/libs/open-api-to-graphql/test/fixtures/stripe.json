{
  "components": {
    "schemas": {
      "account": {
        "properties": {
          "business_profile": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/account_business_profile"
              }
            ],
            "description": "Optional information related to the business.",
            "nullable": true
          },
          "business_type": {
            "description": "The business type. Can be `individual` or `company`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "capabilities": {
            "$ref": "#/components/schemas/account_capabilities"
          },
          "charges_enabled": {
            "description": "Whether the account can create live charges.",
            "type": "boolean"
          },
          "company": {
            "$ref": "#/components/schemas/legal_entity_company"
          },
          "country": {
            "description": "The account's country.",
            "maxLength": 5000,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "default_currency": {
            "description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).",
            "maxLength": 5000,
            "type": "string"
          },
          "details_submitted": {
            "description": "Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.",
            "type": "boolean"
          },
          "email": {
            "description": "The primary user's email address.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "external_accounts": {
            "description": "External accounts (bank accounts and debit cards) currently attached to this account",
            "properties": {
              "data": {
                "description": "The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/bank_account"
                    },
                    {
                      "$ref": "#/components/schemas/card"
                    }
                  ],
                  "title": "Polymorphic"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "ExternalAccountList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "individual": {
            "$ref": "#/components/schemas/person"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["account"],
            "type": "string"
          },
          "payouts_enabled": {
            "description": "Whether Stripe can send payouts to this account.",
            "type": "boolean"
          },
          "requirements": {
            "$ref": "#/components/schemas/account_requirements"
          },
          "settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/account_settings"
              }
            ],
            "description": "Options for customizing how the account functions within Stripe.",
            "nullable": true
          },
          "tos_acceptance": {
            "$ref": "#/components/schemas/account_tos_acceptance"
          },
          "type": {
            "description": "The Stripe account type. Can be `standard`, `express`, or `custom`.",
            "enum": ["custom", "express", "standard"],
            "type": "string"
          }
        },
        "required": ["id", "object"],
        "title": "Account",
        "type": "object",
        "x-expandableFields": [
          "business_profile",
          "capabilities",
          "company",
          "external_accounts",
          "individual",
          "requirements",
          "settings",
          "tos_acceptance"
        ],
        "x-resourceId": "account"
      },
      "account_branding_settings": {
        "properties": {
          "icon": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "logo": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "primary_color": {
            "description": "A CSS hex color value representing the primary branding color for this account",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "AccountBrandingSettings",
        "type": "object",
        "x-expandableFields": ["icon", "logo"]
      },
      "account_business_profile": {
        "properties": {
          "mcc": {
            "description": "The merchant category code for the account. MCCs are used to classify businesses based on the goods or services they provide.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The customer-facing business name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "product_description": {
            "description": "Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.",
            "maxLength": 40000,
            "nullable": true,
            "type": "string"
          },
          "support_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "A publicly available mailing address for sending support issues to.",
            "nullable": true
          },
          "support_email": {
            "description": "A publicly available email address for sending support issues to.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "support_phone": {
            "description": "A publicly available phone number to call with support issues.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "support_url": {
            "description": "A publicly available website for handling support issues.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The business's publicly available website.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "AccountBusinessProfile",
        "type": "object",
        "x-expandableFields": ["support_address"]
      },
      "account_capabilities": {
        "properties": {
          "card_issuing": {
            "description": "The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards",
            "enum": ["active", "inactive", "pending"],
            "type": "string"
          },
          "card_payments": {
            "description": "The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.",
            "enum": ["active", "inactive", "pending"],
            "type": "string"
          },
          "legacy_payments": {
            "description": "The status of the legacy payments capability of the account.",
            "enum": ["active", "inactive", "pending"],
            "type": "string"
          },
          "transfers": {
            "description": "The status of the transfers capability of the account, or whether your platform can transfer funds to the account.",
            "enum": ["active", "inactive", "pending"],
            "type": "string"
          }
        },
        "title": "AccountCapabilities",
        "type": "object",
        "x-expandableFields": []
      },
      "account_capability_requirements": {
        "properties": {
          "current_deadline": {
            "description": "The date the fields in `currently_due` must be collected by to keep the capability enabled for the account.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "currently_due": {
            "description": "The fields that need to be collected to keep the capability enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "disabled_reason": {
            "description": "If the capability is disabled, this string describes why. Possible values are `requirement.fields_needed`, `pending.onboarding`, `pending.review`, `rejected_fraud`, or `rejected.other`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "eventually_due": {
            "description": "The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "past_due": {
            "description": "The fields that weren't collected by the `current_deadline`. These fields need to be collected to enable the capability for the account.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "pending_verification": {
            "description": "Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "currently_due",
          "eventually_due",
          "past_due",
          "pending_verification"
        ],
        "title": "AccountCapabilityRequirements",
        "type": "object",
        "x-expandableFields": []
      },
      "account_card_payments_settings": {
        "properties": {
          "decline_on": {
            "$ref": "#/components/schemas/account_decline_charge_on"
          },
          "statement_descriptor_prefix": {
            "description": "The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "AccountCardPaymentsSettings",
        "type": "object",
        "x-expandableFields": ["decline_on"]
      },
      "account_dashboard_settings": {
        "properties": {
          "display_name": {
            "description": "The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "timezone": {
            "description": "The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "AccountDashboardSettings",
        "type": "object",
        "x-expandableFields": []
      },
      "account_decline_charge_on": {
        "properties": {
          "avs_failure": {
            "description": "Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.",
            "type": "boolean"
          },
          "cvc_failure": {
            "description": "Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.",
            "type": "boolean"
          }
        },
        "required": ["avs_failure", "cvc_failure"],
        "title": "AccountDeclineChargeOn",
        "type": "object",
        "x-expandableFields": []
      },
      "account_link": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "expires_at": {
            "description": "The timestamp at which this account link will expire.",
            "format": "unix-time",
            "type": "integer"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["account_link"],
            "type": "string"
          },
          "url": {
            "description": "The URL for the account link.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["created", "expires_at", "object", "url"],
        "title": "AccountLink",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "account_link"
      },
      "account_payments_settings": {
        "properties": {
          "statement_descriptor": {
            "description": "The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor_kana": {
            "description": "The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor_kanji": {
            "description": "The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "AccountPaymentsSettings",
        "type": "object",
        "x-expandableFields": []
      },
      "account_payout_settings": {
        "properties": {
          "debit_negative_balances": {
            "description": "A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts.",
            "type": "boolean"
          },
          "schedule": {
            "$ref": "#/components/schemas/transfer_schedule"
          },
          "statement_descriptor": {
            "description": "The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["debit_negative_balances", "schedule"],
        "title": "AccountPayoutSettings",
        "type": "object",
        "x-expandableFields": ["schedule"]
      },
      "account_requirements": {
        "properties": {
          "current_deadline": {
            "description": "The date the fields in `currently_due` must be collected by to keep payouts enabled for the account. These fields might block payouts sooner if the next threshold is reached before these fields are collected.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "currently_due": {
            "description": "The fields that need to be collected to keep the account enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "disabled_reason": {
            "description": "If the account is disabled, this string describes why the account can’t create charges or receive payouts. Can be `requirements.past_due`, `requirements.pending_verification`, `rejected.fraud`, `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`, `under_review`, or `other`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "eventually_due": {
            "description": "The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "past_due": {
            "description": "The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "pending_verification": {
            "description": "Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "AccountRequirements",
        "type": "object",
        "x-expandableFields": []
      },
      "account_settings": {
        "properties": {
          "branding": {
            "$ref": "#/components/schemas/account_branding_settings"
          },
          "card_payments": {
            "$ref": "#/components/schemas/account_card_payments_settings"
          },
          "dashboard": {
            "$ref": "#/components/schemas/account_dashboard_settings"
          },
          "payments": {
            "$ref": "#/components/schemas/account_payments_settings"
          },
          "payouts": {
            "$ref": "#/components/schemas/account_payout_settings"
          }
        },
        "required": ["branding", "card_payments", "dashboard", "payments"],
        "title": "AccountSettings",
        "type": "object",
        "x-expandableFields": [
          "branding",
          "card_payments",
          "dashboard",
          "payments",
          "payouts"
        ]
      },
      "account_tos_acceptance": {
        "properties": {
          "date": {
            "description": "The Unix timestamp marking when the Stripe Services Agreement was accepted by the account representative",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "ip": {
            "description": "The IP address from which the Stripe Services Agreement was accepted by the account representative",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "user_agent": {
            "description": "The user agent of the browser from which the Stripe Services Agreement was accepted by the account representative",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "AccountTOSAcceptance",
        "type": "object",
        "x-expandableFields": []
      },
      "address": {
        "properties": {
          "city": {
            "description": "City/District/Suburb/Town/Village.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "2-letter country code.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "line1": {
            "description": "Address line 1 (Street address/PO Box/Company name).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "line2": {
            "description": "Address line 2 (Apartment/Suite/Unit/Building).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "description": "ZIP or postal code.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "State/County/Province/Region.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "Address",
        "type": "object",
        "x-expandableFields": []
      },
      "alipay_account": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "fingerprint": {
            "description": "Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["alipay_account"],
            "type": "string"
          },
          "payment_amount": {
            "description": "If the Alipay account object is not reusable, the exact amount that you can create a charge for.",
            "nullable": true,
            "type": "integer"
          },
          "payment_currency": {
            "description": "If the Alipay account object is not reusable, the exact currency that you can create a charge for.",
            "nullable": true,
            "type": "string"
          },
          "reusable": {
            "description": "True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.",
            "type": "boolean"
          },
          "used": {
            "description": "Whether this Alipay account object has ever been used for a payment.",
            "type": "boolean"
          },
          "username": {
            "description": "The username for the Alipay account.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "created",
          "fingerprint",
          "id",
          "livemode",
          "object",
          "reusable",
          "used",
          "username"
        ],
        "title": "AlipayAccount",
        "type": "object",
        "x-expandableFields": ["customer"],
        "x-resourceId": "alipay_account"
      },
      "api_errors": {
        "properties": {
          "charge": {
            "description": "For card errors, the ID of the failed charge.",
            "maxLength": 5000,
            "type": "string"
          },
          "code": {
            "description": "For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.",
            "maxLength": 5000,
            "type": "string"
          },
          "decline_code": {
            "description": "For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.",
            "maxLength": 5000,
            "type": "string"
          },
          "doc_url": {
            "description": "A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.",
            "maxLength": 5000,
            "type": "string"
          },
          "message": {
            "description": "A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.",
            "maxLength": 40000,
            "type": "string"
          },
          "param": {
            "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
            "maxLength": 5000,
            "type": "string"
          },
          "payment_intent": {
            "$ref": "#/components/schemas/payment_intent"
          },
          "payment_method": {
            "$ref": "#/components/schemas/payment_method"
          },
          "setup_intent": {
            "$ref": "#/components/schemas/setup_intent"
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/bank_account"
              },
              {
                "$ref": "#/components/schemas/card"
              },
              {
                "$ref": "#/components/schemas/source"
              }
            ],
            "description": "The source object for errors returned on a request involving a source."
          },
          "type": {
            "description": "The type of error returned. One of `api_connection_error`, `api_error`, `authentication_error`, `card_error`, `idempotency_error`, `invalid_request_error`, or `rate_limit_error`",
            "enum": [
              "api_connection_error",
              "api_error",
              "authentication_error",
              "card_error",
              "idempotency_error",
              "invalid_request_error",
              "rate_limit_error"
            ],
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "APIErrors",
        "type": "object",
        "x-expandableFields": [
          "payment_intent",
          "payment_method",
          "setup_intent",
          "source"
        ]
      },
      "apple_pay_domain": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "domain_name": {
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["apple_pay_domain"],
            "type": "string"
          }
        },
        "required": ["created", "domain_name", "id", "livemode", "object"],
        "title": "ApplePayDomain",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "apple_pay_domain"
      },
      "application": {
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "name": {
            "description": "The name of the application.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["application"],
            "type": "string"
          }
        },
        "required": ["id", "object"],
        "title": "Application",
        "type": "object",
        "x-expandableFields": []
      },
      "application_fee": {
        "properties": {
          "account": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "ID of the Stripe account this fee was taken from.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "amount": {
            "description": "Amount earned, in %s.",
            "type": "integer"
          },
          "amount_refunded": {
            "description": "Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)",
            "type": "integer"
          },
          "application": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/application"
              }
            ],
            "description": "ID of the Connect application that earned the fee.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/application"
                }
              ]
            }
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the charge that the application fee was taken from.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["application_fee"],
            "type": "string"
          },
          "originating_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "refunded": {
            "description": "Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.",
            "type": "boolean"
          },
          "refunds": {
            "description": "A list of refunds that have been applied to the fee.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/fee_refund"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "FeeRefundList",
            "type": "object",
            "x-expandableFields": ["data"]
          }
        },
        "required": [
          "account",
          "amount",
          "amount_refunded",
          "application",
          "charge",
          "created",
          "currency",
          "id",
          "livemode",
          "object",
          "refunded",
          "refunds"
        ],
        "title": "PlatformFee",
        "type": "object",
        "x-expandableFields": [
          "account",
          "application",
          "balance_transaction",
          "charge",
          "originating_transaction",
          "refunds"
        ],
        "x-resourceId": "application_fee"
      },
      "balance": {
        "properties": {
          "available": {
            "description": "Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](#transfers) or [Payouts API](#payouts). The available balance for each currency and payment type can be found in the `source_types` property.",
            "items": {
              "$ref": "#/components/schemas/balance_amount"
            },
            "type": "array"
          },
          "connect_reserved": {
            "description": "Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property.",
            "items": {
              "$ref": "#/components/schemas/balance_amount"
            },
            "type": "array"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["balance"],
            "type": "string"
          },
          "pending": {
            "description": "Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property.",
            "items": {
              "$ref": "#/components/schemas/balance_amount"
            },
            "type": "array"
          }
        },
        "required": ["available", "livemode", "object", "pending"],
        "title": "Balance",
        "type": "object",
        "x-expandableFields": ["available", "connect_reserved", "pending"],
        "x-resourceId": "balance"
      },
      "balance_amount": {
        "properties": {
          "amount": {
            "description": "Balance amount.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "source_types": {
            "$ref": "#/components/schemas/balance_amount_by_source_type"
          }
        },
        "required": ["amount", "currency"],
        "title": "BalanceAmount",
        "type": "object",
        "x-expandableFields": ["source_types"]
      },
      "balance_amount_by_source_type": {
        "properties": {
          "bank_account": {
            "description": "Amount for bank account.",
            "type": "integer"
          },
          "card": {
            "description": "Amount for card.",
            "type": "integer"
          }
        },
        "title": "BalanceAmountBySourceType",
        "type": "object",
        "x-expandableFields": []
      },
      "balance_transaction": {
        "properties": {
          "amount": {
            "description": "Gross amount of the transaction, in %s.",
            "type": "integer"
          },
          "available_on": {
            "description": "The date the transaction's net funds will become available in the Stripe balance.",
            "format": "unix-time",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "exchange_rate": {
            "nullable": true,
            "type": "number"
          },
          "fee": {
            "description": "Fees (in %s) paid for this transaction.",
            "type": "integer"
          },
          "fee_details": {
            "description": "Detailed breakdown of fees (in %s) paid for this transaction.",
            "items": {
              "$ref": "#/components/schemas/fee"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "net": {
            "description": "Net amount of the transaction, in %s.",
            "type": "integer"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["balance_transaction"],
            "type": "string"
          },
          "source": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/application_fee"
              },
              {
                "$ref": "#/components/schemas/charge"
              },
              {
                "$ref": "#/components/schemas/connect_collection_transfer"
              },
              {
                "$ref": "#/components/schemas/dispute"
              },
              {
                "$ref": "#/components/schemas/fee_refund"
              },
              {
                "$ref": "#/components/schemas/issuing.authorization"
              },
              {
                "$ref": "#/components/schemas/issuing.transaction"
              },
              {
                "$ref": "#/components/schemas/payout"
              },
              {
                "$ref": "#/components/schemas/platform_tax_fee"
              },
              {
                "$ref": "#/components/schemas/refund"
              },
              {
                "$ref": "#/components/schemas/reserve_transaction"
              },
              {
                "$ref": "#/components/schemas/tax_deducted_at_source"
              },
              {
                "$ref": "#/components/schemas/topup"
              },
              {
                "$ref": "#/components/schemas/transfer"
              },
              {
                "$ref": "#/components/schemas/transfer_reversal"
              }
            ],
            "description": "The Stripe object to which this transaction is related.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/application_fee"
                },
                {
                  "$ref": "#/components/schemas/charge"
                },
                {
                  "$ref": "#/components/schemas/connect_collection_transfer"
                },
                {
                  "$ref": "#/components/schemas/dispute"
                },
                {
                  "$ref": "#/components/schemas/fee_refund"
                },
                {
                  "$ref": "#/components/schemas/issuing.authorization"
                },
                {
                  "$ref": "#/components/schemas/issuing.transaction"
                },
                {
                  "$ref": "#/components/schemas/payout"
                },
                {
                  "$ref": "#/components/schemas/platform_tax_fee"
                },
                {
                  "$ref": "#/components/schemas/refund"
                },
                {
                  "$ref": "#/components/schemas/reserve_transaction"
                },
                {
                  "$ref": "#/components/schemas/tax_deducted_at_source"
                },
                {
                  "$ref": "#/components/schemas/topup"
                },
                {
                  "$ref": "#/components/schemas/transfer"
                },
                {
                  "$ref": "#/components/schemas/transfer_reversal"
                }
              ]
            }
          },
          "status": {
            "description": "If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.",
            "maxLength": 5000,
            "type": "string"
          },
          "type": {
            "description": "Transaction type: `adjustment`, `advance`, `advance_funding`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent.",
            "enum": [
              "adjustment",
              "advance",
              "advance_funding",
              "application_fee",
              "application_fee_refund",
              "charge",
              "connect_collection_transfer",
              "issuing_authorization_hold",
              "issuing_authorization_release",
              "issuing_transaction",
              "payment",
              "payment_failure_refund",
              "payment_refund",
              "payout",
              "payout_cancel",
              "payout_failure",
              "refund",
              "refund_failure",
              "reserve_transaction",
              "reserved_funds",
              "stripe_fee",
              "stripe_fx_fee",
              "tax_fee",
              "topup",
              "topup_reversal",
              "transfer",
              "transfer_cancel",
              "transfer_failure",
              "transfer_refund"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "available_on",
          "created",
          "currency",
          "fee",
          "fee_details",
          "id",
          "net",
          "object",
          "status",
          "type"
        ],
        "title": "BalanceTransaction",
        "type": "object",
        "x-expandableFields": ["fee_details", "source"],
        "x-resourceId": "balance_transaction"
      },
      "bank_account": {
        "properties": {
          "account": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "account_holder_name": {
            "description": "The name of the person or business that owns the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "account_holder_type": {
            "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "description": "Name of the bank associated with the routing number (e.g., `WELLS FARGO`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country the bank account is located in.",
            "maxLength": 5000,
            "type": "string"
          },
          "currency": {
            "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "default_for_currency": {
            "description": "Whether this bank account is the default external account for its currency.",
            "nullable": true,
            "type": "boolean"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "last4": {
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "nullable": true,
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["bank_account"],
            "type": "string"
          },
          "routing_number": {
            "description": "The routing transit number for the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.\n\nFor external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["country", "currency", "id", "last4", "object", "status"],
        "title": "BankAccount",
        "type": "object",
        "x-expandableFields": ["account", "customer"],
        "x-resourceId": "bank_account"
      },
      "billing_details": {
        "properties": {
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Billing address.",
            "nullable": true
          },
          "email": {
            "description": "Email address.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Full name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "description": "Billing phone number (including extension).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "billing_details",
        "type": "object",
        "x-expandableFields": ["address"]
      },
      "bitcoin_receiver": {
        "properties": {
          "active": {
            "description": "True when this bitcoin receiver has received a non-zero amount of bitcoin.",
            "type": "boolean"
          },
          "amount": {
            "description": "The amount of `currency` that you are collecting as payment.",
            "type": "integer"
          },
          "amount_received": {
            "description": "The amount of `currency` to which `bitcoin_amount_received` has been converted.",
            "type": "integer"
          },
          "bitcoin_amount": {
            "description": "The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.",
            "type": "integer"
          },
          "bitcoin_amount_received": {
            "description": "The amount of bitcoin that has been sent by the customer to this receiver.",
            "type": "integer"
          },
          "bitcoin_uri": {
            "description": "This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).",
            "maxLength": 5000,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted.",
            "type": "string"
          },
          "customer": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "email": {
            "description": "The customer's email address, set by the API call that creates the receiver.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "filled": {
            "description": "This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "inbound_address": {
            "description": "A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["bitcoin_receiver"],
            "type": "string"
          },
          "payment": {
            "description": "The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "refund_address": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "transactions": {
            "description": "A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/bitcoin_transaction"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "BitcoinTransactionList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "uncaptured_funds": {
            "description": "This receiver contains uncaptured funds that can be used for a payment or refunded.",
            "type": "boolean"
          },
          "used_for_payment": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "active",
          "amount",
          "amount_received",
          "bitcoin_amount",
          "bitcoin_amount_received",
          "bitcoin_uri",
          "created",
          "currency",
          "filled",
          "id",
          "inbound_address",
          "livemode",
          "metadata",
          "object",
          "uncaptured_funds"
        ],
        "title": "BitcoinReceiver",
        "type": "object",
        "x-expandableFields": ["transactions"],
        "x-resourceId": "bitcoin_receiver"
      },
      "bitcoin_transaction": {
        "properties": {
          "amount": {
            "description": "The amount of `currency` that the transaction was converted to in real-time.",
            "type": "integer"
          },
          "bitcoin_amount": {
            "description": "The amount of bitcoin contained in the transaction.",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["bitcoin_transaction"],
            "type": "string"
          },
          "receiver": {
            "description": "The receiver to which this transaction was sent.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "bitcoin_amount",
          "created",
          "currency",
          "id",
          "object",
          "receiver"
        ],
        "title": "BitcoinTransaction",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "bitcoin_transaction"
      },
      "capability": {
        "properties": {
          "account": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "The account for which the capability enables functionality.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "id": {
            "description": "The identifier for the capability.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["capability"],
            "type": "string"
          },
          "requested": {
            "description": "Whether the capability has been requested.",
            "type": "boolean"
          },
          "requested_at": {
            "description": "Time at which the capability was requested. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "requirements": {
            "$ref": "#/components/schemas/account_capability_requirements"
          },
          "status": {
            "description": "The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.",
            "enum": [
              "active",
              "disabled",
              "inactive",
              "pending",
              "unrequested"
            ],
            "type": "string"
          }
        },
        "required": ["account", "id", "object", "requested", "status"],
        "title": "AccountCapability",
        "type": "object",
        "x-expandableFields": ["account", "requirements"],
        "x-resourceId": "capability"
      },
      "card": {
        "properties": {
          "account": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "address_city": {
            "description": "City/District/Suburb/Town/Village.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_country": {
            "description": "Billing address country, if provided when creating card.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_line1": {
            "description": "Address line 1 (Street address/PO Box/Company name).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_line1_check": {
            "description": "If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_line2": {
            "description": "Address line 2 (Apartment/Suite/Unit/Building).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_state": {
            "description": "State/County/Province/Region.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_zip": {
            "description": "ZIP or postal code.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_zip_check": {
            "description": "If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "available_payout_methods": {
            "description": "A set of available payout methods for this card. Will be either `[\"standard\"]` or `[\"standard\", \"instant\"]`. Only values from this set should be passed as the `method` when creating a transfer.",
            "items": {
              "enum": ["instant", "standard"],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "brand": {
            "description": "Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.",
            "maxLength": 5000,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "currency": {
            "nullable": true,
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "cvc_check": {
            "description": "If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "default_for_currency": {
            "description": "Whether this card is the default external account for its currency.",
            "nullable": true,
            "type": "boolean"
          },
          "dynamic_last4": {
            "description": "(For tokenized numbers only.) The last four digits of the device account number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "exp_month": {
            "description": "Two-digit number representing the card's expiration month.",
            "type": "integer"
          },
          "exp_year": {
            "description": "Four-digit number representing the card's expiration year.",
            "type": "integer"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "funding": {
            "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "last4": {
            "description": "The last four digits of the card.",
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "name": {
            "description": "Cardholder name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["card"],
            "type": "string"
          },
          "recipient": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/recipient"
              }
            ],
            "description": "The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/recipient"
                }
              ]
            }
          },
          "tokenization_method": {
            "description": "If the card number is tokenized, this is the method that was used. Can be `apple_pay` or `google_pay`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "brand",
          "exp_month",
          "exp_year",
          "funding",
          "id",
          "last4",
          "metadata",
          "object"
        ],
        "title": "Card",
        "type": "object",
        "x-expandableFields": ["account", "customer", "recipient"],
        "x-resourceId": "card"
      },
      "card_mandate_payment_method_details": {
        "properties": {},
        "title": "card_mandate_payment_method_details",
        "type": "object",
        "x-expandableFields": []
      },
      "charge": {
        "properties": {
          "amount": {
            "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
            "type": "integer"
          },
          "amount_refunded": {
            "description": "Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).",
            "type": "integer"
          },
          "application": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/application"
              }
            ],
            "description": "ID of the Connect application that created the charge.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/application"
                }
              ]
            }
          },
          "application_fee": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/application_fee"
              }
            ],
            "description": "The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/application_fee"
                }
              ]
            }
          },
          "application_fee_amount": {
            "description": "The amount of the application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.",
            "nullable": true,
            "type": "integer"
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "billing_details": {
            "$ref": "#/components/schemas/billing_details"
          },
          "captured": {
            "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.",
            "type": "boolean"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "ID of the customer this charge is for if one exists.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 40000,
            "nullable": true,
            "type": "string"
          },
          "dispute": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/dispute"
              }
            ],
            "description": "Details about the dispute if the charge has been disputed.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/dispute"
                }
              ]
            }
          },
          "disputed": {
            "description": "Whether the charge has been disputed.",
            "type": "boolean"
          },
          "failure_code": {
            "description": "Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "failure_message": {
            "description": "Message to user further explaining reason for charge failure if available.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "fraud_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/charge_fraud_details"
              }
            ],
            "description": "Information on fraud assessments for the charge.",
            "nullable": true
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/invoice"
              }
            ],
            "description": "ID of the invoice this charge is for if one exists.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/invoice"
                }
              ]
            }
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["charge"],
            "type": "string"
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "order": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/order"
              }
            ],
            "description": "ID of the order this charge is for if one exists.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/order"
                }
              ]
            }
          },
          "outcome": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/charge_outcome"
              }
            ],
            "description": "Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.",
            "nullable": true
          },
          "paid": {
            "description": "`true` if the charge succeeded, or was successfully authorized for later capture.",
            "type": "boolean"
          },
          "payment_intent": {
            "description": "ID of the PaymentIntent associated with this charge, if one exists.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "payment_method": {
            "description": "ID of the payment method used in this charge.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "payment_method_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details"
              }
            ],
            "description": "Details about the payment method at the time of the transaction.",
            "nullable": true
          },
          "receipt_email": {
            "description": "This is the email address that the receipt for this charge was sent to.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt_number": {
            "description": "This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt_url": {
            "description": "This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.",
            "maxLength": 5000,
            "type": "string"
          },
          "refunded": {
            "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.",
            "type": "boolean"
          },
          "refunds": {
            "description": "A list of refunds that have been applied to the charge.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/refund"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "RefundList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "review": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/review"
              }
            ],
            "description": "ID of the review associated with this charge if one exists.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/review"
                }
              ]
            }
          },
          "shipping": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/shipping"
              }
            ],
            "description": "Shipping information for the charge.",
            "nullable": true
          },
          "source_transfer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/transfer"
              }
            ],
            "description": "The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/transfer"
                }
              ]
            }
          },
          "statement_descriptor": {
            "description": "For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor_suffix": {
            "description": "Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "The status of the payment is either `succeeded`, `pending`, or `failed`.",
            "maxLength": 5000,
            "type": "string"
          },
          "transfer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/transfer"
              }
            ],
            "description": "ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/transfer"
                }
              ]
            }
          },
          "transfer_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/charge_transfer_data"
              }
            ],
            "description": "An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.",
            "nullable": true
          },
          "transfer_group": {
            "description": "A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#grouping-transactions) for details.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "amount_refunded",
          "billing_details",
          "captured",
          "created",
          "currency",
          "disputed",
          "id",
          "livemode",
          "metadata",
          "object",
          "paid",
          "receipt_url",
          "refunded",
          "refunds",
          "status"
        ],
        "title": "Charge",
        "type": "object",
        "x-expandableFields": [
          "application",
          "application_fee",
          "balance_transaction",
          "billing_details",
          "customer",
          "dispute",
          "fraud_details",
          "invoice",
          "on_behalf_of",
          "order",
          "outcome",
          "payment_method_details",
          "refunds",
          "review",
          "shipping",
          "source_transfer",
          "transfer",
          "transfer_data"
        ],
        "x-resourceId": "charge"
      },
      "charge_fraud_details": {
        "properties": {
          "stripe_report": {
            "description": "Assessments from Stripe. If set, the value is `fraudulent`.",
            "maxLength": 5000,
            "type": "string"
          },
          "user_report": {
            "description": "Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "ChargeFraudDetails",
        "type": "object",
        "x-expandableFields": []
      },
      "charge_outcome": {
        "properties": {
          "network_status": {
            "description": "Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as \"pending\" on a cardholder's statement.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "reason": {
            "description": "An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "risk_level": {
            "description": "Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`.",
            "maxLength": 5000,
            "type": "string"
          },
          "risk_score": {
            "description": "Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.",
            "type": "integer"
          },
          "rule": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/rule"
              }
            ],
            "description": "The ID of the Radar rule that matched the payment, if applicable.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/rule"
                }
              ]
            }
          },
          "seller_message": {
            "description": "A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ChargeOutcome",
        "type": "object",
        "x-expandableFields": ["rule"]
      },
      "charge_transfer_data": {
        "properties": {
          "amount": {
            "description": "The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.",
            "nullable": true,
            "type": "integer"
          },
          "destination": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          }
        },
        "required": ["destination"],
        "title": "ChargeTransferData",
        "type": "object",
        "x-expandableFields": ["destination"]
      },
      "checkout.session": {
        "properties": {
          "billing_address_collection": {
            "description": "The value (`auto` or `required`) for whether Checkout collected the\ncustomer's billing address.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "cancel_url": {
            "description": "The URL the customer will be directed to if they decide to cancel payment and return to your website.",
            "maxLength": 5000,
            "type": "string"
          },
          "client_reference_id": {
            "description": "A unique string to reference the Checkout Session. This can be a\ncustomer ID, a cart ID, or similar, and can be used to reconcile the\nsession with your internal systems.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              }
            ],
            "description": "The ID of the customer for this session.\nFor Checkout Sessions in `payment` or `subscription` mode, Checkout\nwill create a new customer object based on information provided\nduring the session unless an existing customer was provided when\nthe session was created.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                }
              ]
            }
          },
          "customer_email": {
            "description": "If provided, this value will be used when the Customer object is created.\nIf not provided, customers will be asked to enter their email address.\nUse this parameter to prefill customer data if you already have an email\non file. To access information about the customer once a session is\ncomplete, use the `customer` field.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "display_items": {
            "description": "The line items, plans, or SKUs purchased by the customer.",
            "items": {
              "$ref": "#/components/schemas/checkout_session_display_item"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the object. Used to pass to `redirectToCheckout`\nin Stripe.js.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "locale": {
            "description": "The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.",
            "enum": [
              "auto",
              "da",
              "de",
              "en",
              "es",
              "fi",
              "fr",
              "it",
              "ja",
              "ms",
              "nb",
              "nl",
              "pl",
              "pt",
              "sv",
              "zh"
            ],
            "nullable": true,
            "type": "string",
            "x-stripeBypassValidation": true
          },
          "mode": {
            "description": "The mode of the Checkout Session, one of `payment`, `setup`, or `subscription`.",
            "enum": ["payment", "setup", "subscription"],
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["checkout.session"],
            "type": "string"
          },
          "payment_intent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_intent"
              }
            ],
            "description": "The ID of the PaymentIntent for Checkout Sessions in `payment` mode.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_intent"
                }
              ]
            }
          },
          "payment_method_types": {
            "description": "A list of the types of payment methods (e.g. card) this Checkout\nSession is allowed to accept.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "setup_intent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/setup_intent"
              }
            ],
            "description": "The ID of the SetupIntent for Checkout Sessions in `setup` mode.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/setup_intent"
                }
              ]
            }
          },
          "submit_type": {
            "description": "Describes the type of transaction being performed by Checkout in order to customize\nrelevant text on the page, such as the submit button. `submit_type` can only be\nspecified on Checkout Sessions in `payment` mode, but not Checkout Sessions\nin `subscription` or `setup` mode.",
            "enum": ["auto", "book", "donate", "pay"],
            "nullable": true,
            "type": "string"
          },
          "subscription": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/subscription"
              }
            ],
            "description": "The ID of the subscription for Checkout Sessions in `subscription` mode.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/subscription"
                }
              ]
            }
          },
          "success_url": {
            "description": "The URL the customer will be directed to after the payment or\nsubscription creation is successful.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "cancel_url",
          "id",
          "livemode",
          "object",
          "payment_method_types",
          "success_url"
        ],
        "title": "Session",
        "type": "object",
        "x-expandableFields": [
          "customer",
          "display_items",
          "payment_intent",
          "setup_intent",
          "subscription"
        ],
        "x-resourceId": "checkout.session"
      },
      "checkout_session_custom_display_item_description": {
        "properties": {
          "description": {
            "description": "The description of the line item.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "images": {
            "description": "The images of the line item.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "name": {
            "description": "The name of the line item.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["name"],
        "title": "checkout_session_custom_display_item_description",
        "type": "object",
        "x-expandableFields": []
      },
      "checkout_session_display_item": {
        "properties": {
          "amount": {
            "description": "Amount for the display item.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "custom": {
            "$ref": "#/components/schemas/checkout_session_custom_display_item_description"
          },
          "plan": {
            "$ref": "#/components/schemas/plan"
          },
          "quantity": {
            "description": "Quantity of the display item being purchased.",
            "type": "integer"
          },
          "sku": {
            "$ref": "#/components/schemas/sku"
          },
          "type": {
            "description": "The type of display item. One of `custom`, `plan` or `sku`",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "checkout_session_display_item",
        "type": "object",
        "x-expandableFields": ["custom", "plan", "sku"]
      },
      "connect_collection_transfer": {
        "properties": {
          "amount": {
            "description": "Amount transferred, in %s.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "destination": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "ID of the account that funds are being collected for.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["connect_collection_transfer"],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "destination",
          "id",
          "livemode",
          "object"
        ],
        "title": "ConnectCollectionTransfer",
        "type": "object",
        "x-expandableFields": ["destination"]
      },
      "country_spec": {
        "properties": {
          "default_currency": {
            "description": "The default currency for this country. This applies to both payment methods and bank accounts.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object. Represented as the ISO country code for this country.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["country_spec"],
            "type": "string"
          },
          "supported_bank_account_currencies": {
            "additionalProperties": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "description": "Currencies that can be accepted in the specific country (for transfers).",
            "type": "object"
          },
          "supported_payment_currencies": {
            "description": "Currencies that can be accepted in the specified country (for payments).",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "supported_payment_methods": {
            "description": "Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "supported_transfer_countries": {
            "description": "Countries that can accept transfers from the specified country.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "verification_fields": {
            "$ref": "#/components/schemas/country_spec_verification_fields"
          }
        },
        "required": [
          "default_currency",
          "id",
          "object",
          "supported_bank_account_currencies",
          "supported_payment_currencies",
          "supported_payment_methods",
          "supported_transfer_countries",
          "verification_fields"
        ],
        "title": "CountrySpec",
        "type": "object",
        "x-expandableFields": ["verification_fields"],
        "x-resourceId": "country_spec"
      },
      "country_spec_verification_field_details": {
        "properties": {
          "additional": {
            "description": "Additional fields which are only required for some users.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "minimum": {
            "description": "Fields which every account must eventually provide.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["additional", "minimum"],
        "title": "CountrySpecVerificationFieldDetails",
        "type": "object",
        "x-expandableFields": []
      },
      "country_spec_verification_fields": {
        "properties": {
          "company": {
            "$ref": "#/components/schemas/country_spec_verification_field_details"
          },
          "individual": {
            "$ref": "#/components/schemas/country_spec_verification_field_details"
          }
        },
        "required": ["company", "individual"],
        "title": "CountrySpecVerificationFields",
        "type": "object",
        "x-expandableFields": ["company", "individual"]
      },
      "coupon": {
        "properties": {
          "amount_off": {
            "description": "Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.",
            "nullable": true,
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.",
            "nullable": true,
            "type": "string"
          },
          "duration": {
            "description": "One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.",
            "enum": ["forever", "once", "repeating"],
            "type": "string"
          },
          "duration_in_months": {
            "description": "If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "max_redemptions": {
            "description": "Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.",
            "nullable": true,
            "type": "integer"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "name": {
            "description": "Name of the coupon displayed to customers on for instance invoices or receipts.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["coupon"],
            "type": "string"
          },
          "percent_off": {
            "description": "Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.",
            "nullable": true,
            "type": "number"
          },
          "redeem_by": {
            "description": "Date after which the coupon can no longer be redeemed.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "times_redeemed": {
            "description": "Number of times this coupon has been applied to a customer.",
            "type": "integer"
          },
          "valid": {
            "description": "Taking account of the above properties, whether this coupon can still be applied to a customer.",
            "type": "boolean"
          }
        },
        "required": [
          "created",
          "duration",
          "id",
          "livemode",
          "metadata",
          "object",
          "times_redeemed",
          "valid"
        ],
        "title": "Coupon",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "coupon"
      },
      "credit_note": {
        "properties": {
          "amount": {
            "description": "The integer amount in **%s** representing the total amount of the credit note, including tax.",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              }
            ],
            "description": "ID of the customer.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                }
              ]
            }
          },
          "customer_balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer_balance_transaction"
              }
            ],
            "description": "Customer balance transaction related to this credit note.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer_balance_transaction"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/invoice"
              }
            ],
            "description": "ID of the invoice.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/invoice"
                }
              ]
            }
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "memo": {
            "description": "Customer-facing text that appears on the credit note PDF.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "number": {
            "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["credit_note"],
            "type": "string"
          },
          "pdf": {
            "description": "The link to download the PDF of the credit note.",
            "maxLength": 5000,
            "type": "string"
          },
          "reason": {
            "description": "Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`",
            "enum": [
              "duplicate",
              "fraudulent",
              "order_change",
              "product_unsatisfactory"
            ],
            "nullable": true,
            "type": "string"
          },
          "refund": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/refund"
              }
            ],
            "description": "Refund related to this credit note.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/refund"
                }
              ]
            }
          },
          "status": {
            "description": "Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).",
            "enum": ["issued", "void"],
            "type": "string"
          },
          "type": {
            "description": "Type of this credit note, one of `post_payment` or `pre_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.",
            "enum": ["post_payment", "pre_payment"],
            "type": "string"
          },
          "voided_at": {
            "description": "The time that the credit note was voided.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "customer",
          "id",
          "invoice",
          "livemode",
          "metadata",
          "number",
          "object",
          "pdf",
          "status",
          "type"
        ],
        "title": "CreditNote",
        "type": "object",
        "x-expandableFields": [
          "customer",
          "customer_balance_transaction",
          "invoice",
          "refund"
        ],
        "x-resourceId": "credit_note"
      },
      "customer": {
        "properties": {
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "The customer's address.",
            "nullable": true
          },
          "balance": {
            "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "default_source": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/alipay_account"
              },
              {
                "$ref": "#/components/schemas/bank_account"
              },
              {
                "$ref": "#/components/schemas/bitcoin_receiver"
              },
              {
                "$ref": "#/components/schemas/card"
              },
              {
                "$ref": "#/components/schemas/source"
              }
            ],
            "description": "ID of the default payment source for the customer.\n\nIf you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/alipay_account"
                },
                {
                  "$ref": "#/components/schemas/bank_account"
                },
                {
                  "$ref": "#/components/schemas/bitcoin_receiver"
                },
                {
                  "$ref": "#/components/schemas/card"
                },
                {
                  "$ref": "#/components/schemas/source"
                }
              ]
            }
          },
          "delinquent": {
            "description": "When the customer's latest invoice is billed by charging automatically, delinquent is true if the invoice's latest charge is failed. When the customer's latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.",
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "discount": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/discount"
              }
            ],
            "description": "Describes the current discount active on the customer, if there is one.",
            "nullable": true
          },
          "email": {
            "description": "The customer's email address.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice_prefix": {
            "description": "The prefix for the customer used to generate unique invoice numbers.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "invoice_settings": {
            "$ref": "#/components/schemas/invoice_setting_customer_setting"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "name": {
            "description": "The customer's full name or business name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["customer"],
            "type": "string"
          },
          "phone": {
            "description": "The customer's phone number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "preferred_locales": {
            "description": "The customer's preferred locales (languages), ordered by preference.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "shipping": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/shipping"
              }
            ],
            "description": "Mailing and shipping address for the customer. Appears on invoices emailed to this customer.",
            "nullable": true
          },
          "sources": {
            "description": "The customer's payment sources, if any.",
            "properties": {
              "data": {
                "description": "The list contains all payment sources that have been attached to the customer.",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/alipay_account"
                    },
                    {
                      "$ref": "#/components/schemas/bank_account"
                    },
                    {
                      "$ref": "#/components/schemas/bitcoin_receiver"
                    },
                    {
                      "$ref": "#/components/schemas/card"
                    },
                    {
                      "$ref": "#/components/schemas/source"
                    }
                  ],
                  "title": "Polymorphic"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "ApmsSourcesSourceList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "subscriptions": {
            "description": "The customer's current subscriptions, if any.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/subscription"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "SubscriptionList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "tax_exempt": {
            "description": "Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **\"Reverse charge\"**.",
            "enum": ["exempt", "none", "reverse"],
            "nullable": true,
            "type": "string"
          },
          "tax_ids": {
            "description": "The customer's tax IDs.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/tax_id"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "TaxIDsList",
            "type": "object",
            "x-expandableFields": ["data"]
          }
        },
        "required": ["created", "id", "livemode", "object", "sources"],
        "title": "Customer",
        "type": "object",
        "x-expandableFields": [
          "address",
          "default_source",
          "discount",
          "invoice_settings",
          "shipping",
          "sources",
          "subscriptions",
          "tax_ids"
        ],
        "x-resourceId": "customer"
      },
      "customer_acceptance": {
        "properties": {
          "accepted_at": {
            "description": "The time at which the customer accepted the Mandate.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "offline": {
            "$ref": "#/components/schemas/offline_acceptance"
          },
          "online": {
            "$ref": "#/components/schemas/online_acceptance"
          },
          "type": {
            "description": "The type of customer acceptance information included with the Mandate. One of `online` or `offline`.",
            "enum": ["offline", "online"],
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "customer_acceptance",
        "type": "object",
        "x-expandableFields": ["offline", "online"]
      },
      "customer_balance_transaction": {
        "properties": {
          "amount": {
            "description": "The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`.",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "credit_note": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/credit_note"
              }
            ],
            "description": "The ID of the credit note (if any) related to the transaction.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/credit_note"
                }
              ]
            }
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              }
            ],
            "description": "The ID of the customer the transaction belongs to.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                }
              ]
            }
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "ending_balance": {
            "description": "The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice.",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/invoice"
              }
            ],
            "description": "The ID of the invoice (if any) related to the transaction.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/invoice"
                }
              ]
            }
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "nullable": true,
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["customer_balance_transaction"],
            "type": "string"
          },
          "type": {
            "description": "Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unapplied_from_invoice`, or `unspent_receiver_credit`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.",
            "enum": [
              "adjustment",
              "applied_to_invoice",
              "credit_note",
              "initial",
              "invoice_too_large",
              "invoice_too_small",
              "migration",
              "unapplied_from_invoice",
              "unspent_receiver_credit"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "customer",
          "ending_balance",
          "id",
          "livemode",
          "object",
          "type"
        ],
        "title": "CustomerBalanceTransaction",
        "type": "object",
        "x-expandableFields": ["credit_note", "customer", "invoice"],
        "x-resourceId": "customer_balance_transaction"
      },
      "deleted_account": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["account"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedAccount",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_account"
      },
      "deleted_alipay_account": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["alipay_account"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "AlipayDeletedAccount",
        "type": "object",
        "x-expandableFields": []
      },
      "deleted_apple_pay_domain": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["apple_pay_domain"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedApplePayDomain",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_apple_pay_domain"
      },
      "deleted_bank_account": {
        "properties": {
          "currency": {
            "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["bank_account"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedBankAccount",
        "type": "object",
        "x-expandableFields": []
      },
      "deleted_bitcoin_receiver": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["bitcoin_receiver"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "BitcoinDeletedReceiver",
        "type": "object",
        "x-expandableFields": []
      },
      "deleted_card": {
        "properties": {
          "currency": {
            "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["card"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedCard",
        "type": "object",
        "x-expandableFields": []
      },
      "deleted_coupon": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["coupon"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedCoupon",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_coupon"
      },
      "deleted_customer": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["customer"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedCustomer",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_customer"
      },
      "deleted_discount": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["discount"],
            "type": "string"
          }
        },
        "required": ["deleted", "object"],
        "title": "DeletedDiscount",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_discount"
      },
      "deleted_external_account": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/deleted_bank_account"
          },
          {
            "$ref": "#/components/schemas/deleted_card"
          }
        ],
        "title": "Polymorphic",
        "x-resourceId": "deleted_external_account"
      },
      "deleted_invoice": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["invoice"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedInvoice",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_invoice"
      },
      "deleted_invoiceitem": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["invoiceitem"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedInvoiceItem",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_invoiceitem"
      },
      "deleted_payment_source": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/deleted_alipay_account"
          },
          {
            "$ref": "#/components/schemas/deleted_bank_account"
          },
          {
            "$ref": "#/components/schemas/deleted_bitcoin_receiver"
          },
          {
            "$ref": "#/components/schemas/deleted_card"
          }
        ],
        "title": "Polymorphic",
        "x-resourceId": "deleted_payment_source"
      },
      "deleted_person": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["person"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedPerson",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_person"
      },
      "deleted_plan": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["plan"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedPlan",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_plan"
      },
      "deleted_product": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["product"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedProduct",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_product"
      },
      "deleted_radar.value_list": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["radar.value_list"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "RadarListDeletedList",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_radar.value_list"
      },
      "deleted_radar.value_list_item": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["radar.value_list_item"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "RadarListDeletedListItem",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_radar.value_list_item"
      },
      "deleted_recipient": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["recipient"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedTransferRecipient",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_recipient"
      },
      "deleted_sku": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["sku"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedSKU",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_sku"
      },
      "deleted_subscription_item": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["subscription_item"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "DeletedSubscriptionItem",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_subscription_item"
      },
      "deleted_tax_id": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["tax_id"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "deleted_tax_id",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_tax_id"
      },
      "deleted_terminal.location": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["terminal.location"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "TerminalLocationDeletedLocation",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_terminal.location"
      },
      "deleted_terminal.reader": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["terminal.reader"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "TerminalReaderDeletedReader",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_terminal.reader"
      },
      "deleted_webhook_endpoint": {
        "properties": {
          "deleted": {
            "description": "Always true for a deleted object",
            "enum": [true],
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["webhook_endpoint"],
            "type": "string"
          }
        },
        "required": ["deleted", "id", "object"],
        "title": "NotificationWebhookEndpointDeleted",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "deleted_webhook_endpoint"
      },
      "delivery_estimate": {
        "properties": {
          "date": {
            "description": "If `type` is `\"exact\"`, `date` will be the expected delivery date in the format YYYY-MM-DD.",
            "maxLength": 5000,
            "type": "string"
          },
          "earliest": {
            "description": "If `type` is `\"range\"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD.",
            "maxLength": 5000,
            "type": "string"
          },
          "latest": {
            "description": "If `type` is `\"range\"`, `latest` will be the latest delivery date in the format YYYY-MM-DD.",
            "maxLength": 5000,
            "type": "string"
          },
          "type": {
            "description": "The type of estimate. Must be either `\"range\"` or `\"exact\"`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "DeliveryEstimate",
        "type": "object",
        "x-expandableFields": []
      },
      "discount": {
        "properties": {
          "coupon": {
            "$ref": "#/components/schemas/coupon"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "end": {
            "description": "If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["discount"],
            "type": "string"
          },
          "start": {
            "description": "Date that the coupon was applied.",
            "format": "unix-time",
            "type": "integer"
          },
          "subscription": {
            "description": "The subscription that this coupon is applied to, if it is applied to a particular subscription.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["coupon", "object", "start"],
        "title": "Discount",
        "type": "object",
        "x-expandableFields": ["coupon", "customer"],
        "x-resourceId": "discount"
      },
      "dispute": {
        "properties": {
          "amount": {
            "description": "Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).",
            "type": "integer"
          },
          "balance_transactions": {
            "description": "List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.",
            "items": {
              "$ref": "#/components/schemas/balance_transaction"
            },
            "type": "array"
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the charge that was disputed.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "evidence": {
            "$ref": "#/components/schemas/dispute_evidence"
          },
          "evidence_details": {
            "$ref": "#/components/schemas/dispute_evidence_details"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "is_charge_refundable": {
            "description": "If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.",
            "type": "boolean"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["dispute"],
            "type": "string"
          },
          "payment_intent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_intent"
              }
            ],
            "description": "ID of the PaymentIntent that was disputed.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_intent"
                }
              ]
            }
          },
          "reason": {
            "description": "Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).",
            "maxLength": 5000,
            "type": "string"
          },
          "status": {
            "description": "Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.",
            "enum": [
              "charge_refunded",
              "lost",
              "needs_response",
              "under_review",
              "warning_closed",
              "warning_needs_response",
              "warning_under_review",
              "won"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "balance_transactions",
          "charge",
          "created",
          "currency",
          "evidence",
          "evidence_details",
          "id",
          "is_charge_refundable",
          "livemode",
          "metadata",
          "object",
          "reason",
          "status"
        ],
        "title": "Dispute",
        "type": "object",
        "x-expandableFields": [
          "balance_transactions",
          "charge",
          "evidence",
          "evidence_details",
          "payment_intent"
        ],
        "x-resourceId": "dispute"
      },
      "dispute_evidence": {
        "properties": {
          "access_activity_log": {
            "description": "Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          },
          "billing_address": {
            "description": "The billing address provided by the customer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "cancellation_policy": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "cancellation_policy_disclosure": {
            "description": "An explanation of how and when the customer was shown your refund policy prior to purchase.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          },
          "cancellation_rebuttal": {
            "description": "A justification for why the customer's subscription was not canceled.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          },
          "customer_communication": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "customer_email_address": {
            "description": "The email address of the customer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "customer_name": {
            "description": "The name of the customer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "customer_purchase_ip": {
            "description": "The IP address that the customer used when making the purchase.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "customer_signature": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "duplicate_charge_documentation": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "duplicate_charge_explanation": {
            "description": "An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          },
          "duplicate_charge_id": {
            "description": "The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "product_description": {
            "description": "A description of the product or service that was sold.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          },
          "receipt": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "refund_policy": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "refund_policy_disclosure": {
            "description": "Documentation demonstrating that the customer was shown your refund policy prior to purchase.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          },
          "refund_refusal_explanation": {
            "description": "A justification for why the customer is not entitled to a refund.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          },
          "service_date": {
            "description": "The date on which the customer received or began receiving the purchased service, in a clear human-readable format.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "service_documentation": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "shipping_address": {
            "description": "The address to which a physical product was shipped. You should try to include as complete address information as possible.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping_carrier": {
            "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping_date": {
            "description": "The date on which a physical product began its route to the shipping address, in a clear human-readable format.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping_documentation": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "shipping_tracking_number": {
            "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "uncategorized_file": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "uncategorized_text": {
            "description": "Any additional evidence or statements.",
            "maxLength": 150000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "DisputeEvidence",
        "type": "object",
        "x-expandableFields": [
          "cancellation_policy",
          "customer_communication",
          "customer_signature",
          "duplicate_charge_documentation",
          "receipt",
          "refund_policy",
          "service_documentation",
          "shipping_documentation",
          "uncategorized_file"
        ]
      },
      "dispute_evidence_details": {
        "properties": {
          "due_by": {
            "description": "Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "has_evidence": {
            "description": "Whether evidence has been staged for this dispute.",
            "type": "boolean"
          },
          "past_due": {
            "description": "Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.",
            "type": "boolean"
          },
          "submission_count": {
            "description": "The number of times evidence has been submitted. Typically, you may only submit evidence once.",
            "type": "integer"
          }
        },
        "required": ["has_evidence", "past_due", "submission_count"],
        "title": "DisputeEvidenceDetails",
        "type": "object",
        "x-expandableFields": []
      },
      "ephemeral_key": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "expires": {
            "description": "Time at which the key will expire. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["ephemeral_key"],
            "type": "string"
          },
          "secret": {
            "description": "The key's secret. You can use this value to make authorized requests to the Stripe API.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["created", "expires", "id", "livemode", "object"],
        "title": "EphemeralKey",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "ephemeral_key"
      },
      "error": {
        "description": "An error response from the Stripe API",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/api_errors"
          }
        },
        "required": ["error"],
        "type": "object"
      },
      "event": {
        "properties": {
          "account": {
            "description": "The connected account that originated the event.",
            "maxLength": 5000,
            "type": "string"
          },
          "api_version": {
            "description": "The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/notification_event_data"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["event"],
            "type": "string"
          },
          "pending_webhooks": {
            "description": "Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.",
            "type": "integer"
          },
          "request": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/notification_event_request"
              }
            ],
            "description": "Information on the API request that instigated the event.",
            "nullable": true
          },
          "type": {
            "description": "Description of the event (e.g., `invoice.created` or `charge.refunded`).",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "created",
          "data",
          "id",
          "livemode",
          "object",
          "pending_webhooks",
          "type"
        ],
        "title": "NotificationEvent",
        "type": "object",
        "x-expandableFields": ["data", "request"],
        "x-resourceId": "event"
      },
      "exchange_rate": {
        "properties": {
          "id": {
            "description": "Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["exchange_rate"],
            "type": "string"
          },
          "rates": {
            "additionalProperties": {
              "type": "number"
            },
            "description": "Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.",
            "type": "object"
          }
        },
        "required": ["id", "object", "rates"],
        "title": "ExchangeRate",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "exchange_rate"
      },
      "external_account": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/bank_account"
          },
          {
            "$ref": "#/components/schemas/card"
          }
        ],
        "title": "Polymorphic",
        "x-resourceId": "external_account"
      },
      "fee": {
        "properties": {
          "amount": {
            "description": "Amount of the fee, in cents.",
            "type": "integer"
          },
          "application": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["amount", "currency", "type"],
        "title": "Fee",
        "type": "object",
        "x-expandableFields": []
      },
      "fee_refund": {
        "properties": {
          "amount": {
            "description": "Amount, in %s.",
            "type": "integer"
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "Balance transaction that describes the impact on your account balance.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "fee": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/application_fee"
              }
            ],
            "description": "ID of the application fee that was refunded.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/application_fee"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["fee_refund"],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "fee",
          "id",
          "metadata",
          "object"
        ],
        "title": "FeeRefund",
        "type": "object",
        "x-expandableFields": ["balance_transaction", "fee"],
        "x-resourceId": "fee_refund"
      },
      "file": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "filename": {
            "description": "A filename for the file, suitable for saving to a filesystem.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "links": {
            "nullable": true,
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/file_link"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "FileFileLinkList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["file"],
            "type": "string"
          },
          "purpose": {
            "description": "The purpose of the file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`.",
            "maxLength": 5000,
            "type": "string"
          },
          "size": {
            "description": "The size in bytes of the file object.",
            "type": "integer"
          },
          "title": {
            "description": "A user friendly title for the document.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The URL from which the file can be downloaded using your live secret API key.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["created", "id", "object", "purpose", "size"],
        "title": "File",
        "type": "object",
        "x-expandableFields": ["links"],
        "x-resourceId": "file"
      },
      "file_link": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "expired": {
            "description": "Whether this link is already expired.",
            "type": "boolean"
          },
          "expires_at": {
            "description": "Time at which the link expires.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "file": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The file object this link points to.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["file_link"],
            "type": "string"
          },
          "url": {
            "description": "The publicly accessible URL to download the file.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "created",
          "expired",
          "file",
          "id",
          "livemode",
          "metadata",
          "object"
        ],
        "title": "FileLink",
        "type": "object",
        "x-expandableFields": ["file"],
        "x-resourceId": "file_link"
      },
      "financial_reporting_finance_report_run_run_parameters": {
        "properties": {
          "columns": {
            "description": "The set of output columns requested for inclusion in the report run.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "connected_account": {
            "description": "Connected account ID by which to filter the report run.",
            "maxLength": 5000,
            "type": "string"
          },
          "currency": {
            "description": "Currency of objects to be included in the report run.",
            "type": "string"
          },
          "interval_end": {
            "description": "Ending timestamp of data to be included in the report run (exclusive).",
            "format": "unix-time",
            "type": "integer"
          },
          "interval_start": {
            "description": "Starting timestamp of data to be included in the report run.",
            "format": "unix-time",
            "type": "integer"
          },
          "payout": {
            "description": "Payout ID by which to filter the report run.",
            "maxLength": 5000,
            "type": "string"
          },
          "reporting_category": {
            "description": "Category of balance transactions to be included in the report run.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "FinancialReportingFinanceReportRunRunParameters",
        "type": "object",
        "x-expandableFields": []
      },
      "inventory": {
        "properties": {
          "quantity": {
            "description": "The count of inventory available. Will be present if and only if `type` is `finite`.",
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "description": "Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`.",
            "maxLength": 5000,
            "type": "string"
          },
          "value": {
            "description": "An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "Inventory",
        "type": "object",
        "x-expandableFields": []
      },
      "invoice": {
        "properties": {
          "account_country": {
            "description": "The country of the business associated with this invoice, most often the business creating the invoice.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "account_name": {
            "description": "The public name of the business associated with this invoice, most often the business creating the invoice.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "amount_due": {
            "description": "Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.",
            "type": "integer"
          },
          "amount_paid": {
            "description": "The amount, in %s, that was paid.",
            "type": "integer"
          },
          "amount_remaining": {
            "description": "The amount remaining, in %s, that is due.",
            "type": "integer"
          },
          "application_fee_amount": {
            "description": "The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.",
            "nullable": true,
            "type": "integer"
          },
          "attempt_count": {
            "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.",
            "type": "integer"
          },
          "attempted": {
            "description": "Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.",
            "type": "boolean"
          },
          "auto_advance": {
            "description": "Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.",
            "type": "boolean"
          },
          "billing_reason": {
            "description": "Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.",
            "enum": [
              "automatic_pending_invoice_item_invoice",
              "manual",
              "subscription",
              "subscription_create",
              "subscription_cycle",
              "subscription_threshold",
              "subscription_update",
              "upcoming"
            ],
            "nullable": true,
            "type": "string"
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the latest charge generated for this invoice, if any.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "collection_method": {
            "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.",
            "enum": ["charge_automatically", "send_invoice"],
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "custom_fields": {
            "description": "Custom fields displayed on the invoice.",
            "items": {
              "$ref": "#/components/schemas/invoice_setting_custom_field"
            },
            "nullable": true,
            "type": "array"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "customer_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.",
            "nullable": true
          },
          "customer_email": {
            "description": "The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "customer_name": {
            "description": "The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "customer_phone": {
            "description": "The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "customer_shipping": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/shipping"
              }
            ],
            "description": "The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.",
            "nullable": true
          },
          "customer_tax_exempt": {
            "description": "The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.",
            "enum": ["exempt", "none", "reverse"],
            "nullable": true,
            "type": "string"
          },
          "customer_tax_ids": {
            "description": "The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.",
            "items": {
              "$ref": "#/components/schemas/invoices_resource_invoice_tax_id"
            },
            "nullable": true,
            "type": "array"
          },
          "default_payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "default_source": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/alipay_account"
              },
              {
                "$ref": "#/components/schemas/bank_account"
              },
              {
                "$ref": "#/components/schemas/bitcoin_receiver"
              },
              {
                "$ref": "#/components/schemas/card"
              },
              {
                "$ref": "#/components/schemas/source"
              }
            ],
            "description": "ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/alipay_account"
                },
                {
                  "$ref": "#/components/schemas/bank_account"
                },
                {
                  "$ref": "#/components/schemas/bitcoin_receiver"
                },
                {
                  "$ref": "#/components/schemas/card"
                },
                {
                  "$ref": "#/components/schemas/source"
                }
              ]
            }
          },
          "default_tax_rates": {
            "description": "The tax rates applied to this invoice, if any.",
            "items": {
              "$ref": "#/components/schemas/tax_rate"
            },
            "nullable": true,
            "type": "array"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "discount": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/discount"
              }
            ],
            "nullable": true
          },
          "due_date": {
            "description": "The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "ending_balance": {
            "description": "Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.",
            "nullable": true,
            "type": "integer"
          },
          "footer": {
            "description": "Footer displayed on the invoice.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "hosted_invoice_url": {
            "description": "The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice_pdf": {
            "description": "The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "lines": {
            "description": "The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/line_item"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "InvoiceLinesList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "nullable": true,
            "type": "object"
          },
          "next_payment_attempt": {
            "description": "The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "number": {
            "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["invoice"],
            "type": "string"
          },
          "paid": {
            "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.",
            "type": "boolean"
          },
          "payment_intent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_intent"
              }
            ],
            "description": "The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_intent"
                }
              ]
            }
          },
          "period_end": {
            "description": "End of the usage period during which invoice items were added to this invoice.",
            "format": "unix-time",
            "type": "integer"
          },
          "period_start": {
            "description": "Start of the usage period during which invoice items were added to this invoice.",
            "format": "unix-time",
            "type": "integer"
          },
          "post_payment_credit_notes_amount": {
            "description": "Total amount of all post-payment credit notes issued for this invoice.",
            "type": "integer"
          },
          "pre_payment_credit_notes_amount": {
            "description": "Total amount of all pre-payment credit notes issued for this invoice.",
            "type": "integer"
          },
          "receipt_number": {
            "description": "This is the transaction number that appears on email receipts sent for this invoice.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "starting_balance": {
            "description": "Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.",
            "type": "integer"
          },
          "statement_descriptor": {
            "description": "Extra information about an invoice for the customer's credit card statement.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)",
            "enum": [
              "deleted",
              "draft",
              "open",
              "paid",
              "uncollectible",
              "void"
            ],
            "nullable": true,
            "type": "string"
          },
          "status_transitions": {
            "$ref": "#/components/schemas/invoices_status_transitions"
          },
          "subscription": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/subscription"
              }
            ],
            "description": "The subscription that this invoice was prepared for, if any.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/subscription"
                }
              ]
            }
          },
          "subscription_proration_date": {
            "description": "Only set for upcoming invoices that preview prorations. The time used to calculate prorations.",
            "type": "integer"
          },
          "subtotal": {
            "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.",
            "type": "integer"
          },
          "tax": {
            "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.",
            "nullable": true,
            "type": "integer"
          },
          "tax_percent": {
            "description": "This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's `tax_percent` field, but can be changed before the invoice is paid. This field defaults to null.",
            "nullable": true,
            "type": "number"
          },
          "threshold_reason": {
            "$ref": "#/components/schemas/invoice_threshold_reason"
          },
          "total": {
            "description": "Total after discounts and taxes.",
            "type": "integer"
          },
          "total_tax_amounts": {
            "description": "The aggregate amounts calculated per tax rate for all line items.",
            "items": {
              "$ref": "#/components/schemas/invoice_tax_amount"
            },
            "nullable": true,
            "type": "array"
          },
          "webhooks_delivered_at": {
            "description": "The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `created`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "amount_due",
          "amount_paid",
          "amount_remaining",
          "attempt_count",
          "attempted",
          "created",
          "currency",
          "customer",
          "lines",
          "livemode",
          "object",
          "paid",
          "period_end",
          "period_start",
          "post_payment_credit_notes_amount",
          "pre_payment_credit_notes_amount",
          "starting_balance",
          "status_transitions",
          "subtotal",
          "total"
        ],
        "title": "Invoice",
        "type": "object",
        "x-expandableFields": [
          "charge",
          "custom_fields",
          "customer",
          "customer_address",
          "customer_shipping",
          "customer_tax_ids",
          "default_payment_method",
          "default_source",
          "default_tax_rates",
          "discount",
          "lines",
          "payment_intent",
          "status_transitions",
          "subscription",
          "threshold_reason",
          "total_tax_amounts"
        ],
        "x-resourceId": "invoice"
      },
      "invoice_item_threshold_reason": {
        "properties": {
          "line_item_ids": {
            "description": "The IDs of the line items that triggered the threshold invoice.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "usage_gte": {
            "description": "The quantity threshold boundary that applied to the given line item.",
            "type": "integer"
          }
        },
        "required": ["line_item_ids", "usage_gte"],
        "title": "InvoiceItemThresholdReason",
        "type": "object",
        "x-expandableFields": []
      },
      "invoice_line_item_period": {
        "properties": {
          "end": {
            "description": "End of the line item's billing period",
            "type": "integer"
          },
          "start": {
            "description": "Start of the line item's billing period",
            "type": "integer"
          }
        },
        "required": ["end", "start"],
        "title": "InvoiceLineItemPeriod",
        "type": "object",
        "x-expandableFields": []
      },
      "invoice_setting_custom_field": {
        "properties": {
          "name": {
            "description": "The name of the custom field.",
            "maxLength": 5000,
            "type": "string"
          },
          "value": {
            "description": "The value of the custom field.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["name", "value"],
        "title": "InvoiceSettingCustomField",
        "type": "object",
        "x-expandableFields": []
      },
      "invoice_setting_customer_setting": {
        "properties": {
          "custom_fields": {
            "description": "Default custom fields to be displayed on invoices for this customer.",
            "items": {
              "$ref": "#/components/schemas/invoice_setting_custom_field"
            },
            "nullable": true,
            "type": "array"
          },
          "default_payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "footer": {
            "description": "Default footer to be displayed on invoices for this customer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "InvoiceSettingCustomerSetting",
        "type": "object",
        "x-expandableFields": ["custom_fields", "default_payment_method"]
      },
      "invoice_setting_subscription_schedule_setting": {
        "properties": {
          "days_until_due": {
            "description": "Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "InvoiceSettingSubscriptionScheduleSetting",
        "type": "object",
        "x-expandableFields": []
      },
      "invoice_tax_amount": {
        "properties": {
          "amount": {
            "description": "The amount, in %s, of the tax.",
            "type": "integer"
          },
          "inclusive": {
            "description": "Whether this tax amount is inclusive or exclusive.",
            "type": "boolean"
          },
          "tax_rate": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/tax_rate"
              }
            ],
            "description": "The tax rate that was applied to get this tax amount.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/tax_rate"
                }
              ]
            }
          }
        },
        "required": ["amount", "inclusive", "tax_rate"],
        "title": "InvoiceTaxAmount",
        "type": "object",
        "x-expandableFields": ["tax_rate"]
      },
      "invoice_threshold_reason": {
        "properties": {
          "amount_gte": {
            "description": "The total invoice amount threshold boundary if it triggered the threshold invoice.",
            "nullable": true,
            "type": "integer"
          },
          "item_reasons": {
            "description": "Indicates which line items triggered a threshold invoice.",
            "items": {
              "$ref": "#/components/schemas/invoice_item_threshold_reason"
            },
            "type": "array"
          }
        },
        "required": ["item_reasons"],
        "title": "InvoiceThresholdReason",
        "type": "object",
        "x-expandableFields": ["item_reasons"]
      },
      "invoiceitem": {
        "properties": {
          "amount": {
            "description": "Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "The ID of the customer who will be billed when this invoice item is billed.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "date": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "discountable": {
            "description": "If true, discounts will apply to this invoice item. Always false for prorations.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/invoice"
              }
            ],
            "description": "The ID of the invoice this invoice item belongs to.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/invoice"
                }
              ]
            }
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["invoiceitem"],
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/invoice_line_item_period"
          },
          "plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/plan"
              }
            ],
            "description": "If the invoice item is a proration, the plan of the subscription that the proration was computed for.",
            "nullable": true
          },
          "proration": {
            "description": "Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.",
            "type": "boolean"
          },
          "quantity": {
            "description": "Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.",
            "type": "integer"
          },
          "subscription": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/subscription"
              }
            ],
            "description": "The subscription that this invoice item has been created for, if any.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/subscription"
                }
              ]
            }
          },
          "subscription_item": {
            "description": "The subscription item that this invoice item has been created for, if any.",
            "maxLength": 5000,
            "type": "string"
          },
          "tax_rates": {
            "description": "The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.",
            "items": {
              "$ref": "#/components/schemas/tax_rate"
            },
            "nullable": true,
            "type": "array"
          },
          "unit_amount": {
            "description": "Unit Amount (in the `currency` specified) of the invoice item.",
            "nullable": true,
            "type": "integer"
          },
          "unit_amount_decimal": {
            "description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.",
            "format": "decimal",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "customer",
          "date",
          "discountable",
          "id",
          "livemode",
          "metadata",
          "object",
          "period",
          "proration",
          "quantity"
        ],
        "title": "InvoiceItem",
        "type": "object",
        "x-expandableFields": [
          "customer",
          "invoice",
          "period",
          "plan",
          "subscription",
          "tax_rates"
        ],
        "x-resourceId": "invoiceitem"
      },
      "invoices_resource_invoice_tax_id": {
        "properties": {
          "type": {
            "description": "The type of the tax ID, one of `au_abn`, `ch_vat`, `eu_vat`, `in_gst`, `mx_rfc`, `no_vat`, `nz_gst`, `unknown`, or `za_vat`",
            "enum": [
              "au_abn",
              "ch_vat",
              "eu_vat",
              "in_gst",
              "mx_rfc",
              "no_vat",
              "nz_gst",
              "unknown",
              "za_vat"
            ],
            "type": "string"
          },
          "value": {
            "description": "The value of the tax ID.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "InvoicesResourceInvoiceTaxID",
        "type": "object",
        "x-expandableFields": []
      },
      "invoices_status_transitions": {
        "properties": {
          "finalized_at": {
            "description": "The time that the invoice draft was finalized.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "marked_uncollectible_at": {
            "description": "The time that the invoice was marked uncollectible.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "paid_at": {
            "description": "The time that the invoice was paid.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "voided_at": {
            "description": "The time that the invoice was voided.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "InvoicesStatusTransitions",
        "type": "object",
        "x-expandableFields": []
      },
      "issuer_fraud_record": {
        "properties": {
          "actionable": {
            "description": "An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later.",
            "type": "boolean"
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the charge this issuer fraud record is for, optionally expanded.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "fraud_type": {
            "description": "The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.",
            "maxLength": 5000,
            "type": "string"
          },
          "has_liability_shift": {
            "description": "If true, the associated charge is subject to [liability shift](https://stripe.com/docs/sources/three-d-secure#disputed-payments).",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuer_fraud_record"],
            "type": "string"
          },
          "post_date": {
            "description": "The timestamp at which the card issuer posted the issuer fraud record.",
            "type": "integer"
          }
        },
        "required": [
          "actionable",
          "charge",
          "created",
          "fraud_type",
          "has_liability_shift",
          "id",
          "livemode",
          "object",
          "post_date"
        ],
        "title": "IssuerFraudRecord",
        "type": "object",
        "x-expandableFields": ["charge"],
        "x-resourceId": "issuer_fraud_record"
      },
      "issuing.authorization": {
        "properties": {
          "approved": {
            "description": "Whether the authorization has been approved.",
            "type": "boolean"
          },
          "authorization_method": {
            "description": "How the card details were provided.",
            "enum": ["chip", "contactless", "keyed_in", "online", "swipe"],
            "type": "string"
          },
          "authorized_amount": {
            "description": "The amount that has been authorized. This will be `0` when the object is created, and increase after it has been approved.",
            "type": "integer"
          },
          "authorized_currency": {
            "description": "The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "balance_transactions": {
            "items": {
              "$ref": "#/components/schemas/balance_transaction"
            },
            "type": "array"
          },
          "card": {
            "$ref": "#/components/schemas/issuing.card"
          },
          "cardholder": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/issuing.cardholder"
              }
            ],
            "description": "The cardholder to whom this authorization belongs.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/issuing.cardholder"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "held_amount": {
            "description": "The amount the authorization is expected to be in `held_currency`. When Stripe holds funds from you, this is the amount reserved for the authorization. This will be `0` when the object is created, and increase after it has been approved. For multi-currency transactions, `held_amount` can be used to determine the expected exchange rate.",
            "type": "integer"
          },
          "held_currency": {
            "description": "The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount). This will always be the card currency.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "is_held_amount_controllable": {
            "type": "boolean"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "merchant_data": {
            "$ref": "#/components/schemas/issuing_authorization_merchant_data"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.authorization"],
            "type": "string"
          },
          "pending_authorized_amount": {
            "description": "The amount the user is requesting to be authorized. This field will only be non-zero during an `issuing.authorization.request` webhook.",
            "type": "integer"
          },
          "pending_held_amount": {
            "description": "The additional amount Stripe will hold if the authorization is approved. This field will only be non-zero during an `issuing.authorization.request` webhook.",
            "type": "integer"
          },
          "request_history": {
            "items": {
              "$ref": "#/components/schemas/issuing_authorization_request"
            },
            "type": "array"
          },
          "status": {
            "description": "The current status of the authorization in its lifecycle.",
            "enum": ["closed", "pending", "reversed"],
            "type": "string"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/issuing.transaction"
            },
            "type": "array"
          },
          "verification_data": {
            "$ref": "#/components/schemas/issuing_authorization_verification_data"
          },
          "wallet_provider": {
            "description": "What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "approved",
          "authorization_method",
          "authorized_amount",
          "authorized_currency",
          "balance_transactions",
          "card",
          "created",
          "held_amount",
          "held_currency",
          "id",
          "is_held_amount_controllable",
          "livemode",
          "merchant_data",
          "metadata",
          "object",
          "pending_authorized_amount",
          "pending_held_amount",
          "request_history",
          "status",
          "transactions",
          "verification_data"
        ],
        "title": "IssuingAuthorization",
        "type": "object",
        "x-expandableFields": [
          "balance_transactions",
          "card",
          "cardholder",
          "merchant_data",
          "request_history",
          "transactions",
          "verification_data"
        ],
        "x-resourceId": "issuing.authorization"
      },
      "issuing.card": {
        "properties": {
          "authorization_controls": {
            "$ref": "#/components/schemas/issuing_card_authorization_controls"
          },
          "brand": {
            "description": "The brand of the card.",
            "maxLength": 5000,
            "type": "string"
          },
          "cardholder": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing.cardholder"
              }
            ],
            "description": "The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object to which the card belongs.",
            "nullable": true
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "exp_month": {
            "description": "The expiration month of the card.",
            "type": "integer"
          },
          "exp_year": {
            "description": "The expiration year of the card.",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "last4": {
            "description": "The last 4 digits of the card number.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "name": {
            "description": "The name of the cardholder, printed on the card.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.card"],
            "type": "string"
          },
          "pin": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_card_pin"
              }
            ],
            "description": "Metadata about the PIN on the card.",
            "nullable": true
          },
          "replacement_for": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/issuing.card"
              }
            ],
            "description": "The card this card replaces, if any.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/issuing.card"
                }
              ]
            }
          },
          "replacement_reason": {
            "description": "The reason why the previous card needed to be replaced.",
            "enum": ["damage", "expiration", "loss", "theft"],
            "nullable": true,
            "type": "string"
          },
          "shipping": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_card_shipping"
              }
            ],
            "description": "Where and how the card will be shipped.",
            "nullable": true
          },
          "status": {
            "description": "Whether authorizations can be approved on this card.",
            "enum": ["active", "canceled", "inactive", "lost", "stolen"],
            "type": "string"
          },
          "type": {
            "description": "The type of the card.",
            "enum": ["physical", "virtual"],
            "type": "string"
          }
        },
        "required": [
          "authorization_controls",
          "brand",
          "created",
          "currency",
          "exp_month",
          "exp_year",
          "id",
          "last4",
          "livemode",
          "metadata",
          "name",
          "object",
          "status",
          "type"
        ],
        "title": "IssuingCard",
        "type": "object",
        "x-expandableFields": [
          "authorization_controls",
          "cardholder",
          "pin",
          "replacement_for",
          "shipping"
        ],
        "x-resourceId": "issuing.card"
      },
      "issuing.card_details": {
        "properties": {
          "card": {
            "$ref": "#/components/schemas/issuing.card"
          },
          "cvc": {
            "description": "The CVC number for the card.",
            "maxLength": 5000,
            "type": "string"
          },
          "exp_month": {
            "description": "The expiration month of the card.",
            "type": "integer"
          },
          "exp_year": {
            "description": "The expiration year of the card.",
            "type": "integer"
          },
          "number": {
            "description": "The card number.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.card_details"],
            "type": "string"
          }
        },
        "required": [
          "card",
          "cvc",
          "exp_month",
          "exp_year",
          "number",
          "object"
        ],
        "title": "IssuingCardDetails",
        "type": "object",
        "x-expandableFields": ["card"],
        "x-resourceId": "issuing.card_details"
      },
      "issuing.card_pin": {
        "properties": {
          "card": {
            "$ref": "#/components/schemas/issuing.card"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.card_pin"],
            "type": "string"
          },
          "pin": {
            "description": "The PIN (4 digits number)",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["card", "object"],
        "title": "IssuingPinPinResponse",
        "type": "object",
        "x-expandableFields": ["card"],
        "x-resourceId": "issuing.card_pin"
      },
      "issuing.cardholder": {
        "properties": {
          "authorization_controls": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_cardholder_authorization_controls"
              }
            ],
            "description": "Spending rules that give you some control over how this cardholder's cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.",
            "nullable": true
          },
          "billing": {
            "$ref": "#/components/schemas/issuing_cardholder_address"
          },
          "company": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_cardholder_company"
              }
            ],
            "description": "Additional information about a `business_entity` cardholder.",
            "nullable": true
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "email": {
            "description": "The cardholder's email address.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "individual": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_cardholder_individual"
              }
            ],
            "description": "Additional information about an `individual` cardholder.",
            "nullable": true
          },
          "is_default": {
            "description": "Whether or not this cardholder is the default cardholder.",
            "type": "boolean"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "name": {
            "description": "The cardholder's name. This will be printed on cards issued to them.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.cardholder"],
            "type": "string"
          },
          "phone_number": {
            "description": "The cardholder's phone number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "requirements": {
            "$ref": "#/components/schemas/issuing_cardholder_requirements"
          },
          "status": {
            "description": "Specifies whether to permit authorizations on this cardholder's cards.",
            "enum": ["active", "blocked", "inactive"],
            "type": "string",
            "x-stripeBypassValidation": true
          },
          "type": {
            "description": "One of `individual` or `business_entity`.",
            "enum": ["business_entity", "individual"],
            "type": "string"
          }
        },
        "required": [
          "billing",
          "created",
          "id",
          "is_default",
          "livemode",
          "metadata",
          "name",
          "object",
          "requirements",
          "status",
          "type"
        ],
        "title": "IssuingCardholder",
        "type": "object",
        "x-expandableFields": [
          "authorization_controls",
          "billing",
          "company",
          "individual",
          "requirements"
        ],
        "x-resourceId": "issuing.cardholder"
      },
      "issuing.dispute": {
        "properties": {
          "amount": {
            "description": "Disputed amount. Usually the amount of the `disputed_transaction`, but can differ (usually because of currency fluctuation or because only part of the order is disputed).",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "The currency the `disputed_transaction` was made in.",
            "type": "string"
          },
          "disputed_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/issuing.transaction"
              }
            ],
            "description": "The transaction being disputed.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/issuing.transaction"
                }
              ]
            }
          },
          "evidence": {
            "$ref": "#/components/schemas/issuing_dispute_evidence"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.dispute"],
            "type": "string"
          },
          "reason": {
            "description": "Reason for this dispute. One of `other` or `fraudulent`.",
            "maxLength": 5000,
            "type": "string"
          },
          "status": {
            "description": "Current status of dispute. One of `lost`, `under_review`, `unsubmitted`, or `won`.",
            "enum": ["lost", "under_review", "unsubmitted", "won"],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "disputed_transaction",
          "evidence",
          "id",
          "livemode",
          "metadata",
          "object",
          "reason",
          "status"
        ],
        "title": "IssuingDispute",
        "type": "object",
        "x-expandableFields": ["disputed_transaction", "evidence"],
        "x-resourceId": "issuing.dispute"
      },
      "issuing.settlement": {
        "properties": {
          "bin": {
            "description": "The Bank Identification Number reflecting this settlement record.",
            "maxLength": 5000,
            "type": "string"
          },
          "clearing_date": {
            "description": "The date that the transactions are cleared and posted to user's accounts.",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "interchange_fees": {
            "description": "The total interchange received as reimbursement for the transactions.",
            "type": "integer"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "net_total": {
            "description": "The total net amount required to settle with the network.",
            "type": "integer"
          },
          "network": {
            "description": "The card network for this settlement report. One of [\"visa\"]",
            "enum": ["visa"],
            "type": "string"
          },
          "network_fees": {
            "description": "The total amount of fees owed to the network.",
            "type": "integer"
          },
          "network_settlement_identifier": {
            "description": "The Settlement Identification Number assigned by the network.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.settlement"],
            "type": "string"
          },
          "settlement_service": {
            "description": "One of `international` or `uk_national_net`.",
            "maxLength": 5000,
            "type": "string"
          },
          "transaction_count": {
            "description": "The total number of transactions reflected in this settlement.",
            "type": "integer"
          },
          "transaction_volume": {
            "description": "The total transaction amount reflected in this settlement.",
            "type": "integer"
          }
        },
        "required": [
          "bin",
          "clearing_date",
          "created",
          "currency",
          "id",
          "interchange_fees",
          "livemode",
          "metadata",
          "net_total",
          "network",
          "network_fees",
          "network_settlement_identifier",
          "object",
          "settlement_service",
          "transaction_count",
          "transaction_volume"
        ],
        "title": "IssuingSettlement",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "issuing.settlement"
      },
      "issuing.transaction": {
        "properties": {
          "amount": {
            "description": "The amount of this transaction in your currency. This is the amount that your balance will be updated by.",
            "type": "integer"
          },
          "authorization": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/issuing.authorization"
              }
            ],
            "description": "The `Authorization` object that led to this transaction.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/issuing.authorization"
                }
              ]
            }
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "card": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/issuing.card"
              }
            ],
            "description": "The card used to make this transaction.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/issuing.card"
                }
              ]
            }
          },
          "cardholder": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/issuing.cardholder"
              }
            ],
            "description": "The cardholder to whom this transaction belongs.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/issuing.cardholder"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "dispute": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/issuing.dispute"
              }
            ],
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/issuing.dispute"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "merchant_amount": {
            "description": "The amount that the merchant will receive, denominated in `merchant_currency`. It will be different from `amount` if the merchant is taking payment in a different currency.",
            "type": "integer"
          },
          "merchant_currency": {
            "description": "The currency with which the merchant is taking payment.",
            "type": "string"
          },
          "merchant_data": {
            "$ref": "#/components/schemas/issuing_authorization_merchant_data"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.transaction"],
            "type": "string"
          },
          "type": {
            "description": "The nature of the transaction.",
            "enum": [
              "capture",
              "cash_withdrawal",
              "dispute",
              "dispute_loss",
              "refund",
              "refund_reversal"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "card",
          "created",
          "currency",
          "id",
          "livemode",
          "merchant_amount",
          "merchant_currency",
          "merchant_data",
          "metadata",
          "object",
          "type"
        ],
        "title": "IssuingTransaction",
        "type": "object",
        "x-expandableFields": [
          "authorization",
          "balance_transaction",
          "card",
          "cardholder",
          "dispute",
          "merchant_data"
        ],
        "x-resourceId": "issuing.transaction"
      },
      "issuing.verification": {
        "properties": {
          "card": {
            "description": "The id of the `Card` on which the verification was requested",
            "maxLength": 5000,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "expires_at": {
            "description": "Timestamp of the expiry for that verification",
            "format": "unix-time",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["issuing.verification"],
            "type": "string"
          },
          "scope": {
            "description": "The scope of the verification (one of `card_pin_retrieve` or `card_pin_update`)",
            "enum": ["card_pin_retrieve", "card_pin_update"],
            "type": "string"
          },
          "verification_method": {
            "description": "The method by which the cardholder will be sent a one-time code (one of `email` or `sms`)",
            "enum": ["email", "sms"],
            "type": "string"
          }
        },
        "required": [
          "card",
          "created",
          "expires_at",
          "id",
          "object",
          "scope",
          "verification_method"
        ],
        "title": "IssuingVerification",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "issuing.verification"
      },
      "issuing_authorization_merchant_data": {
        "properties": {
          "category": {
            "description": "A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.",
            "maxLength": 5000,
            "type": "string"
          },
          "city": {
            "description": "City where the seller is located",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Country where the seller is located",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the seller",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "network_id": {
            "description": "Identifier assigned to the seller by the card brand",
            "maxLength": 5000,
            "type": "string"
          },
          "postal_code": {
            "description": "Postal code where the seller is located",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "State where the seller is located",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The url an online purchase was made from",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["category", "network_id"],
        "title": "IssuingAuthorizationMerchantData",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_authorization_request": {
        "properties": {
          "approved": {
            "description": "Whether this request was approved.",
            "type": "boolean"
          },
          "authorized_amount": {
            "description": "The amount that was authorized at the time of this request",
            "type": "integer"
          },
          "authorized_currency": {
            "description": "The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "maxLength": 5000,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "held_amount": {
            "description": "The amount Stripe held from your account to fund the authorization, if the request was approved",
            "type": "integer"
          },
          "held_currency": {
            "description": "The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount)",
            "maxLength": 5000,
            "type": "string"
          },
          "reason": {
            "description": "The reason for the approval or decline.",
            "enum": [
              "account_compliance_disabled",
              "account_inactive",
              "authentication_failed",
              "authorization_controls",
              "card_active",
              "card_inactive",
              "cardholder_inactive",
              "cardholder_verification_required",
              "insufficient_funds",
              "not_allowed",
              "suspected_fraud",
              "webhook_approved",
              "webhook_declined",
              "webhook_timeout"
            ],
            "type": "string"
          },
          "violated_authorization_controls": {
            "description": "When an authorization is declined due to `authorization_controls`, this array contains details about the authorization controls that were violated. Otherwise, it is empty.",
            "items": {
              "$ref": "#/components/schemas/issuing_authorization_violated_auth_control"
            },
            "type": "array"
          }
        },
        "required": [
          "approved",
          "authorized_amount",
          "authorized_currency",
          "created",
          "held_amount",
          "held_currency",
          "reason",
          "violated_authorization_controls"
        ],
        "title": "IssuingAuthorizationRequest",
        "type": "object",
        "x-expandableFields": ["violated_authorization_controls"]
      },
      "issuing_authorization_verification_data": {
        "properties": {
          "address_line1_check": {
            "description": "Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`. One of `match`, `mismatch`, or `not_provided`.",
            "maxLength": 5000,
            "type": "string"
          },
          "address_zip_check": {
            "description": "Whether the cardholder provided a zip (or postal code) and if it matched the cardholder’s `billing.address.postal_code`. One of `match`, `mismatch`, or `not_provided`.",
            "maxLength": 5000,
            "type": "string"
          },
          "authentication": {
            "description": "One of `exempt`, `failure`, `none`, or `success`.",
            "maxLength": 5000,
            "type": "string"
          },
          "cvc_check": {
            "description": "Whether the cardholder provided a CVC and if it matched Stripe’s record. One of `match`, `mismatch`, or `not_provided`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "address_line1_check",
          "address_zip_check",
          "authentication",
          "cvc_check"
        ],
        "title": "IssuingAuthorizationVerificationData",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_authorization_violated_auth_control": {
        "properties": {
          "entity": {
            "description": "Entity which the authorization control acts on. One of `account`, `card`, or `cardholder`.",
            "enum": ["account", "card", "cardholder"],
            "type": "string"
          },
          "name": {
            "description": "Name of the authorization control. One of `allowed_categories`, `blocked_categories`, `max_amount`, `max_approvals`, or `spending_limits`.",
            "enum": [
              "allowed_categories",
              "blocked_categories",
              "max_amount",
              "max_approvals",
              "spending_limits"
            ],
            "type": "string"
          }
        },
        "required": ["entity", "name"],
        "title": "IssuingAuthorizationViolatedAuthControl",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_card_authorization_controls": {
        "properties": {
          "allowed_categories": {
            "description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card.",
            "items": {
              "enum": [
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "blocked_categories": {
            "description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card.",
            "items": {
              "enum": [
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "currency": {
            "description": "The currency of the card. See [max_amount](https://stripe.com/docs/api#issuing_card_object-authorization_controls-max_amount)",
            "nullable": true,
            "type": "string"
          },
          "max_approvals": {
            "description": "Maximum count of approved authorizations on this card. Counts all authorizations retroactively.",
            "nullable": true,
            "type": "integer"
          },
          "spending_limits": {
            "description": "Limit the spending with rules based on time intervals and categories.",
            "items": {
              "$ref": "#/components/schemas/issuing_card_spending_limit"
            },
            "nullable": true,
            "type": "array"
          },
          "spending_limits_currency": {
            "description": "Currency for the amounts within spending_limits. Locked to the currency of the card.",
            "nullable": true,
            "type": "string"
          }
        },
        "title": "IssuingCardAuthorizationControls",
        "type": "object",
        "x-expandableFields": ["spending_limits"]
      },
      "issuing_card_pin": {
        "properties": {
          "status": {
            "description": "Wether the PIN will be accepted or not.",
            "enum": ["active", "blocked"],
            "type": "string"
          }
        },
        "required": ["status"],
        "title": "IssuingCardPin",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_card_shipping": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "carrier": {
            "description": "The delivery company that shipped a card.",
            "enum": ["fedex", "usps"],
            "nullable": true,
            "type": "string"
          },
          "eta": {
            "description": "A unix timestamp representing a best estimate of when the card will be delivered.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "description": "Recipient name.",
            "maxLength": 5000,
            "type": "string"
          },
          "status": {
            "description": "The delivery status of the card.",
            "enum": [
              "canceled",
              "delivered",
              "failure",
              "pending",
              "returned",
              "shipped"
            ],
            "nullable": true,
            "type": "string"
          },
          "tracking_number": {
            "description": "A tracking number for a card shipment.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "tracking_url": {
            "description": "A link to the shipping carrier's site where you can view detailed information about a card shipment.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Packaging options.",
            "enum": ["bulk", "individual"],
            "type": "string"
          }
        },
        "required": ["address", "name", "type"],
        "title": "IssuingCardShipping",
        "type": "object",
        "x-expandableFields": ["address"]
      },
      "issuing_card_spending_limit": {
        "properties": {
          "amount": {
            "description": "Maximum amount allowed to spend per time interval.",
            "type": "integer"
          },
          "categories": {
            "description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges.",
            "items": {
              "enum": [
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "interval": {
            "description": "The time interval or event with which to apply this spending limit towards.",
            "enum": [
              "all_time",
              "daily",
              "monthly",
              "per_authorization",
              "weekly",
              "yearly"
            ],
            "type": "string"
          }
        },
        "required": ["amount", "interval"],
        "title": "IssuingCardSpendingLimit",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_cardholder_address": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "name": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["address"],
        "title": "IssuingCardholderAddress",
        "type": "object",
        "x-expandableFields": ["address"]
      },
      "issuing_cardholder_authorization_controls": {
        "properties": {
          "allowed_categories": {
            "description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this cardholder's cards.",
            "items": {
              "enum": [
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "blocked_categories": {
            "description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this cardholder's cards.",
            "items": {
              "enum": [
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "spending_limits": {
            "description": "Limit the spending with rules based on time intervals and categories.",
            "items": {
              "$ref": "#/components/schemas/issuing_cardholder_spending_limit"
            },
            "nullable": true,
            "type": "array"
          },
          "spending_limits_currency": {
            "description": "Currency for the amounts within spending_limits.",
            "nullable": true,
            "type": "string"
          }
        },
        "title": "IssuingCardholderAuthorizationControls",
        "type": "object",
        "x-expandableFields": ["spending_limits"]
      },
      "issuing_cardholder_company": {
        "properties": {
          "tax_id_provided": {
            "description": "Whether the company's business ID number was provided.",
            "type": "boolean"
          }
        },
        "required": ["tax_id_provided"],
        "title": "IssuingCardholderCompany",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_cardholder_id_document": {
        "properties": {
          "back": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The back of a document returned by a [file upload](#create_file) with a `purpose` value of `identity_document`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "front": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The front of a document returned by a [file upload](#create_file) with a `purpose` value of `identity_document`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          }
        },
        "title": "IssuingCardholderIdDocument",
        "type": "object",
        "x-expandableFields": ["back", "front"]
      },
      "issuing_cardholder_individual": {
        "properties": {
          "dob": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_cardholder_individual_dob"
              }
            ],
            "description": "The date of birth of this cardholder.",
            "nullable": true
          },
          "first_name": {
            "description": "The first name of this cardholder.",
            "maxLength": 5000,
            "type": "string"
          },
          "last_name": {
            "description": "The last name of this cardholder.",
            "maxLength": 5000,
            "type": "string"
          },
          "verification": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_cardholder_verification"
              }
            ],
            "description": "Government-issued ID document for this cardholder.",
            "nullable": true
          }
        },
        "required": ["first_name", "last_name"],
        "title": "IssuingCardholderIndividual",
        "type": "object",
        "x-expandableFields": ["dob", "verification"]
      },
      "issuing_cardholder_individual_dob": {
        "properties": {
          "day": {
            "description": "The day of birth, between 1 and 31.",
            "nullable": true,
            "type": "integer"
          },
          "month": {
            "description": "The month of birth, between 1 and 12.",
            "nullable": true,
            "type": "integer"
          },
          "year": {
            "description": "The four-digit year of birth.",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "IssuingCardholderIndividualDOB",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_cardholder_requirements": {
        "properties": {
          "disabled_reason": {
            "description": "If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.",
            "enum": ["listed", "rejected.listed", "under_review"],
            "nullable": true,
            "type": "string"
          },
          "past_due": {
            "description": "If not empty, this field contains the list of fields that need to be collected in order to verify and re-enabled the cardholder.",
            "items": {
              "enum": [
                "individual.dob.day",
                "individual.dob.month",
                "individual.dob.year",
                "individual.first_name",
                "individual.last_name",
                "individual.verification.document"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "IssuingCardholderRequirements",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_cardholder_spending_limit": {
        "properties": {
          "amount": {
            "description": "Maximum amount allowed to spend per time interval.",
            "type": "integer"
          },
          "categories": {
            "description": "Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges.",
            "items": {
              "enum": [
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "interval": {
            "description": "The time interval or event with which to apply this spending limit towards.",
            "enum": [
              "all_time",
              "daily",
              "monthly",
              "per_authorization",
              "weekly",
              "yearly"
            ],
            "type": "string"
          }
        },
        "required": ["amount", "interval"],
        "title": "IssuingCardholderSpendingLimit",
        "type": "object",
        "x-expandableFields": []
      },
      "issuing_cardholder_verification": {
        "properties": {
          "document": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_cardholder_id_document"
              }
            ],
            "description": "An identifying document, either a passport or local ID card.",
            "nullable": true
          }
        },
        "title": "IssuingCardholderVerification",
        "type": "object",
        "x-expandableFields": ["document"]
      },
      "issuing_dispute_evidence": {
        "properties": {
          "fraudulent": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_dispute_fraudulent_evidence"
              }
            ],
            "description": "Evidence to support a fraudulent dispute. This will only be present if your dispute's `reason` is `fraudulent`.",
            "nullable": true
          },
          "other": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/issuing_dispute_other_evidence"
              }
            ],
            "description": "Evidence to support an uncategorized dispute. This will only be present if your dispute's `reason` is `other`.",
            "nullable": true
          }
        },
        "title": "IssuingDisputeEvidence",
        "type": "object",
        "x-expandableFields": ["fraudulent", "other"]
      },
      "issuing_dispute_fraudulent_evidence": {
        "properties": {
          "dispute_explanation": {
            "description": "Brief freeform text explaining why you are disputing this transaction.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "uncategorized_file": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional file evidence supporting your dispute.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          }
        },
        "title": "IssuingDisputeFraudulentEvidence",
        "type": "object",
        "x-expandableFields": ["uncategorized_file"]
      },
      "issuing_dispute_other_evidence": {
        "properties": {
          "dispute_explanation": {
            "description": "Brief freeform text explaining why you are disputing this transaction.",
            "maxLength": 5000,
            "type": "string"
          },
          "uncategorized_file": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional file evidence supporting your dispute.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          }
        },
        "required": ["dispute_explanation"],
        "title": "IssuingDisputeOtherEvidence",
        "type": "object",
        "x-expandableFields": ["uncategorized_file"]
      },
      "legal_entity_company": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "address_kana": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/legal_entity_japan_address"
              }
            ],
            "description": "The Kana variation of the company's primary address (Japan only).",
            "nullable": true
          },
          "address_kanji": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/legal_entity_japan_address"
              }
            ],
            "description": "The Kanji variation of the company's primary address (Japan only).",
            "nullable": true
          },
          "directors_provided": {
            "description": "Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).",
            "type": "boolean"
          },
          "executives_provided": {
            "description": "Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.",
            "type": "boolean"
          },
          "name": {
            "description": "The company's legal name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name_kana": {
            "description": "The Kana variation of the company's legal name (Japan only).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name_kanji": {
            "description": "The Kanji variation of the company's legal name (Japan only).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "owners_provided": {
            "description": "Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).",
            "type": "boolean"
          },
          "phone": {
            "description": "The company's phone number (used for verification).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "tax_id_provided": {
            "description": "Whether the company's business ID number was provided.",
            "type": "boolean"
          },
          "tax_id_registrar": {
            "description": "The jurisdiction in which the `tax_id` is registered (Germany-based companies only).",
            "maxLength": 5000,
            "type": "string"
          },
          "vat_id_provided": {
            "description": "Whether the company's business VAT number was provided.",
            "type": "boolean"
          },
          "verification": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/legal_entity_company_verification"
              }
            ],
            "description": "Information on the verification state of the company.",
            "nullable": true
          }
        },
        "title": "LegalEntityCompany",
        "type": "object",
        "x-expandableFields": [
          "address",
          "address_kana",
          "address_kanji",
          "verification"
        ]
      },
      "legal_entity_company_verification": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/legal_entity_company_verification_document"
          }
        },
        "required": ["document"],
        "title": "LegalEntityCompanyVerification",
        "type": "object",
        "x-expandableFields": ["document"]
      },
      "legal_entity_company_verification_document": {
        "properties": {
          "back": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The back of a document returned by a [file upload](#create_file) with a `purpose` value of `additional_verification`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "details": {
            "description": "A user-displayable string describing the verification state of this document.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "details_code": {
            "description": "One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "front": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The front of a document returned by a [file upload](#create_file) with a `purpose` value of `additional_verification`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          }
        },
        "title": "LegalEntityCompanyVerificationDocument",
        "type": "object",
        "x-expandableFields": ["back", "front"]
      },
      "legal_entity_dob": {
        "properties": {
          "day": {
            "description": "The day of birth, between 1 and 31.",
            "nullable": true,
            "type": "integer"
          },
          "month": {
            "description": "The month of birth, between 1 and 12.",
            "nullable": true,
            "type": "integer"
          },
          "year": {
            "description": "The four-digit year of birth.",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "LegalEntityDOB",
        "type": "object",
        "x-expandableFields": []
      },
      "legal_entity_japan_address": {
        "properties": {
          "city": {
            "description": "City/Ward.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "line1": {
            "description": "Block/Building number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "line2": {
            "description": "Building details.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "description": "Zip/Postal Code.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "Prefecture.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "town": {
            "description": "Town/cho-me.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "LegalEntityJapanAddress",
        "type": "object",
        "x-expandableFields": []
      },
      "legal_entity_person_verification": {
        "properties": {
          "additional_document": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/legal_entity_person_verification_document"
              }
            ],
            "description": "A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.",
            "nullable": true
          },
          "details": {
            "description": "A user-displayable string describing the verification state for the person. For example, this may say \"Provided identity information could not be verified\".",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "details_code": {
            "description": "One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/legal_entity_person_verification_document"
          },
          "status": {
            "description": "The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["status"],
        "title": "LegalEntityPersonVerification",
        "type": "object",
        "x-expandableFields": ["additional_document", "document"]
      },
      "legal_entity_person_verification_document": {
        "properties": {
          "back": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The back of an ID returned by a [file upload](#create_file) with a `purpose` value of `identity_document`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          },
          "details": {
            "description": "A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say \"Identity document is too unclear to read\".",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "details_code": {
            "description": "One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "front": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The front of an ID returned by a [file upload](#create_file) with a `purpose` value of `identity_document`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/file"
                }
              ]
            }
          }
        },
        "title": "LegalEntityPersonVerificationDocument",
        "type": "object",
        "x-expandableFields": ["back", "front"]
      },
      "light_account_logout": {
        "properties": {},
        "title": "LightAccountLogout",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "light_account_logout"
      },
      "line_item": {
        "properties": {
          "amount": {
            "description": "The amount, in %s.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "discountable": {
            "description": "If true, discounts will apply to this line item. Always false for prorations.",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice_item": {
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Whether this is a test line item.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["line_item"],
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/invoice_line_item_period"
          },
          "plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/plan"
              }
            ],
            "description": "The plan of the subscription, if the line item is a subscription or a proration.",
            "nullable": true
          },
          "proration": {
            "description": "Whether this is a proration.",
            "type": "boolean"
          },
          "quantity": {
            "description": "The quantity of the subscription, if the line item is a subscription or a proration.",
            "nullable": true,
            "type": "integer"
          },
          "subscription": {
            "description": "The subscription that the invoice item pertains to, if any.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "subscription_item": {
            "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.",
            "maxLength": 5000,
            "type": "string"
          },
          "tax_amounts": {
            "description": "The amount of tax calculated per tax rate for this line item",
            "items": {
              "$ref": "#/components/schemas/invoice_tax_amount"
            },
            "nullable": true,
            "type": "array"
          },
          "tax_rates": {
            "description": "The tax rates which apply to the line item.",
            "items": {
              "$ref": "#/components/schemas/tax_rate"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "description": "A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.",
            "enum": ["invoiceitem", "subscription"],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "currency",
          "discountable",
          "id",
          "livemode",
          "metadata",
          "object",
          "period",
          "proration",
          "type"
        ],
        "title": "InvoiceLineItem",
        "type": "object",
        "x-expandableFields": ["period", "plan", "tax_amounts", "tax_rates"],
        "x-resourceId": "line_item"
      },
      "login_link": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["login_link"],
            "type": "string"
          },
          "url": {
            "description": "The URL for the login link.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["created", "object", "url"],
        "title": "LoginLink",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "login_link"
      },
      "mandate": {
        "properties": {
          "customer_acceptance": {
            "$ref": "#/components/schemas/customer_acceptance"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "multi_use": {
            "$ref": "#/components/schemas/mandate_multi_use"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["mandate"],
            "type": "string"
          },
          "payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of the payment method associated with this mandate.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "payment_method_details": {
            "$ref": "#/components/schemas/mandate_payment_method_details"
          },
          "single_use": {
            "$ref": "#/components/schemas/mandate_single_use"
          },
          "status": {
            "description": "The status of the Mandate, one of `active`, `inactive`, or `pending`. The Mandate can be used to initiate a payment only if status=active.",
            "enum": ["active", "inactive", "pending"],
            "type": "string"
          },
          "type": {
            "description": "The type of the mandate, one of `multi_use` or `single_use`",
            "enum": ["multi_use", "single_use"],
            "type": "string"
          }
        },
        "required": [
          "customer_acceptance",
          "id",
          "livemode",
          "object",
          "payment_method",
          "payment_method_details",
          "status",
          "type"
        ],
        "title": "Mandate",
        "type": "object",
        "x-expandableFields": [
          "customer_acceptance",
          "multi_use",
          "payment_method",
          "payment_method_details",
          "single_use"
        ],
        "x-resourceId": "mandate"
      },
      "mandate_multi_use": {
        "properties": {},
        "title": "mandate_multi_use",
        "type": "object",
        "x-expandableFields": []
      },
      "mandate_payment_method_details": {
        "properties": {
          "card": {
            "$ref": "#/components/schemas/card_mandate_payment_method_details"
          },
          "sepa_debit": {
            "$ref": "#/components/schemas/mandate_sepa_debit"
          },
          "type": {
            "description": "The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "mandate_payment_method_details",
        "type": "object",
        "x-expandableFields": ["card", "sepa_debit"]
      },
      "mandate_sepa_debit": {
        "properties": {
          "reference": {
            "description": "The unique reference of the mandate.",
            "maxLength": 5000,
            "type": "string"
          },
          "url": {
            "description": "The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["reference", "url"],
        "title": "mandate_sepa_debit",
        "type": "object",
        "x-expandableFields": []
      },
      "mandate_single_use": {
        "properties": {
          "amount": {
            "description": "On a single use mandate, the amount of the payment.",
            "type": "integer"
          },
          "currency": {
            "description": "On a single use mandate, the currency of the payment.",
            "type": "string"
          }
        },
        "required": ["amount", "currency"],
        "title": "mandate_single_use",
        "type": "object",
        "x-expandableFields": []
      },
      "notification_event_data": {
        "properties": {
          "object": {
            "description": "Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](#invoice_object) as the value of the object key.",
            "type": "object"
          },
          "previous_attributes": {
            "description": "Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events).",
            "type": "object"
          }
        },
        "required": ["object"],
        "title": "NotificationEventData",
        "type": "object",
        "x-expandableFields": []
      },
      "notification_event_request": {
        "properties": {
          "id": {
            "description": "ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "idempotency_key": {
            "description": "The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "NotificationEventRequest",
        "type": "object",
        "x-expandableFields": []
      },
      "offline_acceptance": {
        "properties": {},
        "title": "offline_acceptance",
        "type": "object",
        "x-expandableFields": []
      },
      "online_acceptance": {
        "properties": {
          "ip_address": {
            "description": "The IP address from which the Mandate was accepted by the customer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "user_agent": {
            "description": "The user agent of the browser from which the Mandate was accepted by the customer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "online_acceptance",
        "type": "object",
        "x-expandableFields": []
      },
      "order": {
        "properties": {
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.",
            "type": "integer"
          },
          "amount_returned": {
            "nullable": true,
            "type": "integer"
          },
          "application": {
            "description": "ID of the Connect Application that created the order.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "application_fee": {
            "nullable": true,
            "type": "integer"
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "The customer used for the order.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "email": {
            "description": "The email address of the customer placing the order.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "external_coupon_code": {
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "items": {
            "description": "List of items constituting the order. An order can have up to 25 items.",
            "items": {
              "$ref": "#/components/schemas/order_item"
            },
            "type": "array"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["order"],
            "type": "string"
          },
          "returns": {
            "nullable": true,
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/order_return"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "OrderReturnList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "selected_shipping_method": {
            "description": "The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/shipping"
              }
            ],
            "description": "The shipping address for the order. Present if the order is for goods to be shipped.",
            "nullable": true
          },
          "shipping_methods": {
            "description": "A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.",
            "items": {
              "$ref": "#/components/schemas/shipping_method"
            },
            "nullable": true,
            "type": "array"
          },
          "status": {
            "description": "Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).",
            "maxLength": 5000,
            "type": "string"
          },
          "status_transitions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/status_transitions"
              }
            ],
            "description": "The timestamps at which the order status was updated.",
            "nullable": true
          },
          "updated": {
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "upstream_id": {
            "description": "The user's order ID if it is different from the Stripe order ID.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "items",
          "livemode",
          "metadata",
          "object",
          "status"
        ],
        "title": "Order",
        "type": "object",
        "x-expandableFields": [
          "charge",
          "customer",
          "items",
          "returns",
          "shipping",
          "shipping_methods",
          "status_transitions"
        ],
        "x-resourceId": "order"
      },
      "order_item": {
        "properties": {
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "Description of the line item, meant to be displayable to the user (e.g., `\"Express shipping\"`).",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["order_item"],
            "type": "string"
          },
          "parent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/sku"
              }
            ],
            "description": "The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/sku"
                }
              ]
            }
          },
          "quantity": {
            "description": "A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`.",
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "description": "The type of line item. One of `sku`, `tax`, `shipping`, or `discount`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["amount", "currency", "description", "object", "type"],
        "title": "OrderItem",
        "type": "object",
        "x-expandableFields": ["parent"]
      },
      "order_return": {
        "properties": {
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item.",
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "items": {
            "description": "The items included in this order return.",
            "items": {
              "$ref": "#/components/schemas/order_item"
            },
            "type": "array"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["order_return"],
            "type": "string"
          },
          "order": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/order"
              }
            ],
            "description": "The order that this return includes items from.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/order"
                }
              ]
            }
          },
          "refund": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/refund"
              }
            ],
            "description": "The ID of the refund issued for this return.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/refund"
                }
              ]
            }
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "items",
          "livemode",
          "object"
        ],
        "title": "OrderReturn",
        "type": "object",
        "x-expandableFields": ["items", "order", "refund"],
        "x-resourceId": "order_return"
      },
      "package_dimensions": {
        "properties": {
          "height": {
            "description": "Height, in inches.",
            "type": "number"
          },
          "length": {
            "description": "Length, in inches.",
            "type": "number"
          },
          "weight": {
            "description": "Weight, in ounces.",
            "type": "number"
          },
          "width": {
            "description": "Width, in inches.",
            "type": "number"
          }
        },
        "required": ["height", "length", "weight", "width"],
        "title": "PackageDimensions",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_intent": {
        "properties": {
          "amount": {
            "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
            "type": "integer"
          },
          "amount_capturable": {
            "description": "Amount that can be captured from this PaymentIntent.",
            "type": "integer"
          },
          "amount_received": {
            "description": "Amount that was collected by this PaymentIntent.",
            "type": "integer"
          },
          "application": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/application"
              }
            ],
            "description": "ID of the Connect application that created the PaymentIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/application"
                }
              ]
            }
          },
          "application_fee_amount": {
            "description": "The amount of the application fee (if any) for the resulting payment. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.",
            "nullable": true,
            "type": "integer"
          },
          "canceled_at": {
            "description": "Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "cancellation_reason": {
            "description": "Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).",
            "enum": [
              "abandoned",
              "automatic",
              "duplicate",
              "failed_invoice",
              "fraudulent",
              "requested_by_customer",
              "void_invoice"
            ],
            "nullable": true,
            "type": "string"
          },
          "capture_method": {
            "description": "Controls when the funds will be captured from the customer's account.",
            "enum": ["automatic", "manual"],
            "type": "string"
          },
          "charges": {
            "description": "Charges that were created by this PaymentIntent, if any.",
            "properties": {
              "data": {
                "description": "This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent).",
                "items": {
                  "$ref": "#/components/schemas/charge"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "PaymentFlowsPaymentIntentResourceChargeList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "client_secret": {
            "description": "The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. \n\nThe client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.\n\nRefer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment) and learn about how `client_secret` should be handled.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "confirmation_method": {
            "enum": ["automatic", "manual"],
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "ID of the Customer this PaymentIntent belongs to, if one exists.\n\nIf present, payment methods used with this PaymentIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this PaymentIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/invoice"
              }
            ],
            "description": "ID of the invoice that created this PaymentIntent, if it exists.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/invoice"
                }
              ]
            }
          },
          "last_payment_error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api_errors"
              }
            ],
            "description": "The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.",
            "nullable": true
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).",
            "type": "object"
          },
          "next_action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_intent_next_action"
              }
            ],
            "description": "If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.",
            "nullable": true
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["payment_intent"],
            "type": "string"
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of the payment method used in this PaymentIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "payment_method_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_intent_payment_method_options"
              }
            ],
            "description": "Payment-method-specific configuration for this PaymentIntent.",
            "nullable": true
          },
          "payment_method_types": {
            "description": "The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "receipt_email": {
            "description": "Email address that the receipt for the resulting payment will be sent to.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "review": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/review"
              }
            ],
            "description": "ID of the review associated with this PaymentIntent, if any.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/review"
                }
              ]
            }
          },
          "setup_future_usage": {
            "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n\nFor more, learn to [save card details after a payment](https://stripe.com/docs/payments/save-after-payment).\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by [SCA](https://stripe.com/docs/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect [off-session payments](https://stripe.com/docs/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.",
            "enum": ["off_session", "on_session"],
            "nullable": true,
            "type": "string"
          },
          "shipping": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/shipping"
              }
            ],
            "description": "Shipping information for this PaymentIntent.",
            "nullable": true
          },
          "statement_descriptor": {
            "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor_suffix": {
            "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).",
            "enum": [
              "canceled",
              "processing",
              "requires_action",
              "requires_capture",
              "requires_confirmation",
              "requires_payment_method",
              "succeeded"
            ],
            "type": "string"
          },
          "transfer_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/transfer_data"
              }
            ],
            "description": "The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.",
            "nullable": true
          },
          "transfer_group": {
            "description": "A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "capture_method",
          "confirmation_method",
          "created",
          "currency",
          "id",
          "livemode",
          "object",
          "payment_method_types",
          "status"
        ],
        "title": "PaymentIntent",
        "type": "object",
        "x-expandableFields": [
          "application",
          "charges",
          "customer",
          "invoice",
          "last_payment_error",
          "next_action",
          "on_behalf_of",
          "payment_method",
          "payment_method_options",
          "review",
          "shipping",
          "transfer_data"
        ],
        "x-resourceId": "payment_intent"
      },
      "payment_intent_next_action": {
        "properties": {
          "redirect_to_url": {
            "$ref": "#/components/schemas/payment_intent_next_action_redirect_to_url"
          },
          "type": {
            "description": "Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`.",
            "maxLength": 5000,
            "type": "string"
          },
          "use_stripe_sdk": {
            "description": "When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.",
            "type": "object"
          }
        },
        "required": ["type"],
        "title": "PaymentIntentNextAction",
        "type": "object",
        "x-expandableFields": ["redirect_to_url"]
      },
      "payment_intent_next_action_redirect_to_url": {
        "properties": {
          "return_url": {
            "description": "If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The URL you must redirect your customer to in order to authenticate the payment.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "PaymentIntentNextActionRedirectToUrl",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_intent_payment_method_options": {
        "properties": {
          "card": {
            "$ref": "#/components/schemas/payment_intent_payment_method_options_card"
          }
        },
        "title": "PaymentIntentPaymentMethodOptions",
        "type": "object",
        "x-expandableFields": ["card"]
      },
      "payment_intent_payment_method_options_card": {
        "properties": {
          "installments": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_options_card_installments"
              }
            ],
            "description": "Installment details for this payment (Mexico only).\n\nFor more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).",
            "nullable": true
          },
          "request_three_d_secure": {
            "description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.",
            "enum": ["any", "automatic", "challenge_only"],
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_intent_payment_method_options_card",
        "type": "object",
        "x-expandableFields": ["installments"]
      },
      "payment_method": {
        "properties": {
          "billing_details": {
            "$ref": "#/components/schemas/billing_details"
          },
          "card": {
            "$ref": "#/components/schemas/payment_method_card"
          },
          "card_present": {
            "$ref": "#/components/schemas/payment_method_card_present"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              }
            ],
            "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "ideal": {
            "$ref": "#/components/schemas/payment_method_ideal"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["payment_method"],
            "type": "string"
          },
          "sepa_debit": {
            "$ref": "#/components/schemas/payment_method_sepa_debit"
          },
          "type": {
            "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.",
            "enum": ["card", "ideal", "sepa_debit"],
            "type": "string",
            "x-stripeBypassValidation": true
          }
        },
        "required": [
          "billing_details",
          "created",
          "id",
          "livemode",
          "metadata",
          "object",
          "type"
        ],
        "title": "PaymentMethod",
        "type": "object",
        "x-expandableFields": [
          "billing_details",
          "card",
          "card_present",
          "customer",
          "ideal",
          "sepa_debit"
        ],
        "x-resourceId": "payment_method"
      },
      "payment_method_card": {
        "properties": {
          "brand": {
            "description": "Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
            "maxLength": 5000,
            "type": "string"
          },
          "checks": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_card_checks"
              }
            ],
            "description": "Checks on Card address and CVC if provided.",
            "nullable": true
          },
          "country": {
            "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "exp_month": {
            "description": "Two-digit number representing the card's expiration month.",
            "type": "integer"
          },
          "exp_year": {
            "description": "Four-digit number representing the card's expiration year.",
            "type": "integer"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "funding": {
            "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.",
            "maxLength": 5000,
            "type": "string"
          },
          "generated_from": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_card_generated_card"
              }
            ],
            "description": "Details of the original PaymentMethod that created this object.",
            "nullable": true
          },
          "last4": {
            "description": "The last four digits of the card.",
            "maxLength": 5000,
            "type": "string"
          },
          "three_d_secure_usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/three_d_secure_usage"
              }
            ],
            "description": "Contains details on how this Card maybe be used for 3D Secure authentication.",
            "nullable": true
          },
          "wallet": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_card_wallet"
              }
            ],
            "description": "If this Card is part of a card wallet, this contains the details of the card wallet.",
            "nullable": true
          }
        },
        "required": ["brand", "exp_month", "exp_year", "funding", "last4"],
        "title": "payment_method_card",
        "type": "object",
        "x-expandableFields": [
          "checks",
          "generated_from",
          "three_d_secure_usage",
          "wallet"
        ]
      },
      "payment_method_card_checks": {
        "properties": {
          "address_line1_check": {
            "description": "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_postal_code_check": {
            "description": "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "cvc_check": {
            "description": "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_card_checks",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_card_generated_card": {
        "properties": {
          "charge": {
            "description": "The charge that created this object.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "payment_method_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details"
              }
            ],
            "description": "Transaction-specific details of the payment method used in the payment.",
            "nullable": true
          }
        },
        "title": "payment_method_card_generated_card",
        "type": "object",
        "x-expandableFields": ["payment_method_details"]
      },
      "payment_method_card_present": {
        "properties": {},
        "title": "payment_method_card_present",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_card_wallet": {
        "properties": {
          "amex_express_checkout": {
            "$ref": "#/components/schemas/payment_method_card_wallet_amex_express_checkout"
          },
          "apple_pay": {
            "$ref": "#/components/schemas/payment_method_card_wallet_apple_pay"
          },
          "dynamic_last4": {
            "description": "(For tokenized numbers only.) The last four digits of the device account number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "google_pay": {
            "$ref": "#/components/schemas/payment_method_card_wallet_google_pay"
          },
          "masterpass": {
            "$ref": "#/components/schemas/payment_method_card_wallet_masterpass"
          },
          "samsung_pay": {
            "$ref": "#/components/schemas/payment_method_card_wallet_samsung_pay"
          },
          "type": {
            "description": "The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.",
            "enum": [
              "amex_express_checkout",
              "apple_pay",
              "google_pay",
              "masterpass",
              "samsung_pay",
              "visa_checkout"
            ],
            "type": "string"
          },
          "visa_checkout": {
            "$ref": "#/components/schemas/payment_method_card_wallet_visa_checkout"
          }
        },
        "required": ["type"],
        "title": "payment_method_card_wallet",
        "type": "object",
        "x-expandableFields": [
          "amex_express_checkout",
          "apple_pay",
          "google_pay",
          "masterpass",
          "samsung_pay",
          "visa_checkout"
        ]
      },
      "payment_method_card_wallet_amex_express_checkout": {
        "properties": {},
        "title": "payment_method_card_wallet_amex_express_checkout",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_card_wallet_apple_pay": {
        "properties": {},
        "title": "payment_method_card_wallet_apple_pay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_card_wallet_google_pay": {
        "properties": {},
        "title": "payment_method_card_wallet_google_pay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_card_wallet_masterpass": {
        "properties": {
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          },
          "email": {
            "description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          }
        },
        "title": "payment_method_card_wallet_masterpass",
        "type": "object",
        "x-expandableFields": ["billing_address", "shipping_address"]
      },
      "payment_method_card_wallet_samsung_pay": {
        "properties": {},
        "title": "payment_method_card_wallet_samsung_pay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_card_wallet_visa_checkout": {
        "properties": {
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          },
          "email": {
            "description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          }
        },
        "title": "payment_method_card_wallet_visa_checkout",
        "type": "object",
        "x-expandableFields": ["billing_address", "shipping_address"]
      },
      "payment_method_details": {
        "properties": {
          "ach_credit_transfer": {
            "$ref": "#/components/schemas/payment_method_details_ach_credit_transfer"
          },
          "ach_debit": {
            "$ref": "#/components/schemas/payment_method_details_ach_debit"
          },
          "alipay": {
            "$ref": "#/components/schemas/payment_method_details_alipay"
          },
          "bancontact": {
            "$ref": "#/components/schemas/payment_method_details_bancontact"
          },
          "card": {
            "$ref": "#/components/schemas/payment_method_details_card"
          },
          "card_present": {
            "$ref": "#/components/schemas/payment_method_details_card_present"
          },
          "eps": {
            "$ref": "#/components/schemas/payment_method_details_eps"
          },
          "giropay": {
            "$ref": "#/components/schemas/payment_method_details_giropay"
          },
          "ideal": {
            "$ref": "#/components/schemas/payment_method_details_ideal"
          },
          "klarna": {
            "$ref": "#/components/schemas/payment_method_details_klarna"
          },
          "multibanco": {
            "$ref": "#/components/schemas/payment_method_details_multibanco"
          },
          "p24": {
            "$ref": "#/components/schemas/payment_method_details_p24"
          },
          "sepa_debit": {
            "$ref": "#/components/schemas/payment_method_details_sepa_debit"
          },
          "sofort": {
            "$ref": "#/components/schemas/payment_method_details_sofort"
          },
          "stripe_account": {
            "$ref": "#/components/schemas/payment_method_details_stripe_account"
          },
          "type": {
            "description": "The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.\nAn additional hash is included on `payment_method_details` with a name matching this value.\nIt contains information specific to the payment method.",
            "maxLength": 5000,
            "type": "string"
          },
          "wechat": {
            "$ref": "#/components/schemas/payment_method_details_wechat"
          }
        },
        "required": ["type"],
        "title": "payment_method_details",
        "type": "object",
        "x-expandableFields": [
          "ach_credit_transfer",
          "ach_debit",
          "alipay",
          "bancontact",
          "card",
          "card_present",
          "eps",
          "giropay",
          "ideal",
          "klarna",
          "multibanco",
          "p24",
          "sepa_debit",
          "sofort",
          "stripe_account",
          "wechat"
        ]
      },
      "payment_method_details_ach_credit_transfer": {
        "properties": {
          "account_number": {
            "description": "Account number to transfer funds to.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "description": "Name of the bank associated with the routing number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "routing_number": {
            "description": "Routing transit number for the bank account to transfer funds to.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "swift_code": {
            "description": "SWIFT code of the bank associated with the routing number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_ach_credit_transfer",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_ach_debit": {
        "properties": {
          "account_holder_type": {
            "description": "Type of entity that holds the account. This can be either `individual` or `company`.",
            "enum": ["company", "individual"],
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "description": "Name of the bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country the bank account is located in.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "description": "Last four digits of the bank account number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "routing_number": {
            "description": "Routing transit number of the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_ach_debit",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_alipay": {
        "properties": {},
        "title": "payment_method_details_alipay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_bancontact": {
        "properties": {
          "bank_code": {
            "description": "Bank code of bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "description": "Name of the bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "description": "Bank Identifier Code of the bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "iban_last4": {
            "description": "Last four characters of the IBAN.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "preferred_language": {
            "description": "Preferred language of the Bancontact authorization page that the customer is redirected to.\nCan be one of `en`, `de`, `fr`, or `nl`",
            "enum": ["de", "en", "fr", "nl"],
            "nullable": true,
            "type": "string"
          },
          "verified_name": {
            "description": "Owner's verified full name. Values are verified or provided by Bancontact directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_bancontact",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card": {
        "properties": {
          "brand": {
            "description": "Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "checks": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details_card_checks"
              }
            ],
            "description": "Check results by Card networks on Card address and CVC at time of payment.",
            "nullable": true
          },
          "country": {
            "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "exp_month": {
            "description": "Two-digit number representing the card's expiration month.",
            "nullable": true,
            "type": "integer"
          },
          "exp_year": {
            "description": "Four-digit number representing the card's expiration year.",
            "nullable": true,
            "type": "integer"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "funding": {
            "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "installments": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details_card_installments"
              }
            ],
            "description": "Installment details for this payment (Mexico only).\n\nFor more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).",
            "nullable": true
          },
          "last4": {
            "description": "The last four digits of the card.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "network": {
            "description": "Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "three_d_secure": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/three_d_secure_details"
              }
            ],
            "description": "Populated if this transaction used 3D Secure authentication.",
            "nullable": true
          },
          "wallet": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details_card_wallet"
              }
            ],
            "description": "If this Card is part of a card wallet, this contains the details of the card wallet.",
            "nullable": true
          }
        },
        "title": "payment_method_details_card",
        "type": "object",
        "x-expandableFields": [
          "checks",
          "installments",
          "three_d_secure",
          "wallet"
        ]
      },
      "payment_method_details_card_checks": {
        "properties": {
          "address_line1_check": {
            "description": "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "address_postal_code_check": {
            "description": "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "cvc_check": {
            "description": "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_card_checks",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card_installments": {
        "properties": {
          "plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details_card_installments_plan"
              }
            ],
            "description": "Installment plan selected for the payment.",
            "nullable": true
          }
        },
        "title": "payment_method_details_card_installments",
        "type": "object",
        "x-expandableFields": ["plan"]
      },
      "payment_method_details_card_installments_plan": {
        "properties": {
          "count": {
            "description": "For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.",
            "nullable": true,
            "type": "integer"
          },
          "interval": {
            "description": "For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.\nOne of `month`.",
            "enum": ["month"],
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Type of installment plan, one of `fixed_count`.",
            "enum": ["fixed_count"],
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "payment_method_details_card_installments_plan",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card_present": {
        "properties": {
          "brand": {
            "description": "Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "emv_auth_data": {
            "description": "Authorization response cryptogram.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "exp_month": {
            "description": "Two-digit number representing the card's expiration month.",
            "nullable": true,
            "type": "integer"
          },
          "exp_year": {
            "description": "Four-digit number representing the card's expiration year.",
            "nullable": true,
            "type": "integer"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "funding": {
            "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "generated_card": {
            "description": "ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "description": "The last four digits of the card.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "network": {
            "description": "Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "read_method": {
            "description": "How were card details read in this transaction. Can be contact_emv, contactless_emv, magnetic_stripe_fallback, magnetic_stripe_track2, or contactless_magstripe_mode",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details_card_present_receipt"
              }
            ],
            "description": "A collection of fields required to be displayed on receipts. Only required for EMV transactions.",
            "nullable": true
          }
        },
        "title": "payment_method_details_card_present",
        "type": "object",
        "x-expandableFields": ["receipt"]
      },
      "payment_method_details_card_present_receipt": {
        "properties": {
          "application_cryptogram": {
            "description": "EMV tag 9F26, cryptogram generated by the integrated circuit chip.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "application_preferred_name": {
            "description": "Mnenomic of the Application Identifier.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "authorization_code": {
            "description": "Identifier for this transaction.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "authorization_response_code": {
            "description": "EMV tag 8A. A code returned by the card issuer.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "cardholder_verification_method": {
            "description": "How the cardholder verified ownership of the card.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "dedicated_file_name": {
            "description": "EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "terminal_verification_results": {
            "description": "The outcome of a series of EMV functions performed by the card reader.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "transaction_status_information": {
            "description": "An indication of various EMV functions performed during the transaction.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_card_present_receipt",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card_wallet": {
        "properties": {
          "amex_express_checkout": {
            "$ref": "#/components/schemas/payment_method_details_card_wallet_amex_express_checkout"
          },
          "apple_pay": {
            "$ref": "#/components/schemas/payment_method_details_card_wallet_apple_pay"
          },
          "dynamic_last4": {
            "description": "(For tokenized numbers only.) The last four digits of the device account number.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "google_pay": {
            "$ref": "#/components/schemas/payment_method_details_card_wallet_google_pay"
          },
          "masterpass": {
            "$ref": "#/components/schemas/payment_method_details_card_wallet_masterpass"
          },
          "samsung_pay": {
            "$ref": "#/components/schemas/payment_method_details_card_wallet_samsung_pay"
          },
          "type": {
            "description": "The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.",
            "enum": [
              "amex_express_checkout",
              "apple_pay",
              "google_pay",
              "masterpass",
              "samsung_pay",
              "visa_checkout"
            ],
            "type": "string"
          },
          "visa_checkout": {
            "$ref": "#/components/schemas/payment_method_details_card_wallet_visa_checkout"
          }
        },
        "required": ["type"],
        "title": "payment_method_details_card_wallet",
        "type": "object",
        "x-expandableFields": [
          "amex_express_checkout",
          "apple_pay",
          "google_pay",
          "masterpass",
          "samsung_pay",
          "visa_checkout"
        ]
      },
      "payment_method_details_card_wallet_amex_express_checkout": {
        "properties": {},
        "title": "payment_method_details_card_wallet_amex_express_checkout",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card_wallet_apple_pay": {
        "properties": {},
        "title": "payment_method_details_card_wallet_apple_pay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card_wallet_google_pay": {
        "properties": {},
        "title": "payment_method_details_card_wallet_google_pay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card_wallet_masterpass": {
        "properties": {
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          },
          "email": {
            "description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          }
        },
        "title": "payment_method_details_card_wallet_masterpass",
        "type": "object",
        "x-expandableFields": ["billing_address", "shipping_address"]
      },
      "payment_method_details_card_wallet_samsung_pay": {
        "properties": {},
        "title": "payment_method_details_card_wallet_samsung_pay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_card_wallet_visa_checkout": {
        "properties": {
          "billing_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          },
          "email": {
            "description": "Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "shipping_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          }
        },
        "title": "payment_method_details_card_wallet_visa_checkout",
        "type": "object",
        "x-expandableFields": ["billing_address", "shipping_address"]
      },
      "payment_method_details_eps": {
        "properties": {
          "verified_name": {
            "description": "Owner's verified full name. Values are verified or provided by EPS directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_eps",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_giropay": {
        "properties": {
          "bank_code": {
            "description": "Bank code of bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "description": "Name of the bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "description": "Bank Identifier Code of the bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_name": {
            "description": "Owner's verified full name. Values are verified or provided by Giropay directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_giropay",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_ideal": {
        "properties": {
          "bank": {
            "description": "The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`.",
            "enum": [
              "abn_amro",
              "asn_bank",
              "bunq",
              "handelsbanken",
              "ing",
              "knab",
              "moneyou",
              "rabobank",
              "regiobank",
              "sns_bank",
              "triodos_bank",
              "van_lanschot"
            ],
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "description": "The Bank Identifier Code of the customer's bank.",
            "enum": [
              "ABNANL2A",
              "ASNBNL21",
              "BUNQNL2A",
              "FVLBNL22",
              "HANDNL2A",
              "INGBNL2A",
              "KNABNL2H",
              "MOYONL21",
              "RABONL2U",
              "RBRBNL21",
              "SNSBNL2A",
              "TRIONL2U"
            ],
            "nullable": true,
            "type": "string"
          },
          "iban_last4": {
            "description": "Last four characters of the IBAN.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_name": {
            "description": "Owner's verified full name. Values are verified or provided by iDEAL directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_ideal",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_klarna": {
        "properties": {},
        "title": "payment_method_details_klarna",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_multibanco": {
        "properties": {
          "entity": {
            "description": "Entity number associated with this Multibanco payment.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "reference": {
            "description": "Reference number associated with this Multibanco payment.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_multibanco",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_p24": {
        "properties": {
          "reference": {
            "description": "Unique reference for this Przelewy24 payment.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_name": {
            "description": "Owner's verified full name. Values are verified or provided by Przelewy24 directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_p24",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_sepa_debit": {
        "properties": {
          "bank_code": {
            "description": "Bank code of bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "branch_code": {
            "description": "Branch code of bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country the bank account is located in.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "description": "Last four characters of the IBAN.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "mandate": {
            "description": "ID of the mandate used to make this payment.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_sepa_debit",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_sofort": {
        "properties": {
          "bank_code": {
            "description": "Bank code of bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "description": "Name of the bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "description": "Bank Identifier Code of the bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country the bank account is located in.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "iban_last4": {
            "description": "Last four characters of the IBAN.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_name": {
            "description": "Owner's verified full name. Values are verified or provided by SOFORT directly\n(if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_details_sofort",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_stripe_account": {
        "properties": {},
        "title": "payment_method_details_stripe_account",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_details_wechat": {
        "properties": {},
        "title": "payment_method_details_wechat",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_ideal": {
        "properties": {
          "bank": {
            "description": "The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`.",
            "enum": [
              "abn_amro",
              "asn_bank",
              "bunq",
              "handelsbanken",
              "ing",
              "knab",
              "moneyou",
              "rabobank",
              "regiobank",
              "sns_bank",
              "triodos_bank",
              "van_lanschot"
            ],
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "description": "The Bank Identifier Code of the customer's bank, if the bank was provided.",
            "enum": [
              "ABNANL2A",
              "ASNBNL21",
              "BUNQNL2A",
              "FVLBNL22",
              "HANDNL2A",
              "INGBNL2A",
              "KNABNL2H",
              "MOYONL21",
              "RABONL2U",
              "RBRBNL21",
              "SNSBNL2A",
              "TRIONL2U"
            ],
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_ideal",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_method_options_card_installments": {
        "properties": {
          "available_plans": {
            "description": "Installment plans that may be selected for this PaymentIntent.",
            "items": {
              "$ref": "#/components/schemas/payment_method_details_card_installments_plan"
            },
            "nullable": true,
            "type": "array"
          },
          "enabled": {
            "description": "Whether Installments are enabled for this PaymentIntent.",
            "type": "boolean"
          },
          "plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/payment_method_details_card_installments_plan"
              }
            ],
            "description": "Installment plan selected for this PaymentIntent.",
            "nullable": true
          }
        },
        "required": ["enabled"],
        "title": "payment_method_options_card_installments",
        "type": "object",
        "x-expandableFields": ["available_plans", "plan"]
      },
      "payment_method_sepa_debit": {
        "properties": {
          "bank_code": {
            "description": "Bank code of bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "branch_code": {
            "description": "Branch code of bank associated with the bank account.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country the bank account is located in.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "fingerprint": {
            "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "description": "Last four characters of the IBAN.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "payment_method_sepa_debit",
        "type": "object",
        "x-expandableFields": []
      },
      "payment_source": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/account"
          },
          {
            "$ref": "#/components/schemas/alipay_account"
          },
          {
            "$ref": "#/components/schemas/bank_account"
          },
          {
            "$ref": "#/components/schemas/bitcoin_receiver"
          },
          {
            "$ref": "#/components/schemas/card"
          },
          {
            "$ref": "#/components/schemas/source"
          }
        ],
        "title": "Polymorphic",
        "x-resourceId": "payment_source"
      },
      "payout": {
        "properties": {
          "amount": {
            "description": "Amount (in %s) to be transferred to your bank account or debit card.",
            "type": "integer"
          },
          "arrival_date": {
            "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.",
            "format": "unix-time",
            "type": "integer"
          },
          "automatic": {
            "description": "Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).",
            "type": "boolean"
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "ID of the balance transaction that describes the impact of this payout on your account balance.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "destination": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/bank_account"
              },
              {
                "$ref": "#/components/schemas/card"
              },
              {
                "$ref": "#/components/schemas/deleted_bank_account"
              },
              {
                "$ref": "#/components/schemas/deleted_card"
              }
            ],
            "description": "ID of the bank account or card the payout was sent to.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/bank_account"
                },
                {
                  "$ref": "#/components/schemas/card"
                },
                {
                  "$ref": "#/components/schemas/deleted_bank_account"
                },
                {
                  "$ref": "#/components/schemas/deleted_card"
                }
              ]
            }
          },
          "failure_balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "failure_code": {
            "description": "Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "failure_message": {
            "description": "Message to user further explaining reason for payout failure if available.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "method": {
            "description": "The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](/blog/instant-payouts-for-marketplaces) for more information.)",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["payout"],
            "type": "string"
          },
          "source_type": {
            "description": "The source balance this payout came from. One of `card` or `bank_account`.",
            "maxLength": 5000,
            "type": "string"
          },
          "statement_descriptor": {
            "description": "Extra information about a payout to be displayed on the user's bank statement.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Current status of the payout (`paid`, `pending`, `in_transit`, `canceled` or `failed`). A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. It will then change to `paid` if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.",
            "maxLength": 5000,
            "type": "string"
          },
          "type": {
            "description": "Can be `bank_account` or `card`.",
            "enum": ["bank_account", "card"],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "arrival_date",
          "automatic",
          "created",
          "currency",
          "id",
          "livemode",
          "metadata",
          "method",
          "object",
          "source_type",
          "status",
          "type"
        ],
        "title": "Payout",
        "type": "object",
        "x-expandableFields": [
          "balance_transaction",
          "destination",
          "failure_balance_transaction"
        ],
        "x-resourceId": "payout"
      },
      "period": {
        "properties": {
          "end": {
            "description": "The end date of this usage period. All usage up to and including this point in time is included.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "start": {
            "description": "The start date of this usage period. All usage after this point in time is included.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "Period",
        "type": "object",
        "x-expandableFields": []
      },
      "person": {
        "properties": {
          "account": {
            "maxLength": 5000,
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "address_kana": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/legal_entity_japan_address"
              }
            ],
            "nullable": true
          },
          "address_kanji": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/legal_entity_japan_address"
              }
            ],
            "nullable": true
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "dob": {
            "$ref": "#/components/schemas/legal_entity_dob"
          },
          "email": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "first_name": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "first_name_kana": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "first_name_kanji": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "gender": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "id_number_provided": {
            "type": "boolean"
          },
          "last_name": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "last_name_kana": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "last_name_kanji": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "maiden_name": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["person"],
            "type": "string"
          },
          "phone": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "relationship": {
            "$ref": "#/components/schemas/person_relationship"
          },
          "requirements": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/person_requirements"
              }
            ],
            "nullable": true
          },
          "ssn_last_4_provided": {
            "type": "boolean"
          },
          "verification": {
            "$ref": "#/components/schemas/legal_entity_person_verification"
          }
        },
        "required": ["account", "created", "id", "object"],
        "title": "Person",
        "type": "object",
        "x-expandableFields": [
          "address",
          "address_kana",
          "address_kanji",
          "dob",
          "relationship",
          "requirements",
          "verification"
        ],
        "x-resourceId": "person"
      },
      "person_relationship": {
        "properties": {
          "director": {
            "description": "Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.",
            "nullable": true,
            "type": "boolean"
          },
          "executive": {
            "description": "Whether the person has significant responsibility to control, manage, or direct the organization.",
            "nullable": true,
            "type": "boolean"
          },
          "owner": {
            "description": "Whether the person is an owner of the account’s legal entity.",
            "nullable": true,
            "type": "boolean"
          },
          "percent_ownership": {
            "description": "The percent owned by the person of the account's legal entity.",
            "nullable": true,
            "type": "number"
          },
          "representative": {
            "description": "Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.",
            "nullable": true,
            "type": "boolean"
          },
          "title": {
            "description": "The person's title (e.g., CEO, Support Engineer).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "PersonRelationship",
        "type": "object",
        "x-expandableFields": []
      },
      "person_requirements": {
        "properties": {
          "currently_due": {
            "description": "Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "eventually_due": {
            "description": "Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to `currently_due` and the account's `current_deadline` is set.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "past_due": {
            "description": "Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable payouts for the person's account.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "pending_verification": {
            "description": "Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "currently_due",
          "eventually_due",
          "past_due",
          "pending_verification"
        ],
        "title": "PersonRequirements",
        "type": "object",
        "x-expandableFields": []
      },
      "plan": {
        "properties": {
          "active": {
            "description": "Whether the plan is currently available for new subscriptions.",
            "type": "boolean"
          },
          "aggregate_usage": {
            "description": "Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.",
            "enum": ["last_during_period", "last_ever", "max", "sum"],
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "The amount in %s to be charged on the interval specified.",
            "nullable": true,
            "type": "integer"
          },
          "amount_decimal": {
            "description": "Same as `amount`, but contains a decimal value with at most 12 decimal places.",
            "format": "decimal",
            "nullable": true,
            "type": "string"
          },
          "billing_scheme": {
            "description": "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.",
            "enum": ["per_unit", "tiered"],
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "interval": {
            "description": "One of `day`, `week`, `month` or `year`. The frequency with which a subscription should be billed.",
            "enum": ["day", "month", "week", "year"],
            "type": "string"
          },
          "interval_count": {
            "description": "The number of intervals (specified in the `interval` property) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.",
            "type": "integer"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "nickname": {
            "description": "A brief description of the plan, hidden from customers.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["plan"],
            "type": "string"
          },
          "product": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/product"
              },
              {
                "$ref": "#/components/schemas/deleted_product"
              }
            ],
            "description": "The product whose pricing this plan determines.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/product"
                },
                {
                  "$ref": "#/components/schemas/deleted_product"
                }
              ]
            }
          },
          "tiers": {
            "description": "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.",
            "items": {
              "$ref": "#/components/schemas/plan_tier"
            },
            "nullable": true,
            "type": "array"
          },
          "tiers_mode": {
            "description": "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.",
            "enum": ["graduated", "volume"],
            "nullable": true,
            "type": "string"
          },
          "transform_usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/transform_usage"
              }
            ],
            "description": "Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.",
            "nullable": true
          },
          "trial_period_days": {
            "description": "Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).",
            "nullable": true,
            "type": "integer"
          },
          "usage_type": {
            "description": "Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.",
            "enum": ["licensed", "metered"],
            "type": "string"
          }
        },
        "required": [
          "active",
          "created",
          "currency",
          "id",
          "interval",
          "interval_count",
          "livemode",
          "metadata",
          "object",
          "usage_type"
        ],
        "title": "Plan",
        "type": "object",
        "x-expandableFields": ["product", "tiers", "transform_usage"],
        "x-resourceId": "plan"
      },
      "plan_tier": {
        "properties": {
          "flat_amount": {
            "description": "Price for the entire tier.",
            "nullable": true,
            "type": "integer"
          },
          "flat_amount_decimal": {
            "description": "Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.",
            "format": "decimal",
            "nullable": true,
            "type": "string"
          },
          "unit_amount": {
            "description": "Per unit price for units relevant to the tier.",
            "nullable": true,
            "type": "integer"
          },
          "unit_amount_decimal": {
            "description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.",
            "format": "decimal",
            "nullable": true,
            "type": "string"
          },
          "up_to": {
            "description": "Up to and including to this quantity will be contained in the tier.",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "PlanTier",
        "type": "object",
        "x-expandableFields": []
      },
      "platform_tax_fee": {
        "properties": {
          "account": {
            "description": "The Connected account that incurred this charge.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["platform_tax_fee"],
            "type": "string"
          },
          "source_transaction": {
            "description": "The payment object that caused this tax to be inflicted.",
            "maxLength": 5000,
            "type": "string"
          },
          "type": {
            "description": "The type of tax (VAT).",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["account", "id", "object", "source_transaction", "type"],
        "title": "PlatformTax",
        "type": "object",
        "x-expandableFields": []
      },
      "product": {
        "properties": {
          "active": {
            "description": "Whether the product is currently available for purchase.",
            "nullable": true,
            "type": "boolean"
          },
          "attributes": {
            "description": "A list of up to 5 attributes that each SKU can provide values for (e.g., `[\"color\", \"size\"]`).",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "caption": {
            "description": "A short one-line description of the product, meant to be displayable to the customer. Only applicable to products of `type=good`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "deactivate_on": {
            "description": "An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "images": {
            "description": "A list of up to 8 URLs of images for this product, meant to be displayable to the customer. Only applicable to products of `type=good`.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "name": {
            "description": "The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["product"],
            "type": "string"
          },
          "package_dimensions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/package_dimensions"
              }
            ],
            "description": "The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. Only applicable to products of `type=good`.",
            "nullable": true
          },
          "shippable": {
            "description": "Whether this product is a shipped good. Only applicable to products of `type=good`.",
            "nullable": true,
            "type": "boolean"
          },
          "statement_descriptor": {
            "description": "Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans.",
            "enum": ["good", "service"],
            "type": "string"
          },
          "unit_label": {
            "description": "A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "updated": {
            "format": "unix-time",
            "type": "integer"
          },
          "url": {
            "description": "A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`.",
            "maxLength": 2048,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "created",
          "id",
          "images",
          "livemode",
          "metadata",
          "name",
          "object",
          "type",
          "updated"
        ],
        "title": "Product",
        "type": "object",
        "x-expandableFields": ["package_dimensions"],
        "x-resourceId": "product"
      },
      "radar.early_fraud_warning": {
        "properties": {
          "actionable": {
            "description": "An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.",
            "type": "boolean"
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the charge this early fraud warning is for, optionally expanded.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "fraud_type": {
            "description": "The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["radar.early_fraud_warning"],
            "type": "string"
          }
        },
        "required": [
          "actionable",
          "charge",
          "created",
          "fraud_type",
          "id",
          "livemode",
          "object"
        ],
        "title": "RadarEarlyFraudWarning",
        "type": "object",
        "x-expandableFields": ["charge"],
        "x-resourceId": "radar.early_fraud_warning"
      },
      "radar.value_list": {
        "properties": {
          "alias": {
            "description": "The name of the value list for use in rules.",
            "maxLength": 5000,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "created_by": {
            "description": "The name or email address of the user who created this value list.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "item_type": {
            "description": "The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`.",
            "enum": [
              "card_bin",
              "card_fingerprint",
              "case_sensitive_string",
              "country",
              "email",
              "ip_address",
              "string"
            ],
            "type": "string"
          },
          "list_items": {
            "description": "List of items contained within this value list.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/radar.value_list_item"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "RadarListListItemList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "name": {
            "description": "The name of the value list.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["radar.value_list"],
            "type": "string"
          }
        },
        "required": [
          "alias",
          "created",
          "created_by",
          "id",
          "item_type",
          "list_items",
          "livemode",
          "metadata",
          "name",
          "object"
        ],
        "title": "RadarListList",
        "type": "object",
        "x-expandableFields": ["list_items"],
        "x-resourceId": "radar.value_list"
      },
      "radar.value_list_item": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "created_by": {
            "description": "The name or email address of the user who added this item to the value list.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["radar.value_list_item"],
            "type": "string"
          },
          "value": {
            "description": "The value of the item.",
            "maxLength": 5000,
            "type": "string"
          },
          "value_list": {
            "description": "The identifier of the value list this item belongs to.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "created",
          "created_by",
          "id",
          "livemode",
          "object",
          "value",
          "value_list"
        ],
        "title": "RadarListListItem",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "radar.value_list_item"
      },
      "radar_review_resource_location": {
        "properties": {
          "city": {
            "description": "The city where the payment originated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "Two-letter ISO code representing the country where the payment originated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "latitude": {
            "description": "The geographic latitude where the payment originated.",
            "nullable": true,
            "type": "number"
          },
          "longitude": {
            "description": "The geographic longitude where the payment originated.",
            "nullable": true,
            "type": "number"
          },
          "region": {
            "description": "The state/county/province/region where the payment originated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "RadarReviewResourceLocation",
        "type": "object",
        "x-expandableFields": []
      },
      "radar_review_resource_session": {
        "properties": {
          "browser": {
            "description": "The browser used in this browser session (e.g., `Chrome`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "device": {
            "description": "Information about the device used for the browser session (e.g., `Samsung SM-G930T`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "platform": {
            "description": "The platform for the browser session (e.g., `Macintosh`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "version": {
            "description": "The version for the browser session (e.g., `61.0.3163.100`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "RadarReviewResourceSession",
        "type": "object",
        "x-expandableFields": []
      },
      "recipient": {
        "properties": {
          "active_account": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/bank_account"
              }
            ],
            "description": "Hash describing the current account on the recipient, if there is one.",
            "nullable": true
          },
          "cards": {
            "nullable": true,
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/card"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "CardList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "default_card": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/card"
              }
            ],
            "description": "The default card to use for creating transfers to this recipient.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/card"
                }
              ]
            }
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "email": {
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "migrated_to": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "name": {
            "description": "Full, legal name of the recipient.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["recipient"],
            "type": "string"
          },
          "rolled_back_from": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "type": {
            "description": "Type of the recipient, one of `individual` or `corporation`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["created", "id", "livemode", "metadata", "object", "type"],
        "title": "TransferRecipient",
        "type": "object",
        "x-expandableFields": [
          "active_account",
          "cards",
          "default_card",
          "migrated_to",
          "rolled_back_from"
        ],
        "x-resourceId": "recipient"
      },
      "refund": {
        "properties": {
          "amount": {
            "description": "Amount, in %s.",
            "type": "integer"
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "Balance transaction that describes the impact on your account balance.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the charge that was refunded.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)",
            "maxLength": 5000,
            "type": "string"
          },
          "failure_balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "failure_reason": {
            "description": "If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["refund"],
            "type": "string"
          },
          "payment_intent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_intent"
              }
            ],
            "description": "ID of the PaymentIntent that was refunded.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_intent"
                }
              ]
            }
          },
          "reason": {
            "description": "Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "receipt_number": {
            "description": "This is the transaction number that appears on email receipts sent for this refund.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "source_transfer_reversal": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/transfer_reversal"
              }
            ],
            "description": "The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/transfer_reversal"
                }
              ]
            }
          },
          "status": {
            "description": "Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "transfer_reversal": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/transfer_reversal"
              }
            ],
            "description": "If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/transfer_reversal"
                }
              ]
            }
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "metadata",
          "object"
        ],
        "title": "Refund",
        "type": "object",
        "x-expandableFields": [
          "balance_transaction",
          "charge",
          "failure_balance_transaction",
          "payment_intent",
          "source_transfer_reversal",
          "transfer_reversal"
        ],
        "x-resourceId": "refund"
      },
      "reporting.report_run": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "error": {
            "description": "If something should go wrong during the run, a message about the failure (populated when\n `status=failed`).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Always `true`: reports can only be run on live-mode data.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["reporting.report_run"],
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/financial_reporting_finance_report_run_run_parameters"
          },
          "report_type": {
            "description": "The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `\"balance.summary.1\"`.",
            "maxLength": 5000,
            "type": "string"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The file object representing the result of the report run (populated when\n `status=succeeded`).",
            "nullable": true
          },
          "status": {
            "description": "Status of this report run. This will be `pending` when the run is initially created.\n When the run finishes, this will be set to `succeeded` and the `result` field will be populated.\n Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.",
            "maxLength": 5000,
            "type": "string"
          },
          "succeeded_at": {
            "description": "Timestamp at which this run successfully finished (populated when\n `status=succeeded`). Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "created",
          "id",
          "livemode",
          "object",
          "parameters",
          "report_type",
          "status"
        ],
        "title": "reporting_report_run",
        "type": "object",
        "x-expandableFields": ["parameters", "result"],
        "x-resourceId": "reporting.report_run"
      },
      "reporting.report_type": {
        "properties": {
          "data_available_end": {
            "description": "Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "data_available_start": {
            "description": "Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "default_columns": {
            "description": "List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "description": "The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.",
            "maxLength": 5000,
            "type": "string"
          },
          "name": {
            "description": "Human-readable name of the Report Type",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["reporting.report_type"],
            "type": "string"
          },
          "updated": {
            "description": "When this Report Type was latest updated. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "version": {
            "description": "Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.",
            "type": "integer"
          }
        },
        "required": [
          "data_available_end",
          "data_available_start",
          "id",
          "name",
          "object",
          "updated",
          "version"
        ],
        "title": "reporting_report_type",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "reporting.report_type"
      },
      "reserve_transaction": {
        "properties": {
          "amount": {
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["reserve_transaction"],
            "type": "string"
          }
        },
        "required": ["amount", "currency", "id", "object"],
        "title": "ReserveTransaction",
        "type": "object",
        "x-expandableFields": []
      },
      "review": {
        "properties": {
          "billing_zip": {
            "description": "The ZIP or postal code of the card used, if applicable.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "charge": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "The charge associated with this review.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "closed_reason": {
            "description": "The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, or `disputed`.",
            "enum": ["approved", "disputed", "refunded", "refunded_as_fraud"],
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "ip_address": {
            "description": "The IP address where the payment originated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "ip_address_location": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/radar_review_resource_location"
              }
            ],
            "description": "Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.",
            "nullable": true
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["review"],
            "type": "string"
          },
          "open": {
            "description": "If `true`, the review needs action.",
            "type": "boolean"
          },
          "opened_reason": {
            "description": "The reason the review was opened. One of `rule` or `manual`.",
            "enum": ["manual", "rule"],
            "type": "string"
          },
          "payment_intent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_intent"
              }
            ],
            "description": "The PaymentIntent ID associated with this review, if one exists.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_intent"
                }
              ]
            }
          },
          "reason": {
            "description": "The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, or `disputed`.",
            "maxLength": 5000,
            "type": "string"
          },
          "session": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/radar_review_resource_session"
              }
            ],
            "description": "Information related to the browsing session of the user who initiated the payment.",
            "nullable": true
          }
        },
        "required": [
          "created",
          "id",
          "livemode",
          "object",
          "open",
          "opened_reason",
          "reason"
        ],
        "title": "RadarReview",
        "type": "object",
        "x-expandableFields": [
          "charge",
          "ip_address_location",
          "payment_intent",
          "session"
        ],
        "x-resourceId": "review"
      },
      "rule": {
        "properties": {
          "action": {
            "description": "The action taken on the payment.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "predicate": {
            "description": "The predicate to evaluate the payment against.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["action", "id", "predicate"],
        "title": "RadarRule",
        "type": "object",
        "x-expandableFields": []
      },
      "scheduled_query_run": {
        "properties": {
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "data_load_time": {
            "description": "When the query was run, Sigma contained a snapshot of your Stripe data at this time.",
            "format": "unix-time",
            "type": "integer"
          },
          "error": {
            "$ref": "#/components/schemas/sigma_scheduled_query_run_error"
          },
          "file": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "description": "The file object representing the results of the query.",
            "nullable": true
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["scheduled_query_run"],
            "type": "string"
          },
          "result_available_until": {
            "description": "Time at which the result expires and is no longer available for download.",
            "format": "unix-time",
            "type": "integer"
          },
          "sql": {
            "description": "SQL for the query.",
            "maxLength": 100000,
            "type": "string"
          },
          "status": {
            "description": "The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.",
            "maxLength": 5000,
            "type": "string"
          },
          "title": {
            "description": "Title of the query.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "created",
          "data_load_time",
          "id",
          "livemode",
          "object",
          "result_available_until",
          "sql",
          "status",
          "title"
        ],
        "title": "ScheduledQueryRun",
        "type": "object",
        "x-expandableFields": ["error", "file"],
        "x-resourceId": "scheduled_query_run"
      },
      "setup_intent": {
        "properties": {
          "application": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/application"
              }
            ],
            "description": "ID of the Connect application that created the SetupIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/application"
                }
              ]
            }
          },
          "cancellation_reason": {
            "description": "Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.",
            "enum": ["abandoned", "duplicate", "requested_by_customer"],
            "nullable": true,
            "type": "string"
          },
          "client_secret": {
            "description": "The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.\n\nThe client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "ID of the Customer this SetupIntent belongs to, if one exists.\n\nIf present, payment methods used with this SetupIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this SetupIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "last_setup_error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api_errors"
              }
            ],
            "description": "The error encountered in the previous SetupIntent confirmation.",
            "nullable": true
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "mandate": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/mandate"
              }
            ],
            "description": "ID of the multi use Mandate generated by the SetupIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/mandate"
                }
              ]
            }
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "next_action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/setup_intent_next_action"
              }
            ],
            "description": "If present, this property tells you what actions you need to take in order for your customer to continue payment setup.",
            "nullable": true
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["setup_intent"],
            "type": "string"
          },
          "on_behalf_of": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "The account (if any) for which the setup is intended.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of the payment method used with this SetupIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "payment_method_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/setup_intent_payment_method_options"
              }
            ],
            "description": "Payment-method-specific configuration for this SetupIntent.",
            "nullable": true
          },
          "payment_method_types": {
            "description": "The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "single_use_mandate": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/mandate"
              }
            ],
            "description": "ID of the single_use Mandate generated by the SetupIntent.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/mandate"
                }
              ]
            }
          },
          "status": {
            "description": "[Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.",
            "enum": [
              "canceled",
              "processing",
              "requires_action",
              "requires_confirmation",
              "requires_payment_method",
              "succeeded"
            ],
            "type": "string"
          },
          "usage": {
            "description": "Indicates how the payment method is intended to be used in the future.\n\nUse `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "created",
          "id",
          "livemode",
          "object",
          "payment_method_types",
          "status",
          "usage"
        ],
        "title": "SetupIntent",
        "type": "object",
        "x-expandableFields": [
          "application",
          "customer",
          "last_setup_error",
          "mandate",
          "next_action",
          "on_behalf_of",
          "payment_method",
          "payment_method_options",
          "single_use_mandate"
        ],
        "x-resourceId": "setup_intent"
      },
      "setup_intent_next_action": {
        "properties": {
          "redirect_to_url": {
            "$ref": "#/components/schemas/setup_intent_next_action_redirect_to_url"
          },
          "type": {
            "description": "Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`.",
            "maxLength": 5000,
            "type": "string"
          },
          "use_stripe_sdk": {
            "description": "When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.",
            "type": "object"
          }
        },
        "required": ["type"],
        "title": "SetupIntentNextAction",
        "type": "object",
        "x-expandableFields": ["redirect_to_url"]
      },
      "setup_intent_next_action_redirect_to_url": {
        "properties": {
          "return_url": {
            "description": "If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The URL you must redirect your customer to in order to authenticate.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "SetupIntentNextActionRedirectToUrl",
        "type": "object",
        "x-expandableFields": []
      },
      "setup_intent_payment_method_options": {
        "properties": {
          "card": {
            "$ref": "#/components/schemas/setup_intent_payment_method_options_card"
          }
        },
        "title": "SetupIntentPaymentMethodOptions",
        "type": "object",
        "x-expandableFields": ["card"]
      },
      "setup_intent_payment_method_options_card": {
        "properties": {
          "request_three_d_secure": {
            "description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.",
            "enum": ["any", "automatic", "challenge_only"],
            "nullable": true,
            "type": "string"
          }
        },
        "title": "setup_intent_payment_method_options_card",
        "type": "object",
        "x-expandableFields": []
      },
      "shipping": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "carrier": {
            "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Recipient name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "description": "Recipient phone (including extension).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "tracking_number": {
            "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "Shipping",
        "type": "object",
        "x-expandableFields": ["address"]
      },
      "shipping_method": {
        "properties": {
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "delivery_estimate": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/delivery_estimate"
              }
            ],
            "description": "The estimated delivery date for the given shipping method. Can be either a specific date or a range.",
            "nullable": true
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["amount", "currency", "description", "id"],
        "title": "ShippingMethod",
        "type": "object",
        "x-expandableFields": ["delivery_estimate"]
      },
      "sigma_scheduled_query_run_error": {
        "properties": {
          "message": {
            "description": "Information about the run failure.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["message"],
        "title": "SigmaScheduledQueryRunError",
        "type": "object",
        "x-expandableFields": []
      },
      "sku": {
        "properties": {
          "active": {
            "description": "Whether the SKU is available for purchase.",
            "type": "boolean"
          },
          "attributes": {
            "additionalProperties": {
              "maxLength": 5000,
              "type": "string"
            },
            "description": "A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `[\"size\", \"gender\"]`, a valid SKU has the following dictionary of attributes: `{\"size\": \"Medium\", \"gender\": \"Unisex\"}`.",
            "type": "object"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "image": {
            "description": "The URL of an image for this SKU, meant to be displayable to the customer.",
            "maxLength": 2048,
            "nullable": true,
            "type": "string"
          },
          "inventory": {
            "$ref": "#/components/schemas/inventory"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["sku"],
            "type": "string"
          },
          "package_dimensions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/package_dimensions"
              }
            ],
            "description": "The dimensions of this SKU for shipping purposes.",
            "nullable": true
          },
          "price": {
            "description": "The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).",
            "type": "integer"
          },
          "product": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/product"
              }
            ],
            "description": "The ID of the product this SKU is associated with. The product must be currently active.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/product"
                }
              ]
            }
          },
          "updated": {
            "format": "unix-time",
            "type": "integer"
          }
        },
        "required": [
          "active",
          "attributes",
          "created",
          "currency",
          "id",
          "inventory",
          "livemode",
          "metadata",
          "object",
          "price",
          "product",
          "updated"
        ],
        "title": "SKU",
        "type": "object",
        "x-expandableFields": ["inventory", "package_dimensions", "product"],
        "x-resourceId": "sku"
      },
      "source": {
        "properties": {
          "ach_credit_transfer": {
            "$ref": "#/components/schemas/source_type_ach_credit_transfer"
          },
          "ach_debit": {
            "$ref": "#/components/schemas/source_type_ach_debit"
          },
          "alipay": {
            "$ref": "#/components/schemas/source_type_alipay"
          },
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.",
            "nullable": true,
            "type": "integer"
          },
          "bancontact": {
            "$ref": "#/components/schemas/source_type_bancontact"
          },
          "card": {
            "$ref": "#/components/schemas/source_type_card"
          },
          "card_present": {
            "$ref": "#/components/schemas/source_type_card_present"
          },
          "client_secret": {
            "description": "The client secret of the source. Used for client-side retrieval using a publishable key.",
            "maxLength": 5000,
            "type": "string"
          },
          "code_verification": {
            "$ref": "#/components/schemas/source_code_verification_flow"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.",
            "nullable": true,
            "type": "string"
          },
          "customer": {
            "description": "The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.",
            "maxLength": 5000,
            "type": "string"
          },
          "eps": {
            "$ref": "#/components/schemas/source_type_eps"
          },
          "flow": {
            "description": "The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.",
            "maxLength": 5000,
            "type": "string"
          },
          "giropay": {
            "$ref": "#/components/schemas/source_type_giropay"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "ideal": {
            "$ref": "#/components/schemas/source_type_ideal"
          },
          "klarna": {
            "$ref": "#/components/schemas/source_type_klarna"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "nullable": true,
            "type": "object"
          },
          "multibanco": {
            "$ref": "#/components/schemas/source_type_multibanco"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["source"],
            "type": "string"
          },
          "owner": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/source_owner"
              }
            ],
            "description": "Information about the owner of the payment instrument that may be used or required by particular source types.",
            "nullable": true
          },
          "p24": {
            "$ref": "#/components/schemas/source_type_p24"
          },
          "receiver": {
            "$ref": "#/components/schemas/source_receiver_flow"
          },
          "redirect": {
            "$ref": "#/components/schemas/source_redirect_flow"
          },
          "sepa_debit": {
            "$ref": "#/components/schemas/source_type_sepa_debit"
          },
          "sofort": {
            "$ref": "#/components/schemas/source_type_sofort"
          },
          "source_order": {
            "$ref": "#/components/schemas/source_order"
          },
          "statement_descriptor": {
            "description": "Extra information about a source. This will appear on your customer's statement every time you charge the source.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.",
            "maxLength": 5000,
            "type": "string"
          },
          "three_d_secure": {
            "$ref": "#/components/schemas/source_type_three_d_secure"
          },
          "type": {
            "description": "The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.",
            "enum": [
              "ach_credit_transfer",
              "ach_debit",
              "alipay",
              "bancontact",
              "card",
              "card_present",
              "eps",
              "giropay",
              "ideal",
              "klarna",
              "multibanco",
              "p24",
              "sepa_debit",
              "sofort",
              "three_d_secure",
              "wechat"
            ],
            "type": "string",
            "x-stripeBypassValidation": true
          },
          "usage": {
            "description": "Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "wechat": {
            "$ref": "#/components/schemas/source_type_wechat"
          }
        },
        "required": [
          "client_secret",
          "created",
          "flow",
          "id",
          "livemode",
          "object",
          "status",
          "type"
        ],
        "title": "Source",
        "type": "object",
        "x-expandableFields": [
          "code_verification",
          "owner",
          "receiver",
          "redirect",
          "source_order"
        ],
        "x-resourceId": "source"
      },
      "source_code_verification_flow": {
        "properties": {
          "attempts_remaining": {
            "description": "The number of attempts remaining to authenticate the source object with a verification code.",
            "type": "integer"
          },
          "status": {
            "description": "The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["attempts_remaining", "status"],
        "title": "SourceCodeVerificationFlow",
        "type": "object",
        "x-expandableFields": []
      },
      "source_mandate_notification": {
        "properties": {
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.",
            "nullable": true,
            "type": "integer"
          },
          "bacs_debit": {
            "$ref": "#/components/schemas/source_mandate_notification_bacs_debit_data"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["source_mandate_notification"],
            "type": "string"
          },
          "reason": {
            "description": "The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.",
            "maxLength": 5000,
            "type": "string"
          },
          "sepa_debit": {
            "$ref": "#/components/schemas/source_mandate_notification_sepa_debit_data"
          },
          "source": {
            "$ref": "#/components/schemas/source"
          },
          "status": {
            "description": "The status of the mandate notification. Valid statuses are `pending` or `submitted`.",
            "maxLength": 5000,
            "type": "string"
          },
          "type": {
            "description": "The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "created",
          "id",
          "livemode",
          "object",
          "reason",
          "source",
          "status",
          "type"
        ],
        "title": "SourceMandateNotification",
        "type": "object",
        "x-expandableFields": ["bacs_debit", "sepa_debit", "source"],
        "x-resourceId": "source_mandate_notification"
      },
      "source_mandate_notification_bacs_debit_data": {
        "properties": {
          "last4": {
            "description": "Last 4 digits of the account number associated with the debit.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "SourceMandateNotificationBacsDebitData",
        "type": "object",
        "x-expandableFields": []
      },
      "source_mandate_notification_sepa_debit_data": {
        "properties": {
          "creditor_identifier": {
            "description": "SEPA creditor ID.",
            "maxLength": 5000,
            "type": "string"
          },
          "last4": {
            "description": "Last 4 digits of the account number associated with the debit.",
            "maxLength": 5000,
            "type": "string"
          },
          "mandate_reference": {
            "description": "Mandate reference associated with the debit.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "SourceMandateNotificationSepaDebitData",
        "type": "object",
        "x-expandableFields": []
      },
      "source_order": {
        "properties": {
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "email": {
            "description": "The email address of the customer placing the order.",
            "maxLength": 5000,
            "type": "string"
          },
          "items": {
            "description": "List of items constituting the order.",
            "items": {
              "$ref": "#/components/schemas/source_order_item"
            },
            "nullable": true,
            "type": "array"
          },
          "shipping": {
            "$ref": "#/components/schemas/shipping"
          }
        },
        "required": ["amount", "currency"],
        "title": "SourceOrder",
        "type": "object",
        "x-expandableFields": ["items", "shipping"]
      },
      "source_order_item": {
        "properties": {
          "amount": {
            "description": "The amount (price) for this order item.",
            "nullable": true,
            "type": "integer"
          },
          "currency": {
            "description": "This currency of this order item. Required when `amount` is present.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Human-readable description for this order item.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "quantity": {
            "description": "The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.",
            "type": "integer"
          },
          "type": {
            "description": "The type of this order item. Must be `sku`, `tax`, or `shipping`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "SourceOrderItem",
        "type": "object",
        "x-expandableFields": []
      },
      "source_owner": {
        "properties": {
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Owner's address.",
            "nullable": true
          },
          "email": {
            "description": "Owner's email address.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Owner's full name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "phone": {
            "description": "Owner's phone number (including extension).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/address"
              }
            ],
            "description": "Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "nullable": true
          },
          "verified_email": {
            "description": "Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_name": {
            "description": "Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_phone": {
            "description": "Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "title": "SourceOwner",
        "type": "object",
        "x-expandableFields": ["address", "verified_address"]
      },
      "source_receiver_flow": {
        "properties": {
          "address": {
            "description": "The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "amount_charged": {
            "description": "The total amount that was charged by you. The amount charged is expressed in the source's currency.",
            "type": "integer"
          },
          "amount_received": {
            "description": "The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` is true at all time. The amount received is expressed in the source's currency.",
            "type": "integer"
          },
          "amount_returned": {
            "description": "The total amount that was returned to the customer. The amount returned is expressed in the source's currency.",
            "type": "integer"
          },
          "refund_attributes_method": {
            "description": "Type of refund attribute method, one of `email`, `manual`, or `none`.",
            "maxLength": 5000,
            "type": "string"
          },
          "refund_attributes_status": {
            "description": "Type of refund attribute status, one of `missing`, `requested`, or `available`.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "amount_charged",
          "amount_received",
          "amount_returned",
          "refund_attributes_method",
          "refund_attributes_status"
        ],
        "title": "SourceReceiverFlow",
        "type": "object",
        "x-expandableFields": []
      },
      "source_redirect_flow": {
        "properties": {
          "failure_reason": {
            "description": "The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "return_url": {
            "description": "The URL you provide to redirect the customer to after they authenticated their payment.",
            "maxLength": 5000,
            "type": "string"
          },
          "status": {
            "description": "The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).",
            "maxLength": 5000,
            "type": "string"
          },
          "url": {
            "description": "The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.",
            "maxLength": 2048,
            "type": "string"
          }
        },
        "required": ["return_url", "status", "url"],
        "title": "SourceRedirectFlow",
        "type": "object",
        "x-expandableFields": []
      },
      "source_transaction": {
        "properties": {
          "ach_credit_transfer": {
            "$ref": "#/components/schemas/source_transaction_ach_credit_transfer_data"
          },
          "amount": {
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.",
            "type": "integer"
          },
          "chf_credit_transfer": {
            "$ref": "#/components/schemas/source_transaction_chf_credit_transfer_data"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "gbp_credit_transfer": {
            "$ref": "#/components/schemas/source_transaction_gbp_credit_transfer_data"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["source_transaction"],
            "type": "string"
          },
          "paper_check": {
            "$ref": "#/components/schemas/source_transaction_paper_check_data"
          },
          "sepa_credit_transfer": {
            "$ref": "#/components/schemas/source_transaction_sepa_credit_transfer_data"
          },
          "source": {
            "description": "The ID of the source this transaction is attached to.",
            "maxLength": 5000,
            "type": "string"
          },
          "status": {
            "description": "The status of the transaction, one of `succeeded`, `pending`, or `failed`.",
            "maxLength": 5000,
            "type": "string"
          },
          "type": {
            "description": "The type of source this transaction is attached to.",
            "enum": [
              "ach_credit_transfer",
              "ach_debit",
              "alipay",
              "bancontact",
              "card",
              "card_present",
              "eps",
              "giropay",
              "ideal",
              "klarna",
              "multibanco",
              "p24",
              "sepa_debit",
              "sofort",
              "three_d_secure",
              "wechat"
            ],
            "type": "string"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "livemode",
          "object",
          "source",
          "status",
          "type"
        ],
        "title": "SourceTransaction",
        "type": "object",
        "x-expandableFields": [
          "ach_credit_transfer",
          "chf_credit_transfer",
          "gbp_credit_transfer",
          "paper_check",
          "sepa_credit_transfer"
        ],
        "x-resourceId": "source_transaction"
      },
      "source_transaction_ach_credit_transfer_data": {
        "properties": {
          "customer_data": {
            "description": "Customer data associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "fingerprint": {
            "description": "Bank account fingerprint associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "last4": {
            "description": "Last 4 digits of the account number associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "routing_number": {
            "description": "Routing number associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "SourceTransactionAchCreditTransferData",
        "type": "object",
        "x-expandableFields": []
      },
      "source_transaction_chf_credit_transfer_data": {
        "properties": {
          "reference": {
            "description": "Reference associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "sender_address_country": {
            "description": "Sender's country address.",
            "maxLength": 5000,
            "type": "string"
          },
          "sender_address_line1": {
            "description": "Sender's line 1 address.",
            "maxLength": 5000,
            "type": "string"
          },
          "sender_iban": {
            "description": "Sender's bank account IBAN.",
            "maxLength": 5000,
            "type": "string"
          },
          "sender_name": {
            "description": "Sender's name.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "SourceTransactionChfCreditTransferData",
        "type": "object",
        "x-expandableFields": []
      },
      "source_transaction_gbp_credit_transfer_data": {
        "properties": {
          "fingerprint": {
            "description": "Bank account fingerprint associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "funding_method": {
            "description": "The credit transfer rails the sender used to push money. The three rails are: Faster Payments, BACS, and CHAPS.",
            "maxLength": 5000,
            "type": "string"
          },
          "last4": {
            "description": "Last 4 digits of account number associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "reference": {
            "description": "Sender entered arbitrary information about the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "sender_name": {
            "description": "Sender name associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "sort_code": {
            "description": "Sort code associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "SourceTransactionGbpCreditTransferData",
        "type": "object",
        "x-expandableFields": []
      },
      "source_transaction_paper_check_data": {
        "properties": {
          "available_at": {
            "description": "String unix time for the available date.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoices": {
            "description": "Invoice ID associated with the paper check.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "SourceTransactionPaperCheckData",
        "type": "object",
        "x-expandableFields": []
      },
      "source_transaction_sepa_credit_transfer_data": {
        "properties": {
          "reference": {
            "description": "Reference associated with the transfer.",
            "maxLength": 5000,
            "type": "string"
          },
          "sender_iban": {
            "description": "Sender's bank account IBAN.",
            "maxLength": 5000,
            "type": "string"
          },
          "sender_name": {
            "description": "Sender's name.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "title": "SourceTransactionSepaCreditTransferData",
        "type": "object",
        "x-expandableFields": []
      },
      "source_type_ach_credit_transfer": {
        "properties": {
          "account_number": {
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "nullable": true,
            "type": "string"
          },
          "fingerprint": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_name": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_type": {
            "nullable": true,
            "type": "string"
          },
          "refund_routing_number": {
            "nullable": true,
            "type": "string"
          },
          "routing_number": {
            "nullable": true,
            "type": "string"
          },
          "swift_code": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_ach_debit": {
        "properties": {
          "bank_name": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "fingerprint": {
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "nullable": true,
            "type": "string"
          },
          "routing_number": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_alipay": {
        "properties": {
          "data_string": {
            "nullable": true,
            "type": "string"
          },
          "native_url": {
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_bancontact": {
        "properties": {
          "bank_code": {
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "nullable": true,
            "type": "string"
          },
          "iban_last4": {
            "nullable": true,
            "type": "string"
          },
          "preferred_language": {
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_card": {
        "properties": {
          "address_line1_check": {
            "nullable": true,
            "type": "string"
          },
          "address_zip_check": {
            "nullable": true,
            "type": "string"
          },
          "brand": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "cvc_check": {
            "nullable": true,
            "type": "string"
          },
          "dynamic_last4": {
            "nullable": true,
            "type": "string"
          },
          "exp_month": {
            "nullable": true,
            "type": "integer"
          },
          "exp_year": {
            "nullable": true,
            "type": "integer"
          },
          "fingerprint": {
            "type": "string"
          },
          "funding": {
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "three_d_secure": {
            "type": "string"
          },
          "tokenization_method": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_card_present": {
        "properties": {
          "application_cryptogram": {
            "type": "string"
          },
          "application_preferred_name": {
            "type": "string"
          },
          "authorization_code": {
            "nullable": true,
            "type": "string"
          },
          "authorization_response_code": {
            "type": "string"
          },
          "brand": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "cvm_type": {
            "type": "string"
          },
          "data_type": {
            "nullable": true,
            "type": "string"
          },
          "dedicated_file_name": {
            "type": "string"
          },
          "emv_auth_data": {
            "type": "string"
          },
          "evidence_customer_signature": {
            "nullable": true,
            "type": "string"
          },
          "evidence_transaction_certificate": {
            "nullable": true,
            "type": "string"
          },
          "exp_month": {
            "nullable": true,
            "type": "integer"
          },
          "exp_year": {
            "nullable": true,
            "type": "integer"
          },
          "fingerprint": {
            "type": "string"
          },
          "funding": {
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "nullable": true,
            "type": "string"
          },
          "pos_device_id": {
            "nullable": true,
            "type": "string"
          },
          "pos_entry_mode": {
            "type": "string"
          },
          "read_method": {
            "nullable": true,
            "type": "string"
          },
          "reader": {
            "nullable": true,
            "type": "string"
          },
          "terminal_verification_results": {
            "type": "string"
          },
          "transaction_status_information": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_eps": {
        "properties": {
          "reference": {
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_giropay": {
        "properties": {
          "bank_code": {
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_ideal": {
        "properties": {
          "bank": {
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "nullable": true,
            "type": "string"
          },
          "iban_last4": {
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_klarna": {
        "properties": {
          "background_image_url": {
            "type": "string"
          },
          "client_token": {
            "nullable": true,
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "page_title": {
            "type": "string"
          },
          "pay_later_asset_urls_descriptive": {
            "type": "string"
          },
          "pay_later_asset_urls_standard": {
            "type": "string"
          },
          "pay_later_name": {
            "type": "string"
          },
          "pay_later_redirect_url": {
            "type": "string"
          },
          "pay_now_asset_urls_descriptive": {
            "type": "string"
          },
          "pay_now_asset_urls_standard": {
            "type": "string"
          },
          "pay_now_name": {
            "type": "string"
          },
          "pay_now_redirect_url": {
            "type": "string"
          },
          "pay_over_time_asset_urls_descriptive": {
            "type": "string"
          },
          "pay_over_time_asset_urls_standard": {
            "type": "string"
          },
          "pay_over_time_name": {
            "type": "string"
          },
          "pay_over_time_redirect_url": {
            "type": "string"
          },
          "payment_method_categories": {
            "type": "string"
          },
          "purchase_country": {
            "type": "string"
          },
          "purchase_type": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "shipping_first_name": {
            "type": "string"
          },
          "shipping_last_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_multibanco": {
        "properties": {
          "entity": {
            "nullable": true,
            "type": "string"
          },
          "reference": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_address_city": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_address_country": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_address_line1": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_address_line2": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_address_postal_code": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_address_state": {
            "nullable": true,
            "type": "string"
          },
          "refund_account_holder_name": {
            "nullable": true,
            "type": "string"
          },
          "refund_iban": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_p24": {
        "properties": {
          "reference": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_sepa_debit": {
        "properties": {
          "bank_code": {
            "nullable": true,
            "type": "string"
          },
          "branch_code": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "fingerprint": {
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "nullable": true,
            "type": "string"
          },
          "mandate_reference": {
            "nullable": true,
            "type": "string"
          },
          "mandate_url": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_sofort": {
        "properties": {
          "bank_code": {
            "nullable": true,
            "type": "string"
          },
          "bank_name": {
            "nullable": true,
            "type": "string"
          },
          "bic": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "iban_last4": {
            "nullable": true,
            "type": "string"
          },
          "preferred_language": {
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_three_d_secure": {
        "properties": {
          "address_line1_check": {
            "nullable": true,
            "type": "string"
          },
          "address_zip_check": {
            "nullable": true,
            "type": "string"
          },
          "authenticated": {
            "nullable": true,
            "type": "boolean"
          },
          "brand": {
            "nullable": true,
            "type": "string"
          },
          "card": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "nullable": true,
            "type": "string"
          },
          "customer": {
            "nullable": true,
            "type": "string"
          },
          "cvc_check": {
            "nullable": true,
            "type": "string"
          },
          "dynamic_last4": {
            "nullable": true,
            "type": "string"
          },
          "exp_month": {
            "nullable": true,
            "type": "integer"
          },
          "exp_year": {
            "nullable": true,
            "type": "integer"
          },
          "fingerprint": {
            "type": "string"
          },
          "funding": {
            "nullable": true,
            "type": "string"
          },
          "last4": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "three_d_secure": {
            "type": "string"
          },
          "tokenization_method": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "source_type_wechat": {
        "properties": {
          "prepay_id": {
            "type": "string"
          },
          "qr_code_url": {
            "nullable": true,
            "type": "string"
          },
          "statement_descriptor": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "status_transitions": {
        "properties": {
          "canceled": {
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "fulfiled": {
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "paid": {
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "returned": {
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "StatusTransitions",
        "type": "object",
        "x-expandableFields": []
      },
      "subscription": {
        "properties": {
          "application_fee_percent": {
            "description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.",
            "nullable": true,
            "type": "number"
          },
          "billing_cycle_anchor": {
            "description": "Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.",
            "format": "unix-time",
            "type": "integer"
          },
          "billing_thresholds": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/subscription_billing_thresholds"
              }
            ],
            "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period",
            "nullable": true
          },
          "cancel_at": {
            "description": "A date in the future at which the subscription will automatically get canceled",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "cancel_at_period_end": {
            "description": "If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.",
            "type": "boolean"
          },
          "canceled_at": {
            "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "collection_method": {
            "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.",
            "enum": ["charge_automatically", "send_invoice"],
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "current_period_end": {
            "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.",
            "format": "unix-time",
            "type": "integer"
          },
          "current_period_start": {
            "description": "Start of the current period that the subscription has been invoiced for.",
            "format": "unix-time",
            "type": "integer"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "ID of the customer who owns the subscription.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "days_until_due": {
            "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.",
            "nullable": true,
            "type": "integer"
          },
          "default_payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "default_source": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/alipay_account"
              },
              {
                "$ref": "#/components/schemas/bank_account"
              },
              {
                "$ref": "#/components/schemas/bitcoin_receiver"
              },
              {
                "$ref": "#/components/schemas/card"
              },
              {
                "$ref": "#/components/schemas/source"
              }
            ],
            "description": "ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/alipay_account"
                },
                {
                  "$ref": "#/components/schemas/bank_account"
                },
                {
                  "$ref": "#/components/schemas/bitcoin_receiver"
                },
                {
                  "$ref": "#/components/schemas/card"
                },
                {
                  "$ref": "#/components/schemas/source"
                }
              ]
            }
          },
          "default_tax_rates": {
            "description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.",
            "items": {
              "$ref": "#/components/schemas/tax_rate"
            },
            "nullable": true,
            "type": "array"
          },
          "discount": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/discount"
              }
            ],
            "description": "Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.",
            "nullable": true
          },
          "ended_at": {
            "description": "If the subscription has ended, the date the subscription ended.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "items": {
            "description": "List of subscription items, each with an attached plan.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/subscription_item"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "SubscriptionItemList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "latest_invoice": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/invoice"
              }
            ],
            "description": "The most recent invoice this subscription has generated.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/invoice"
                }
              ]
            }
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "next_pending_invoice_item_invoice": {
            "description": "Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["subscription"],
            "type": "string"
          },
          "pending_invoice_item_interval": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/subscription_pending_invoice_item_interval"
              }
            ],
            "description": "Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.",
            "nullable": true
          },
          "pending_setup_intent": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/setup_intent"
              }
            ],
            "description": "You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/setup_intent"
                }
              ]
            }
          },
          "plan": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/plan"
              }
            ],
            "description": "Hash describing the plan the customer is subscribed to. Only set if the subscription contains a single plan.",
            "nullable": true
          },
          "quantity": {
            "description": "The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan.",
            "nullable": true,
            "type": "integer"
          },
          "schedule": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/subscription_schedule"
              }
            ],
            "description": "The schedule attached to the subscription",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/subscription_schedule"
                }
              ]
            }
          },
          "start_date": {
            "description": "Date when the subscription was first created. The date might differ from the `created` date due to backdating.",
            "format": "unix-time",
            "type": "integer"
          },
          "status": {
            "description": "Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. \n\nFor `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. \n\nA subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. \n\nIf subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. \n\nIf subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.",
            "enum": [
              "active",
              "canceled",
              "incomplete",
              "incomplete_expired",
              "past_due",
              "trialing",
              "unpaid"
            ],
            "type": "string"
          },
          "tax_percent": {
            "description": "If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer.",
            "nullable": true,
            "type": "number"
          },
          "trial_end": {
            "description": "If the subscription has a trial, the end of that trial.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "trial_start": {
            "description": "If the subscription has a trial, the beginning of that trial.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "billing_cycle_anchor",
          "cancel_at_period_end",
          "created",
          "current_period_end",
          "current_period_start",
          "customer",
          "id",
          "items",
          "livemode",
          "metadata",
          "object",
          "start_date",
          "status"
        ],
        "title": "Subscription",
        "type": "object",
        "x-expandableFields": [
          "billing_thresholds",
          "customer",
          "default_payment_method",
          "default_source",
          "default_tax_rates",
          "discount",
          "items",
          "latest_invoice",
          "pending_invoice_item_interval",
          "pending_setup_intent",
          "plan",
          "schedule"
        ],
        "x-resourceId": "subscription"
      },
      "subscription_billing_thresholds": {
        "properties": {
          "amount_gte": {
            "description": "Monetary threshold that triggers the subscription to create an invoice",
            "nullable": true,
            "type": "integer"
          },
          "reset_billing_cycle_anchor": {
            "description": "Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.",
            "nullable": true,
            "type": "boolean"
          }
        },
        "title": "SubscriptionBillingThresholds",
        "type": "object",
        "x-expandableFields": []
      },
      "subscription_item": {
        "properties": {
          "billing_thresholds": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/subscription_item_billing_thresholds"
              }
            ],
            "description": "Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period",
            "nullable": true
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["subscription_item"],
            "type": "string"
          },
          "plan": {
            "$ref": "#/components/schemas/plan"
          },
          "quantity": {
            "description": "The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.",
            "type": "integer"
          },
          "subscription": {
            "description": "The `subscription` this `subscription_item` belongs to.",
            "maxLength": 5000,
            "type": "string"
          },
          "tax_rates": {
            "description": "The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.",
            "items": {
              "$ref": "#/components/schemas/tax_rate"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "created",
          "id",
          "metadata",
          "object",
          "plan",
          "subscription"
        ],
        "title": "SubscriptionItem",
        "type": "object",
        "x-expandableFields": ["billing_thresholds", "plan", "tax_rates"],
        "x-resourceId": "subscription_item"
      },
      "subscription_item_billing_thresholds": {
        "properties": {
          "usage_gte": {
            "description": "Usage threshold that triggers the subscription to create an invoice",
            "nullable": true,
            "type": "integer"
          }
        },
        "title": "SubscriptionItemBillingThresholds",
        "type": "object",
        "x-expandableFields": []
      },
      "subscription_pending_invoice_item_interval": {
        "properties": {
          "interval": {
            "description": "Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.",
            "enum": ["day", "month", "week", "year"],
            "type": "string"
          },
          "interval_count": {
            "description": "The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).",
            "type": "integer"
          }
        },
        "required": ["interval", "interval_count"],
        "title": "SubscriptionPendingInvoiceItemInterval",
        "type": "object",
        "x-expandableFields": []
      },
      "subscription_schedule": {
        "properties": {
          "canceled_at": {
            "description": "Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "completed_at": {
            "description": "Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "current_phase": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/subscription_schedule_current_phase"
              }
            ],
            "description": "Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.",
            "nullable": true
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              },
              {
                "$ref": "#/components/schemas/deleted_customer"
              }
            ],
            "description": "ID of the customer who owns the subscription schedule.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                },
                {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              ]
            }
          },
          "default_settings": {
            "$ref": "#/components/schemas/subscription_schedules_resource_default_settings"
          },
          "end_behavior": {
            "description": "Behavior of the subscription schedule and underlying subscription when it ends.",
            "enum": ["cancel", "none", "release", "renew"],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "nullable": true,
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["subscription_schedule"],
            "type": "string"
          },
          "phases": {
            "description": "Configuration for the subscription schedule's phases.",
            "items": {
              "$ref": "#/components/schemas/subscription_schedule_phase_configuration"
            },
            "type": "array"
          },
          "released_at": {
            "description": "Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          },
          "released_subscription": {
            "description": "ID of the subscription once managed by the subscription schedule (if it is released).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).",
            "enum": [
              "active",
              "canceled",
              "completed",
              "not_started",
              "released"
            ],
            "type": "string"
          },
          "subscription": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/subscription"
              }
            ],
            "description": "ID of the subscription managed by the subscription schedule.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/subscription"
                }
              ]
            }
          }
        },
        "required": [
          "created",
          "customer",
          "default_settings",
          "end_behavior",
          "id",
          "livemode",
          "object",
          "phases",
          "status"
        ],
        "title": "SubscriptionSchedule",
        "type": "object",
        "x-expandableFields": [
          "current_phase",
          "customer",
          "default_settings",
          "phases",
          "subscription"
        ],
        "x-resourceId": "subscription_schedule"
      },
      "subscription_schedule_configuration_item": {
        "properties": {
          "billing_thresholds": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/subscription_item_billing_thresholds"
              }
            ],
            "description": "Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period",
            "nullable": true
          },
          "plan": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/plan"
              },
              {
                "$ref": "#/components/schemas/deleted_plan"
              }
            ],
            "description": "ID of the plan to which the customer should be subscribed.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/plan"
                },
                {
                  "$ref": "#/components/schemas/deleted_plan"
                }
              ]
            }
          },
          "quantity": {
            "description": "Quantity of the plan to which the customer should be subscribed.",
            "nullable": true,
            "type": "integer"
          },
          "tax_rates": {
            "description": "The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.",
            "items": {
              "$ref": "#/components/schemas/tax_rate"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": ["plan"],
        "title": "SubscriptionScheduleConfigurationItem",
        "type": "object",
        "x-expandableFields": ["billing_thresholds", "plan", "tax_rates"]
      },
      "subscription_schedule_current_phase": {
        "properties": {
          "end_date": {
            "format": "unix-time",
            "type": "integer"
          },
          "start_date": {
            "format": "unix-time",
            "type": "integer"
          }
        },
        "required": ["end_date", "start_date"],
        "title": "SubscriptionScheduleCurrentPhase",
        "type": "object",
        "x-expandableFields": []
      },
      "subscription_schedule_phase_configuration": {
        "properties": {
          "application_fee_percent": {
            "description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.",
            "nullable": true,
            "type": "number"
          },
          "billing_thresholds": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/subscription_billing_thresholds"
              }
            ],
            "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period",
            "nullable": true
          },
          "collection_method": {
            "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.",
            "enum": ["charge_automatically", "send_invoice"],
            "nullable": true,
            "type": "string"
          },
          "coupon": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/coupon"
              }
            ],
            "description": "ID of the coupon to use during this phase of the subscription schedule.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/coupon"
                }
              ]
            }
          },
          "default_payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "default_tax_rates": {
            "items": {
              "$ref": "#/components/schemas/tax_rate"
            },
            "nullable": true,
            "type": "array"
          },
          "end_date": {
            "description": "The end of this phase of the subscription schedule.",
            "format": "unix-time",
            "type": "integer"
          },
          "invoice_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/invoice_setting_subscription_schedule_setting"
              }
            ],
            "description": "The subscription schedule's default invoice settings.",
            "nullable": true
          },
          "plans": {
            "description": "Plans to subscribe during this phase of the subscription schedule.",
            "items": {
              "$ref": "#/components/schemas/subscription_schedule_configuration_item"
            },
            "type": "array"
          },
          "start_date": {
            "description": "The start of this phase of the subscription schedule.",
            "format": "unix-time",
            "type": "integer"
          },
          "tax_percent": {
            "description": "If provided, each invoice created during this phase of the subscription schedule will apply the tax rate, increasing the amount billed to the customer.",
            "nullable": true,
            "type": "number"
          },
          "trial_end": {
            "description": "When the trial ends within the phase.",
            "format": "unix-time",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": ["end_date", "plans", "start_date"],
        "title": "SubscriptionSchedulePhaseConfiguration",
        "type": "object",
        "x-expandableFields": [
          "billing_thresholds",
          "coupon",
          "default_payment_method",
          "default_tax_rates",
          "invoice_settings",
          "plans"
        ]
      },
      "subscription_schedules_resource_default_settings": {
        "properties": {
          "billing_thresholds": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/subscription_billing_thresholds"
              }
            ],
            "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period",
            "nullable": true
          },
          "collection_method": {
            "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.",
            "enum": ["charge_automatically", "send_invoice"],
            "nullable": true,
            "type": "string"
          },
          "default_payment_method": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/payment_method"
              }
            ],
            "description": "ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/payment_method"
                }
              ]
            }
          },
          "invoice_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/invoice_setting_subscription_schedule_setting"
              }
            ],
            "description": "The subscription schedule's default invoice settings.",
            "nullable": true
          }
        },
        "title": "SubscriptionSchedulesResourceDefaultSettings",
        "type": "object",
        "x-expandableFields": [
          "billing_thresholds",
          "default_payment_method",
          "invoice_settings"
        ]
      },
      "tax_deducted_at_source": {
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["tax_deducted_at_source"],
            "type": "string"
          },
          "period_end": {
            "description": "The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.",
            "format": "unix-time",
            "type": "integer"
          },
          "period_start": {
            "description": "The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.",
            "format": "unix-time",
            "type": "integer"
          },
          "tax_deduction_account_number": {
            "description": "The TAN that was supplied to Stripe when TDS was assessed",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "id",
          "object",
          "period_end",
          "period_start",
          "tax_deduction_account_number"
        ],
        "title": "TaxDeductedAtSource",
        "type": "object",
        "x-expandableFields": []
      },
      "tax_id": {
        "properties": {
          "country": {
            "description": "Two-letter ISO code representing the country of the tax ID.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "customer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/customer"
              }
            ],
            "description": "ID of the customer.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/customer"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["tax_id"],
            "type": "string"
          },
          "type": {
            "description": "Type of the tax ID, one of `au_abn`, `ch_vat`, `eu_vat`, `in_gst`, `mx_rfc`, `no_vat`, `nz_gst`, `za_vat`, or `unknown`",
            "enum": [
              "au_abn",
              "ch_vat",
              "eu_vat",
              "in_gst",
              "mx_rfc",
              "no_vat",
              "nz_gst",
              "unknown",
              "za_vat"
            ],
            "type": "string"
          },
          "value": {
            "description": "Value of the tax ID.",
            "maxLength": 5000,
            "type": "string"
          },
          "verification": {
            "$ref": "#/components/schemas/tax_id_verification"
          }
        },
        "required": [
          "created",
          "customer",
          "id",
          "livemode",
          "object",
          "type",
          "value",
          "verification"
        ],
        "title": "tax_id",
        "type": "object",
        "x-expandableFields": ["customer", "verification"],
        "x-resourceId": "tax_id"
      },
      "tax_id_verification": {
        "properties": {
          "status": {
            "description": "Verification status, one of `pending`, `unavailable`, `unverified`, or `verified`.",
            "enum": ["pending", "unavailable", "unverified", "verified"],
            "type": "string"
          },
          "verified_address": {
            "description": "Verified address.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "verified_name": {
            "description": "Verified name.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["status"],
        "title": "tax_id_verification",
        "type": "object",
        "x-expandableFields": []
      },
      "tax_rate": {
        "properties": {
          "active": {
            "description": "Defaults to `true`. When set to `false`, this tax rate cannot be applied to objects in the API, but will still be applied to subscriptions and invoices that already have it set.",
            "type": "boolean"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "description": {
            "description": "An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "inclusive": {
            "description": "This specifies if the tax rate is inclusive or exclusive.",
            "type": "boolean"
          },
          "jurisdiction": {
            "description": "The jurisdiction for the tax rate.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["tax_rate"],
            "type": "string"
          },
          "percentage": {
            "description": "This represents the tax rate percent out of 100.",
            "type": "number"
          }
        },
        "required": [
          "active",
          "created",
          "display_name",
          "id",
          "inclusive",
          "livemode",
          "metadata",
          "object",
          "percentage"
        ],
        "title": "TaxRate",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "tax_rate"
      },
      "terminal.connection_token": {
        "properties": {
          "location": {
            "description": "The id of the location that this connection token is scoped to.",
            "maxLength": 5000,
            "type": "string"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["terminal.connection_token"],
            "type": "string"
          },
          "secret": {
            "description": "Your application should pass this token to the Stripe Terminal SDK.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["object", "secret"],
        "title": "TerminalConnectionToken",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "terminal.connection_token"
      },
      "terminal.location": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "display_name": {
            "description": "The display name of the location.",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["terminal.location"],
            "type": "string"
          }
        },
        "required": [
          "address",
          "display_name",
          "id",
          "livemode",
          "metadata",
          "object"
        ],
        "title": "TerminalLocationLocation",
        "type": "object",
        "x-expandableFields": ["address"],
        "x-resourceId": "terminal.location"
      },
      "terminal.reader": {
        "properties": {
          "device_sw_version": {
            "description": "The current software version of the reader.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "device_type": {
            "description": "Type of reader, one of `bbpos_chipper2x` or `verifone_P400`.",
            "enum": ["bbpos_chipper2x", "verifone_P400"],
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "ip_address": {
            "description": "The local IP address of the reader.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "label": {
            "description": "Custom label given to the reader for easier identification.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "location": {
            "description": "The location identifier of the reader.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["terminal.reader"],
            "type": "string"
          },
          "serial_number": {
            "description": "Serial number of the reader.",
            "maxLength": 5000,
            "type": "string"
          },
          "status": {
            "description": "The networking status of the reader.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "device_type",
          "id",
          "label",
          "livemode",
          "metadata",
          "object",
          "serial_number"
        ],
        "title": "TerminalReaderReader",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "terminal.reader"
      },
      "three_d_secure": {
        "properties": {
          "amount": {
            "type": "integer"
          },
          "authenticated": {
            "description": "True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded.",
            "type": "boolean"
          },
          "card": {
            "$ref": "#/components/schemas/card"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "maxLength": 5000,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["three_d_secure"],
            "type": "string"
          },
          "redirect_url": {
            "description": "If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value \"_callback\".",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "authenticated",
          "card",
          "created",
          "currency",
          "id",
          "livemode",
          "object",
          "status"
        ],
        "title": "ThreeDSecure",
        "type": "object",
        "x-expandableFields": ["card"],
        "x-resourceId": "three_d_secure"
      },
      "three_d_secure_details": {
        "properties": {
          "authenticated": {
            "description": "Whether or not authentication was performed. 3D Secure will succeed without authentication when the card is not enrolled.",
            "type": "boolean"
          },
          "succeeded": {
            "description": "Whether or not 3D Secure succeeded.",
            "type": "boolean"
          },
          "version": {
            "description": "The version of 3D Secure that was used for this payment.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["authenticated", "succeeded", "version"],
        "title": "three_d_secure_details",
        "type": "object",
        "x-expandableFields": []
      },
      "three_d_secure_usage": {
        "properties": {
          "supported": {
            "description": "Whether 3D Secure is supported on this card.",
            "type": "boolean"
          }
        },
        "required": ["supported"],
        "title": "three_d_secure_usage",
        "type": "object",
        "x-expandableFields": []
      },
      "token": {
        "properties": {
          "bank_account": {
            "$ref": "#/components/schemas/bank_account"
          },
          "card": {
            "$ref": "#/components/schemas/card"
          },
          "client_ip": {
            "description": "IP address of the client that generated the token.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["token"],
            "type": "string"
          },
          "type": {
            "description": "Type of the token: `account`, `bank_account`, `card`, or `pii`.",
            "maxLength": 5000,
            "type": "string"
          },
          "used": {
            "description": "Whether this token has already been used (tokens can be used only once).",
            "type": "boolean"
          }
        },
        "required": ["created", "id", "livemode", "object", "type", "used"],
        "title": "Token",
        "type": "object",
        "x-expandableFields": ["bank_account", "card"],
        "x-resourceId": "token"
      },
      "topup": {
        "properties": {
          "amount": {
            "description": "Amount transferred.",
            "type": "integer"
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "maxLength": 5000,
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "expected_availability_date": {
            "description": "Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.",
            "nullable": true,
            "type": "integer"
          },
          "failure_code": {
            "description": "Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "failure_message": {
            "description": "Message to user further explaining reason for top-up failure if available.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["topup"],
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/source"
          },
          "statement_descriptor": {
            "description": "Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.",
            "enum": ["canceled", "failed", "pending", "reversed", "succeeded"],
            "type": "string"
          },
          "transfer_group": {
            "description": "A string that identifies this top-up as part of a group.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "livemode",
          "metadata",
          "object",
          "source",
          "status"
        ],
        "title": "Topup",
        "type": "object",
        "x-expandableFields": ["balance_transaction", "source"],
        "x-resourceId": "topup"
      },
      "transfer": {
        "properties": {
          "amount": {
            "description": "Amount in %s to be transferred.",
            "type": "integer"
          },
          "amount_reversed": {
            "description": "Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).",
            "type": "integer"
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "Balance transaction that describes the impact of this transfer on your account balance.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "created": {
            "description": "Time that this record of the transfer was first created.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "description": {
            "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "destination": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "ID of the Stripe account the transfer was sent to.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          },
          "destination_payment": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "A set of key-value pairs that you can attach to a transfer object. It can be useful for storing additional information about the transfer in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["transfer"],
            "type": "string"
          },
          "reversals": {
            "description": "A list of reversals that have been applied to the transfer.",
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/transfer_reversal"
                },
                "type": "array"
              },
              "has_more": {
                "description": "True if this list has another page of items after this one that can be fetched.",
                "type": "boolean"
              },
              "object": {
                "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                "enum": ["list"],
                "type": "string"
              },
              "url": {
                "description": "The URL where this list can be accessed.",
                "maxLength": 5000,
                "type": "string"
              }
            },
            "required": ["data", "has_more", "object", "url"],
            "title": "TransferReversalList",
            "type": "object",
            "x-expandableFields": ["data"]
          },
          "reversed": {
            "description": "Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.",
            "type": "boolean"
          },
          "source_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/charge"
              }
            ],
            "description": "ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/charge"
                }
              ]
            }
          },
          "source_type": {
            "description": "The source balance this transfer came from. One of `card` or `bank_account`.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "transfer_group": {
            "description": "A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#grouping-transactions) for details.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "amount_reversed",
          "created",
          "currency",
          "id",
          "livemode",
          "metadata",
          "object",
          "reversals",
          "reversed"
        ],
        "title": "Transfer",
        "type": "object",
        "x-expandableFields": [
          "balance_transaction",
          "destination",
          "destination_payment",
          "reversals",
          "source_transaction"
        ],
        "x-resourceId": "transfer"
      },
      "transfer_data": {
        "properties": {
          "amount": {
            "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
            "type": "integer"
          },
          "destination": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/account"
              }
            ],
            "description": "The account (if any) the payment will be attributed to for tax\nreporting, and where funds from the payment will be transferred to upon\npayment success.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/account"
                }
              ]
            }
          }
        },
        "required": ["destination"],
        "title": "transfer_data",
        "type": "object",
        "x-expandableFields": ["destination"]
      },
      "transfer_reversal": {
        "properties": {
          "amount": {
            "description": "Amount, in %s.",
            "type": "integer"
          },
          "balance_transaction": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/balance_transaction"
              }
            ],
            "description": "Balance transaction that describes the impact on your account balance.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              ]
            }
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "currency": {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "type": "string"
          },
          "destination_payment_refund": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/refund"
              }
            ],
            "description": "Linked payment refund for the transfer reversal.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/refund"
                }
              ]
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "maxLength": 500,
              "type": "string"
            },
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
            "type": "object"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["transfer_reversal"],
            "type": "string"
          },
          "source_refund": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/refund"
              }
            ],
            "description": "ID of the refund responsible for the transfer reversal.",
            "nullable": true,
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/refund"
                }
              ]
            }
          },
          "transfer": {
            "anyOf": [
              {
                "maxLength": 5000,
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/transfer"
              }
            ],
            "description": "ID of the transfer that was reversed.",
            "x-expansionResources": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/transfer"
                }
              ]
            }
          }
        },
        "required": [
          "amount",
          "created",
          "currency",
          "id",
          "metadata",
          "object",
          "transfer"
        ],
        "title": "TransferReversal",
        "type": "object",
        "x-expandableFields": [
          "balance_transaction",
          "destination_payment_refund",
          "source_refund",
          "transfer"
        ],
        "x-resourceId": "transfer_reversal"
      },
      "transfer_schedule": {
        "properties": {
          "delay_days": {
            "description": "The number of days charges for the account will be held before being paid out.",
            "type": "integer"
          },
          "interval": {
            "description": "How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.",
            "maxLength": 5000,
            "type": "string"
          },
          "monthly_anchor": {
            "description": "The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.",
            "type": "integer"
          },
          "weekly_anchor": {
            "description": "The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": ["delay_days", "interval"],
        "title": "TransferSchedule",
        "type": "object",
        "x-expandableFields": []
      },
      "transform_usage": {
        "properties": {
          "divide_by": {
            "description": "Divide usage by this number.",
            "type": "integer"
          },
          "round": {
            "description": "After division, either round the result `up` or `down`.",
            "enum": ["down", "up"],
            "type": "string"
          }
        },
        "required": ["divide_by", "round"],
        "title": "TransformUsage",
        "type": "object",
        "x-expandableFields": []
      },
      "usage_record": {
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["usage_record"],
            "type": "string"
          },
          "quantity": {
            "description": "The usage quantity for the specified date.",
            "type": "integer"
          },
          "subscription_item": {
            "description": "The ID of the subscription item this usage record contains data for.",
            "maxLength": 5000,
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp when this usage occurred.",
            "format": "unix-time",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "livemode",
          "object",
          "quantity",
          "subscription_item",
          "timestamp"
        ],
        "title": "UsageRecord",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "usage_record"
      },
      "usage_record_summary": {
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "invoice": {
            "description": "The invoice in which this usage period has been billed for.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["usage_record_summary"],
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/period"
          },
          "subscription_item": {
            "description": "The ID of the subscription item this summary is describing.",
            "maxLength": 5000,
            "type": "string"
          },
          "total_usage": {
            "description": "The total usage within this usage period.",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "livemode",
          "object",
          "period",
          "subscription_item",
          "total_usage"
        ],
        "title": "UsageRecordSummary",
        "type": "object",
        "x-expandableFields": ["period"],
        "x-resourceId": "usage_record_summary"
      },
      "webhook_endpoint": {
        "properties": {
          "api_version": {
            "description": "The API version events are rendered as for this webhook endpoint.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "application": {
            "description": "The ID of the associated Connect application.",
            "maxLength": 5000,
            "nullable": true,
            "type": "string"
          },
          "created": {
            "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
            "format": "unix-time",
            "type": "integer"
          },
          "enabled_events": {
            "description": "The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.",
            "items": {
              "maxLength": 5000,
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the object.",
            "maxLength": 5000,
            "type": "string"
          },
          "livemode": {
            "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
            "type": "boolean"
          },
          "object": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": ["webhook_endpoint"],
            "type": "string"
          },
          "secret": {
            "description": "The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation.",
            "maxLength": 5000,
            "type": "string"
          },
          "status": {
            "description": "The status of the webhook. It can be `enabled` or `disabled`.",
            "maxLength": 5000,
            "type": "string"
          },
          "url": {
            "description": "The URL of the webhook endpoint.",
            "maxLength": 5000,
            "type": "string"
          }
        },
        "required": [
          "created",
          "enabled_events",
          "id",
          "livemode",
          "object",
          "status",
          "url"
        ],
        "title": "NotificationWebhookEndpoint",
        "type": "object",
        "x-expandableFields": [],
        "x-resourceId": "webhook_endpoint"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "description": "Basic HTTP authentication. Allowed headers-- Authorization: Basic <api_key> | Authorization: Basic <base64 hash of `api_key:`>",
        "scheme": "basic",
        "type": "http"
      },
      "bearerAuth": {
        "bearerFormat": "auth-scheme",
        "description": "Bearer HTTP authentication. Allowed headers-- Authorization: Bearer <api_key>",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "dev-platform@stripe.com",
      "name": "Stripe Dev Platform Team",
      "url": "https://stripe.com"
    },
    "description": "The Stripe REST API. Please see https://stripe.com/docs/api for more details.",
    "termsOfService": "https://stripe.com/us/terms/",
    "title": "Stripe API",
    "version": "2019-12-03",
    "x-stripeSpecFilename": "spec3"
  },
  "openapi": "3.0.0",
  "paths": {
    "/v1/3d_secure": {
      "post": {
        "description": "<p>Initiate 3D Secure authentication.</p>",
        "operationId": "Post3dSecure",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Amount of the charge that you will create when authentication completes.",
                    "type": "integer"
                  },
                  "card": {
                    "description": "The ID of a card token, or the ID of a card belonging to the given customer.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "customer": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "return_url": {
                    "description": "The URL that the cardholder's browser will be returned to when authentication completes.",
                    "type": "string"
                  }
                },
                "required": ["amount", "currency", "return_url"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/three_d_secure"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/3d_secure/{three_d_secure}": {
      "get": {
        "description": "<p>Retrieves a 3D Secure object.</p>",
        "operationId": "Get3dSecureThreeDSecure",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the 3D Secure object to be retrieved.",
            "in": "path",
            "name": "three_d_secure",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/three_d_secure"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account": {
      "delete": {
        "description": "<p>With <a href=\"/docs/connect\">Connect</a>, you can delete Custom or Express accounts you manage.</p>\n\n<p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>\n\n<p>If you want to delete your own account, use the <a href=\"https://dashboard.stripe.com/account/data\">data tab in your account settings</a> instead.</p>",
        "operationId": "DeleteAccount",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The identifier of the account to be deleted. If none is provided, will default to the account of the API key.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the details of an account.</p>",
        "operationId": "GetAccount",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates a connected <a href=\"/docs/connect/accounts\">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>\n\n<p>To update your own account, use the <a href=\"https://dashboard.stripe.com/account\">Dashboard</a>. Refer to our <a href=\"/docs/connect/updating-accounts\">Connect</a> documentation to learn more about updating accounts.</p>",
        "operationId": "PostAccount",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "business_profile": {
                  "explode": true,
                  "style": "deepObject"
                },
                "company": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "individual": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "requested_capabilities": {
                  "explode": true,
                  "style": "deepObject"
                },
                "settings": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tos_acceptance": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_token": {
                    "description": "An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "external_account_payout_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "business_profile": {
                    "description": "Non-essential business information about the account",
                    "properties": {
                      "mcc": {
                        "maxLength": 4,
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "product_description": {
                        "maxLength": 40000,
                        "type": "string"
                      },
                      "support_email": {
                        "type": "string"
                      },
                      "support_phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "support_url": {
                        "type": "string"
                      },
                      "url": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "business_profile_specs",
                    "type": "object"
                  },
                  "business_type": {
                    "description": "The business type. Can be `individual` or `company`.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "company": {
                    "description": "Information about the company or business. This field is null unless `business_type` is set to `company`.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "address_specs",
                        "type": "object"
                      },
                      "address_kana": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kana_specs",
                        "type": "object"
                      },
                      "address_kanji": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kanji_specs",
                        "type": "object"
                      },
                      "directors_provided": {
                        "type": "boolean"
                      },
                      "executives_provided": {
                        "type": "boolean"
                      },
                      "name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "name_kana": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "name_kanji": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "owners_provided": {
                        "type": "boolean"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tax_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tax_id_registrar": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "vat_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "verification_document_specs",
                            "type": "object"
                          }
                        },
                        "title": "verification_specs",
                        "type": "object"
                      }
                    },
                    "title": "company_specs",
                    "type": "object"
                  },
                  "default_currency": {
                    "description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).",
                    "type": "string"
                  },
                  "email": {
                    "description": "Email address of the account representative. For Standard accounts, this is used to ask them to claim their Stripe account. For Custom accounts, this only makes the account easier to identify to platforms; Stripe does not email the account representative.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "external_account": {
                    "description": "A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "individual": {
                    "description": "Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "address_specs",
                        "type": "object"
                      },
                      "address_kana": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kana_specs",
                        "type": "object"
                      },
                      "address_kanji": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kanji_specs",
                        "type": "object"
                      },
                      "dob": {
                        "anyOf": [
                          {
                            "properties": {
                              "day": {
                                "type": "integer"
                              },
                              "month": {
                                "type": "integer"
                              },
                              "year": {
                                "type": "integer"
                              }
                            },
                            "required": ["day", "month", "year"],
                            "title": "date_of_birth_specs",
                            "type": "object"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "email": {
                        "type": "string"
                      },
                      "first_name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "first_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "first_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "gender": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "id_number": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "last_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "maiden_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "ssn_last_4": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "additional_document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          },
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          }
                        },
                        "title": "person_verification_specs",
                        "type": "object"
                      }
                    },
                    "title": "individual_specs",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an `Account` object. This can be useful for storing additional information about the account in a structured format.",
                    "type": "object"
                  },
                  "requested_capabilities": {
                    "description": "The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.",
                    "items": {
                      "enum": [
                        "card_issuing",
                        "card_payments",
                        "legacy_payments",
                        "transfers"
                      ],
                      "maxLength": 5000,
                      "type": "string",
                      "x-stripeBypassValidation": true
                    },
                    "type": "array"
                  },
                  "settings": {
                    "description": "Options for customizing how the account functions within Stripe.",
                    "properties": {
                      "branding": {
                        "properties": {
                          "icon": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "logo": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "primary_color": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "branding_settings_specs",
                        "type": "object"
                      },
                      "card_payments": {
                        "properties": {
                          "decline_on": {
                            "properties": {
                              "avs_failure": {
                                "type": "boolean"
                              },
                              "cvc_failure": {
                                "type": "boolean"
                              }
                            },
                            "title": "decline_charge_on_specs",
                            "type": "object"
                          },
                          "statement_descriptor_prefix": {
                            "maxLength": 10,
                            "type": "string"
                          }
                        },
                        "title": "card_payments_settings_specs",
                        "type": "object"
                      },
                      "payments": {
                        "properties": {
                          "statement_descriptor": {
                            "maxLength": 22,
                            "type": "string"
                          },
                          "statement_descriptor_kana": {
                            "maxLength": 22,
                            "type": "string"
                          },
                          "statement_descriptor_kanji": {
                            "maxLength": 22,
                            "type": "string"
                          }
                        },
                        "title": "payments_settings_specs",
                        "type": "object"
                      },
                      "payouts": {
                        "properties": {
                          "debit_negative_balances": {
                            "type": "boolean"
                          },
                          "schedule": {
                            "properties": {
                              "delay_days": {
                                "anyOf": [
                                  {
                                    "enum": ["minimum"],
                                    "maxLength": 5000,
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ]
                              },
                              "interval": {
                                "enum": [
                                  "daily",
                                  "manual",
                                  "monthly",
                                  "weekly"
                                ],
                                "maxLength": 5000,
                                "type": "string",
                                "x-stripeBypassValidation": true
                              },
                              "monthly_anchor": {
                                "type": "integer"
                              },
                              "weekly_anchor": {
                                "enum": [
                                  "friday",
                                  "monday",
                                  "saturday",
                                  "sunday",
                                  "thursday",
                                  "tuesday",
                                  "wednesday"
                                ],
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "transfer_schedule_specs",
                            "type": "object"
                          },
                          "statement_descriptor": {
                            "maxLength": 22,
                            "type": "string"
                          }
                        },
                        "title": "payout_settings_specs",
                        "type": "object"
                      }
                    },
                    "title": "settings_specs",
                    "type": "object"
                  },
                  "tos_acceptance": {
                    "description": "Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).",
                    "properties": {
                      "date": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "ip": {
                        "type": "string"
                      },
                      "user_agent": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "tos_acceptance_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/bank_accounts": {
      "post": {
        "description": "<p>Create an external account for a given account.</p>",
        "operationId": "PostAccountBankAccounts",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "external_account_payout_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "default_for_currency": {
                    "description": "When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "external_account": {
                    "description": "Please refer to full [documentation](https://stripe.com/docs/api) instead.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an external account object. It can be useful for storing additional information about the external account in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/bank_accounts/{id}": {
      "delete": {
        "description": "<p>Delete a specified external account for a given account.</p>",
        "operationId": "DeleteAccountBankAccountsId",
        "parameters": [
          {
            "description": "The ID of the external account to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieve a specified external account for a given account.</p>",
        "operationId": "GetAccountBankAccountsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>\n<p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>",
        "operationId": "PostAccountBankAccountsId",
        "parameters": [
          {
            "description": "The ID of the external account to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_holder_name": {
                    "description": "The name of the person or business that owns the bank account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "account_holder_type": {
                    "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
                    "enum": ["", "company", "individual"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_city": {
                    "description": "City/District/Suburb/Town/Village.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_country": {
                    "description": "Billing address country, if provided when creating card.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line1": {
                    "description": "Address line 1 (Street address/PO Box/Company name).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line2": {
                    "description": "Address line 2 (Apartment/Suite/Unit/Building).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_state": {
                    "description": "State/County/Province/Region.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_zip": {
                    "description": "ZIP or postal code.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_for_currency": {
                    "description": "When set to true, this becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "exp_month": {
                    "description": "Two digit number representing the card’s expiration month.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit number representing the card’s expiration year.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Cardholder name.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/capabilities": {
      "get": {
        "description": "<p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>",
        "operationId": "GetAccountCapabilities",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/capability"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "ListAccountCapability",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/capabilities/{capability}": {
      "get": {
        "description": "<p>Retrieves information about the specified Account Capability.</p>",
        "operationId": "GetAccountCapabilitiesCapability",
        "parameters": [
          {
            "description": "The ID of an account capability to retrieve.",
            "in": "path",
            "name": "capability",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing Account Capability.</p>",
        "operationId": "PostAccountCapabilitiesCapability",
        "parameters": [
          {
            "description": "The ID of an account capability to update.",
            "in": "path",
            "name": "capability",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "requested": {
                    "description": "Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/external_accounts": {
      "get": {
        "description": "<p>List external accounts for an account.</p>",
        "operationId": "GetAccountExternalAccounts",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.",
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/bank_account"
                          },
                          {
                            "$ref": "#/components/schemas/card"
                          }
                        ],
                        "title": "Polymorphic"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "ExternalAccountList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Create an external account for a given account.</p>",
        "operationId": "PostAccountExternalAccounts",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "external_account_payout_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "default_for_currency": {
                    "description": "When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "external_account": {
                    "description": "Please refer to full [documentation](https://stripe.com/docs/api) instead.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an external account object. It can be useful for storing additional information about the external account in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/external_accounts/{id}": {
      "delete": {
        "description": "<p>Delete a specified external account for a given account.</p>",
        "operationId": "DeleteAccountExternalAccountsId",
        "parameters": [
          {
            "description": "The ID of the external account to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieve a specified external account for a given account.</p>",
        "operationId": "GetAccountExternalAccountsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>\n<p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>",
        "operationId": "PostAccountExternalAccountsId",
        "parameters": [
          {
            "description": "The ID of the external account to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_holder_name": {
                    "description": "The name of the person or business that owns the bank account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "account_holder_type": {
                    "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
                    "enum": ["", "company", "individual"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_city": {
                    "description": "City/District/Suburb/Town/Village.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_country": {
                    "description": "Billing address country, if provided when creating card.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line1": {
                    "description": "Address line 1 (Street address/PO Box/Company name).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line2": {
                    "description": "Address line 2 (Apartment/Suite/Unit/Building).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_state": {
                    "description": "State/County/Province/Region.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_zip": {
                    "description": "ZIP or postal code.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_for_currency": {
                    "description": "When set to true, this becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "exp_month": {
                    "description": "Two digit number representing the card’s expiration month.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit number representing the card’s expiration year.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Cardholder name.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/login_links": {
      "post": {
        "description": "<p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>\n\n<p><strong>You may only create login links for <a href=\"/docs/connect/express-accounts\">Express accounts</a> connected to your platform</strong>.</p>",
        "operationId": "PostAccountLoginLinks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The identifier of the account to create a login link for.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "redirect_url": {
                    "description": "Where to redirect the user after they log out of their dashboard.",
                    "type": "string"
                  }
                },
                "required": ["account"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/login_link"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/logout": {
      "put": {
        "description": "<p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>\n\n<p><strong>You may only log out <a href=\"/docs/connect/express-accounts\">Express accounts</a> connected to your platform</strong>.</p>",
        "operationId": "PutAccountLogout",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The identifier of the account to log out.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": ["account"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/light_account_logout"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/people": {
      "get": {
        "description": "<p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>",
        "operationId": "GetAccountPeople",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filters on the list of people returned based on the person's relationship to the account's company.",
            "explode": true,
            "in": "query",
            "name": "relationship",
            "required": false,
            "schema": {
              "properties": {
                "director": {
                  "type": "boolean"
                },
                "executive": {
                  "type": "boolean"
                },
                "owner": {
                  "type": "boolean"
                },
                "representative": {
                  "type": "boolean"
                }
              },
              "title": "all_people_relationship_specs",
              "type": "object"
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/person"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new person.</p>",
        "operationId": "PostAccountPeople",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The account that the person is associated with.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/people/{person}": {
      "delete": {
        "description": "<p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>",
        "operationId": "DeleteAccountPeoplePerson",
        "parameters": [
          {
            "description": "The ID of the person to be deleted.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves an existing person.</p>",
        "operationId": "GetAccountPeoplePerson",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of a person to retrieve.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing person.</p>",
        "operationId": "PostAccountPeoplePerson",
        "parameters": [
          {
            "description": "The ID of a person to update.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The account that the person is associated with.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/persons": {
      "get": {
        "description": "<p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>",
        "operationId": "GetAccountPersons",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filters on the list of people returned based on the person's relationship to the account's company.",
            "explode": true,
            "in": "query",
            "name": "relationship",
            "required": false,
            "schema": {
              "properties": {
                "director": {
                  "type": "boolean"
                },
                "executive": {
                  "type": "boolean"
                },
                "owner": {
                  "type": "boolean"
                },
                "representative": {
                  "type": "boolean"
                }
              },
              "title": "all_people_relationship_specs",
              "type": "object"
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/person"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new person.</p>",
        "operationId": "PostAccountPersons",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The account that the person is associated with.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account/persons/{person}": {
      "delete": {
        "description": "<p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>",
        "operationId": "DeleteAccountPersonsPerson",
        "parameters": [
          {
            "description": "The ID of the person to be deleted.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves an existing person.</p>",
        "operationId": "GetAccountPersonsPerson",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of a person to retrieve.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing person.</p>",
        "operationId": "PostAccountPersonsPerson",
        "parameters": [
          {
            "description": "The ID of a person to update.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The account that the person is associated with.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/account_links": {
      "post": {
        "description": "<p>Creates an AccountLink object that returns a single-use Stripe URL that the user can redirect their user to in order to take them through the Connect Onboarding flow.</p>",
        "operationId": "PostAccountLinks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "The identifier of the account to create an account link for.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "collect": {
                    "description": "Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.",
                    "enum": ["currently_due", "eventually_due"],
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "failure_url": {
                    "description": "The URL that the user will be redirected to if the account link is no longer valid.",
                    "type": "string"
                  },
                  "success_url": {
                    "description": "The URL that the user will be redirected to upon leaving or completing the linked flow successfully.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of account link the user is requesting. Possible values are `custom_account_verification` or `custom_account_update`.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["account", "failure_url", "success_url", "type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_link"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts": {
      "get": {
        "description": "<p>Returns a list of accounts connected to your platform via <a href=\"/docs/connect\">Connect</a>. If you’re not a platform, the list is empty.</p>",
        "operationId": "GetAccounts",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/account"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/accounts",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>With <a href=\"/docs/connect\">Connect</a>, you can create Stripe accounts for your users.\nTo do this, you’ll first need to <a href=\"https://dashboard.stripe.com/account/applications/settings\">register your platform</a>.</p>\n\n<p>For Standard accounts, parameters other than <code>country</code>, <code>email</code>, and <code>type</code>\nare used to prefill the account application that we ask the account holder to complete.</p>",
        "operationId": "PostAccounts",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "business_profile": {
                  "explode": true,
                  "style": "deepObject"
                },
                "company": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "individual": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "requested_capabilities": {
                  "explode": true,
                  "style": "deepObject"
                },
                "settings": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tos_acceptance": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_token": {
                    "description": "An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "external_account_payout_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "business_profile": {
                    "description": "Non-essential business information about the account",
                    "properties": {
                      "mcc": {
                        "maxLength": 4,
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "product_description": {
                        "maxLength": 40000,
                        "type": "string"
                      },
                      "support_email": {
                        "type": "string"
                      },
                      "support_phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "support_url": {
                        "type": "string"
                      },
                      "url": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "business_profile_specs",
                    "type": "object"
                  },
                  "business_type": {
                    "description": "The business type. Can be `individual` or `company`.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "company": {
                    "description": "Information about the company or business. This field is null unless `business_type` is set to `company`.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "address_specs",
                        "type": "object"
                      },
                      "address_kana": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kana_specs",
                        "type": "object"
                      },
                      "address_kanji": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kanji_specs",
                        "type": "object"
                      },
                      "directors_provided": {
                        "type": "boolean"
                      },
                      "executives_provided": {
                        "type": "boolean"
                      },
                      "name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "name_kana": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "name_kanji": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "owners_provided": {
                        "type": "boolean"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tax_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tax_id_registrar": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "vat_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "verification_document_specs",
                            "type": "object"
                          }
                        },
                        "title": "verification_specs",
                        "type": "object"
                      }
                    },
                    "title": "company_specs",
                    "type": "object"
                  },
                  "country": {
                    "description": "The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_currency": {
                    "description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the account holder. For Custom accounts, this is only to make the account easier to identify to you: Stripe will never directly email your users.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "external_account": {
                    "description": "A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "individual": {
                    "description": "Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "address_specs",
                        "type": "object"
                      },
                      "address_kana": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kana_specs",
                        "type": "object"
                      },
                      "address_kanji": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kanji_specs",
                        "type": "object"
                      },
                      "dob": {
                        "anyOf": [
                          {
                            "properties": {
                              "day": {
                                "type": "integer"
                              },
                              "month": {
                                "type": "integer"
                              },
                              "year": {
                                "type": "integer"
                              }
                            },
                            "required": ["day", "month", "year"],
                            "title": "date_of_birth_specs",
                            "type": "object"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "email": {
                        "type": "string"
                      },
                      "first_name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "first_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "first_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "gender": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "id_number": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "last_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "maiden_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "ssn_last_4": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "additional_document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          },
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          }
                        },
                        "title": "person_verification_specs",
                        "type": "object"
                      }
                    },
                    "title": "individual_specs",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an `Account` object. This can be useful for storing additional information about the account in a structured format.",
                    "type": "object"
                  },
                  "requested_capabilities": {
                    "description": "The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.",
                    "items": {
                      "enum": [
                        "card_issuing",
                        "card_payments",
                        "legacy_payments",
                        "transfers"
                      ],
                      "maxLength": 5000,
                      "type": "string",
                      "x-stripeBypassValidation": true
                    },
                    "type": "array"
                  },
                  "settings": {
                    "description": "Options for customizing how the account functions within Stripe.",
                    "properties": {
                      "branding": {
                        "properties": {
                          "icon": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "logo": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "primary_color": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "branding_settings_specs",
                        "type": "object"
                      },
                      "card_payments": {
                        "properties": {
                          "decline_on": {
                            "properties": {
                              "avs_failure": {
                                "type": "boolean"
                              },
                              "cvc_failure": {
                                "type": "boolean"
                              }
                            },
                            "title": "decline_charge_on_specs",
                            "type": "object"
                          },
                          "statement_descriptor_prefix": {
                            "maxLength": 10,
                            "type": "string"
                          }
                        },
                        "title": "card_payments_settings_specs",
                        "type": "object"
                      },
                      "payments": {
                        "properties": {
                          "statement_descriptor": {
                            "maxLength": 22,
                            "type": "string"
                          },
                          "statement_descriptor_kana": {
                            "maxLength": 22,
                            "type": "string"
                          },
                          "statement_descriptor_kanji": {
                            "maxLength": 22,
                            "type": "string"
                          }
                        },
                        "title": "payments_settings_specs",
                        "type": "object"
                      },
                      "payouts": {
                        "properties": {
                          "debit_negative_balances": {
                            "type": "boolean"
                          },
                          "schedule": {
                            "properties": {
                              "delay_days": {
                                "anyOf": [
                                  {
                                    "enum": ["minimum"],
                                    "maxLength": 5000,
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ]
                              },
                              "interval": {
                                "enum": [
                                  "daily",
                                  "manual",
                                  "monthly",
                                  "weekly"
                                ],
                                "maxLength": 5000,
                                "type": "string",
                                "x-stripeBypassValidation": true
                              },
                              "monthly_anchor": {
                                "type": "integer"
                              },
                              "weekly_anchor": {
                                "enum": [
                                  "friday",
                                  "monday",
                                  "saturday",
                                  "sunday",
                                  "thursday",
                                  "tuesday",
                                  "wednesday"
                                ],
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "transfer_schedule_specs",
                            "type": "object"
                          },
                          "statement_descriptor": {
                            "maxLength": 22,
                            "type": "string"
                          }
                        },
                        "title": "payout_settings_specs",
                        "type": "object"
                      }
                    },
                    "title": "settings_specs",
                    "type": "object"
                  },
                  "tos_acceptance": {
                    "description": "Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).",
                    "properties": {
                      "date": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "ip": {
                        "type": "string"
                      },
                      "user_agent": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "tos_acceptance_specs",
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of Stripe account to create. Currently must be `custom`, as only [Custom accounts](https://stripe.com/docs/connect/custom-accounts) may be created via the API.",
                    "enum": ["custom", "express", "standard"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}": {
      "delete": {
        "description": "<p>With <a href=\"/docs/connect\">Connect</a>, you can delete Custom or Express accounts you manage.</p>\n\n<p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>\n\n<p>If you want to delete your own account, use the <a href=\"https://dashboard.stripe.com/account/data\">data tab in your account settings</a> instead.</p>",
        "operationId": "DeleteAccountsAccount",
        "parameters": [
          {
            "description": "The identifier of the account to be deleted. If none is provided, will default to the account of the API key.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the details of an account.</p>",
        "operationId": "GetAccountsAccount",
        "parameters": [
          {
            "description": "The identifier of the account to retrieve. If none is provided, the account associated with the API key is returned.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates a connected <a href=\"/docs/connect/accounts\">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>\n\n<p>To update your own account, use the <a href=\"https://dashboard.stripe.com/account\">Dashboard</a>. Refer to our <a href=\"/docs/connect/updating-accounts\">Connect</a> documentation to learn more about updating accounts.</p>",
        "operationId": "PostAccountsAccount",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "business_profile": {
                  "explode": true,
                  "style": "deepObject"
                },
                "company": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "individual": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "requested_capabilities": {
                  "explode": true,
                  "style": "deepObject"
                },
                "settings": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tos_acceptance": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_token": {
                    "description": "An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "external_account_payout_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "business_profile": {
                    "description": "Non-essential business information about the account",
                    "properties": {
                      "mcc": {
                        "maxLength": 4,
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "product_description": {
                        "maxLength": 40000,
                        "type": "string"
                      },
                      "support_email": {
                        "type": "string"
                      },
                      "support_phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "support_url": {
                        "type": "string"
                      },
                      "url": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "business_profile_specs",
                    "type": "object"
                  },
                  "business_type": {
                    "description": "The business type. Can be `individual` or `company`.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "company": {
                    "description": "Information about the company or business. This field is null unless `business_type` is set to `company`.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "address_specs",
                        "type": "object"
                      },
                      "address_kana": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kana_specs",
                        "type": "object"
                      },
                      "address_kanji": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kanji_specs",
                        "type": "object"
                      },
                      "directors_provided": {
                        "type": "boolean"
                      },
                      "executives_provided": {
                        "type": "boolean"
                      },
                      "name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "name_kana": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "name_kanji": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "owners_provided": {
                        "type": "boolean"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tax_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tax_id_registrar": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "vat_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "verification_document_specs",
                            "type": "object"
                          }
                        },
                        "title": "verification_specs",
                        "type": "object"
                      }
                    },
                    "title": "company_specs",
                    "type": "object"
                  },
                  "default_currency": {
                    "description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).",
                    "type": "string"
                  },
                  "email": {
                    "description": "Email address of the account representative. For Standard accounts, this is used to ask them to claim their Stripe account. For Custom accounts, this only makes the account easier to identify to platforms; Stripe does not email the account representative.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "external_account": {
                    "description": "A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "individual": {
                    "description": "Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "address_specs",
                        "type": "object"
                      },
                      "address_kana": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kana_specs",
                        "type": "object"
                      },
                      "address_kanji": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kanji_specs",
                        "type": "object"
                      },
                      "dob": {
                        "anyOf": [
                          {
                            "properties": {
                              "day": {
                                "type": "integer"
                              },
                              "month": {
                                "type": "integer"
                              },
                              "year": {
                                "type": "integer"
                              }
                            },
                            "required": ["day", "month", "year"],
                            "title": "date_of_birth_specs",
                            "type": "object"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "email": {
                        "type": "string"
                      },
                      "first_name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "first_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "first_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "gender": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "id_number": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "last_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "maiden_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "ssn_last_4": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "additional_document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          },
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          }
                        },
                        "title": "person_verification_specs",
                        "type": "object"
                      }
                    },
                    "title": "individual_specs",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an `Account` object. This can be useful for storing additional information about the account in a structured format.",
                    "type": "object"
                  },
                  "requested_capabilities": {
                    "description": "The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.",
                    "items": {
                      "enum": [
                        "card_issuing",
                        "card_payments",
                        "legacy_payments",
                        "transfers"
                      ],
                      "maxLength": 5000,
                      "type": "string",
                      "x-stripeBypassValidation": true
                    },
                    "type": "array"
                  },
                  "settings": {
                    "description": "Options for customizing how the account functions within Stripe.",
                    "properties": {
                      "branding": {
                        "properties": {
                          "icon": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "logo": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "primary_color": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "branding_settings_specs",
                        "type": "object"
                      },
                      "card_payments": {
                        "properties": {
                          "decline_on": {
                            "properties": {
                              "avs_failure": {
                                "type": "boolean"
                              },
                              "cvc_failure": {
                                "type": "boolean"
                              }
                            },
                            "title": "decline_charge_on_specs",
                            "type": "object"
                          },
                          "statement_descriptor_prefix": {
                            "maxLength": 10,
                            "type": "string"
                          }
                        },
                        "title": "card_payments_settings_specs",
                        "type": "object"
                      },
                      "payments": {
                        "properties": {
                          "statement_descriptor": {
                            "maxLength": 22,
                            "type": "string"
                          },
                          "statement_descriptor_kana": {
                            "maxLength": 22,
                            "type": "string"
                          },
                          "statement_descriptor_kanji": {
                            "maxLength": 22,
                            "type": "string"
                          }
                        },
                        "title": "payments_settings_specs",
                        "type": "object"
                      },
                      "payouts": {
                        "properties": {
                          "debit_negative_balances": {
                            "type": "boolean"
                          },
                          "schedule": {
                            "properties": {
                              "delay_days": {
                                "anyOf": [
                                  {
                                    "enum": ["minimum"],
                                    "maxLength": 5000,
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  }
                                ]
                              },
                              "interval": {
                                "enum": [
                                  "daily",
                                  "manual",
                                  "monthly",
                                  "weekly"
                                ],
                                "maxLength": 5000,
                                "type": "string",
                                "x-stripeBypassValidation": true
                              },
                              "monthly_anchor": {
                                "type": "integer"
                              },
                              "weekly_anchor": {
                                "enum": [
                                  "friday",
                                  "monday",
                                  "saturday",
                                  "sunday",
                                  "thursday",
                                  "tuesday",
                                  "wednesday"
                                ],
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "transfer_schedule_specs",
                            "type": "object"
                          },
                          "statement_descriptor": {
                            "maxLength": 22,
                            "type": "string"
                          }
                        },
                        "title": "payout_settings_specs",
                        "type": "object"
                      }
                    },
                    "title": "settings_specs",
                    "type": "object"
                  },
                  "tos_acceptance": {
                    "description": "Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).",
                    "properties": {
                      "date": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "ip": {
                        "type": "string"
                      },
                      "user_agent": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "tos_acceptance_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/bank_accounts": {
      "post": {
        "description": "<p>Create an external account for a given account.</p>",
        "operationId": "PostAccountsAccountBankAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "external_account_payout_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "default_for_currency": {
                    "description": "When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "external_account": {
                    "description": "Please refer to full [documentation](https://stripe.com/docs/api) instead.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an external account object. It can be useful for storing additional information about the external account in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/bank_accounts/{id}": {
      "delete": {
        "description": "<p>Delete a specified external account for a given account.</p>",
        "operationId": "DeleteAccountsAccountBankAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the external account to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieve a specified external account for a given account.</p>",
        "operationId": "GetAccountsAccountBankAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>\n<p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>",
        "operationId": "PostAccountsAccountBankAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the external account to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_holder_name": {
                    "description": "The name of the person or business that owns the bank account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "account_holder_type": {
                    "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
                    "enum": ["", "company", "individual"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_city": {
                    "description": "City/District/Suburb/Town/Village.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_country": {
                    "description": "Billing address country, if provided when creating card.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line1": {
                    "description": "Address line 1 (Street address/PO Box/Company name).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line2": {
                    "description": "Address line 2 (Apartment/Suite/Unit/Building).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_state": {
                    "description": "State/County/Province/Region.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_zip": {
                    "description": "ZIP or postal code.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_for_currency": {
                    "description": "When set to true, this becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "exp_month": {
                    "description": "Two digit number representing the card’s expiration month.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit number representing the card’s expiration year.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Cardholder name.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/capabilities": {
      "get": {
        "description": "<p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>",
        "operationId": "GetAccountsAccountCapabilities",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/capability"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "ListAccountCapability",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/capabilities/{capability}": {
      "get": {
        "description": "<p>Retrieves information about the specified Account Capability.</p>",
        "operationId": "GetAccountsAccountCapabilitiesCapability",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of an account capability to retrieve.",
            "in": "path",
            "name": "capability",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing Account Capability.</p>",
        "operationId": "PostAccountsAccountCapabilitiesCapability",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of an account capability to update.",
            "in": "path",
            "name": "capability",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "requested": {
                    "description": "Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/external_accounts": {
      "get": {
        "description": "<p>List external accounts for an account.</p>",
        "operationId": "GetAccountsAccountExternalAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.",
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/bank_account"
                          },
                          {
                            "$ref": "#/components/schemas/card"
                          }
                        ],
                        "title": "Polymorphic"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "ExternalAccountList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Create an external account for a given account.</p>",
        "operationId": "PostAccountsAccountExternalAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "external_account_payout_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "default_for_currency": {
                    "description": "When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "external_account": {
                    "description": "Please refer to full [documentation](https://stripe.com/docs/api) instead.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an external account object. It can be useful for storing additional information about the external account in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/external_accounts/{id}": {
      "delete": {
        "description": "<p>Delete a specified external account for a given account.</p>",
        "operationId": "DeleteAccountsAccountExternalAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the external account to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieve a specified external account for a given account.</p>",
        "operationId": "GetAccountsAccountExternalAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href=\"/docs/connect/custom-accounts\">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>\n<p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>",
        "operationId": "PostAccountsAccountExternalAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the external account to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_holder_name": {
                    "description": "The name of the person or business that owns the bank account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "account_holder_type": {
                    "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
                    "enum": ["", "company", "individual"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_city": {
                    "description": "City/District/Suburb/Town/Village.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_country": {
                    "description": "Billing address country, if provided when creating card.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line1": {
                    "description": "Address line 1 (Street address/PO Box/Company name).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line2": {
                    "description": "Address line 2 (Apartment/Suite/Unit/Building).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_state": {
                    "description": "State/County/Province/Region.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_zip": {
                    "description": "ZIP or postal code.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_for_currency": {
                    "description": "When set to true, this becomes the default external account for its currency.",
                    "type": "boolean"
                  },
                  "exp_month": {
                    "description": "Two digit number representing the card’s expiration month.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit number representing the card’s expiration year.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Cardholder name.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/login_links": {
      "post": {
        "description": "<p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>\n\n<p><strong>You may only create login links for <a href=\"/docs/connect/express-accounts\">Express accounts</a> connected to your platform</strong>.</p>",
        "operationId": "PostAccountsAccountLoginLinks",
        "parameters": [
          {
            "description": "The identifier of the account to create a login link for.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "redirect_url": {
                    "description": "Where to redirect the user after they log out of their dashboard.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/login_link"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/logout": {
      "put": {
        "description": "<p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>\n\n<p><strong>You may only log out <a href=\"/docs/connect/express-accounts\">Express accounts</a> connected to your platform</strong>.</p>",
        "operationId": "PutAccountsAccountLogout",
        "parameters": [
          {
            "description": "The identifier of the account to log out.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/light_account_logout"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/people": {
      "get": {
        "description": "<p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>",
        "operationId": "GetAccountsAccountPeople",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filters on the list of people returned based on the person's relationship to the account's company.",
            "explode": true,
            "in": "query",
            "name": "relationship",
            "required": false,
            "schema": {
              "properties": {
                "director": {
                  "type": "boolean"
                },
                "executive": {
                  "type": "boolean"
                },
                "owner": {
                  "type": "boolean"
                },
                "representative": {
                  "type": "boolean"
                }
              },
              "title": "all_people_relationship_specs",
              "type": "object"
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/person"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new person.</p>",
        "operationId": "PostAccountsAccountPeople",
        "parameters": [
          {
            "description": "The account that the person is associated with.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/people/{person}": {
      "delete": {
        "description": "<p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>",
        "operationId": "DeleteAccountsAccountPeoplePerson",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the person to be deleted.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves an existing person.</p>",
        "operationId": "GetAccountsAccountPeoplePerson",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of a person to retrieve.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing person.</p>",
        "operationId": "PostAccountsAccountPeoplePerson",
        "parameters": [
          {
            "description": "The account that the person is associated with.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of a person to update.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/persons": {
      "get": {
        "description": "<p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>",
        "operationId": "GetAccountsAccountPersons",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filters on the list of people returned based on the person's relationship to the account's company.",
            "explode": true,
            "in": "query",
            "name": "relationship",
            "required": false,
            "schema": {
              "properties": {
                "director": {
                  "type": "boolean"
                },
                "executive": {
                  "type": "boolean"
                },
                "owner": {
                  "type": "boolean"
                },
                "representative": {
                  "type": "boolean"
                }
              },
              "title": "all_people_relationship_specs",
              "type": "object"
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/person"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new person.</p>",
        "operationId": "PostAccountsAccountPersons",
        "parameters": [
          {
            "description": "The account that the person is associated with.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/persons/{person}": {
      "delete": {
        "description": "<p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>",
        "operationId": "DeleteAccountsAccountPersonsPerson",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the person to be deleted.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves an existing person.</p>",
        "operationId": "GetAccountsAccountPersonsPerson",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of a person to retrieve.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing person.</p>",
        "operationId": "PostAccountsAccountPersonsPerson",
        "parameters": [
          {
            "description": "The account that the person is associated with.",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of a person to update.",
            "in": "path",
            "name": "person",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kana": {
                  "explode": true,
                  "style": "deepObject"
                },
                "address_kanji": {
                  "explode": true,
                  "style": "deepObject"
                },
                "dob": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "relationship": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "The person's address.",
                    "properties": {
                      "city": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 200,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "address_specs",
                    "type": "object"
                  },
                  "address_kana": {
                    "description": "The Kana variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kana_specs",
                    "type": "object"
                  },
                  "address_kanji": {
                    "description": "The Kanji variation of the person's address (Japan only).",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "town": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "japan_address_kanji_specs",
                    "type": "object"
                  },
                  "dob": {
                    "anyOf": [
                      {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The person's date of birth."
                  },
                  "email": {
                    "description": "The person's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "first_name": {
                    "description": "The person's first name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kana": {
                    "description": "The Kana variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "first_name_kanji": {
                    "description": "The Kanji variation of the person's first name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "gender": {
                    "description": "The person's gender (International regulations require either \"male\" or \"female\").",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "id_number": {
                    "description": "The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The person's last name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kana": {
                    "description": "The Kana variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "last_name_kanji": {
                    "description": "The Kanji variation of the person's last name (Japan only).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "maiden_name": {
                    "description": "The person's maiden name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "person_token": {
                    "description": "A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The person's phone number.",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "The relationship that this person has with the account's legal entity.",
                    "properties": {
                      "director": {
                        "type": "boolean"
                      },
                      "executive": {
                        "type": "boolean"
                      },
                      "owner": {
                        "type": "boolean"
                      },
                      "percent_ownership": {
                        "anyOf": [
                          {
                            "type": "number"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "representative": {
                        "type": "boolean"
                      },
                      "title": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "relationship_specs",
                    "type": "object"
                  },
                  "ssn_last_4": {
                    "description": "The last 4 digits of the person's social security number.",
                    "type": "string"
                  },
                  "verification": {
                    "description": "The person's verification status.",
                    "properties": {
                      "additional_document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      },
                      "document": {
                        "properties": {
                          "back": {
                            "maxLength": 500,
                            "type": "string"
                          },
                          "front": {
                            "maxLength": 500,
                            "type": "string"
                          }
                        },
                        "title": "person_verification_document_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_verification_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/person"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/accounts/{account}/reject": {
      "post": {
        "description": "<p>With <a href=\"/docs/connect\">Connect</a>, you may flag accounts as suspicious.</p>\n\n<p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>",
        "operationId": "PostAccountsAccountReject",
        "parameters": [
          {
            "description": "The identifier of the account to reject",
            "in": "path",
            "name": "account",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "reason": {
                    "description": "The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["reason"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/apple_pay/domains": {
      "get": {
        "description": "<p>List apple pay domains.</p>",
        "operationId": "GetApplePayDomains",
        "parameters": [
          {
            "in": "query",
            "name": "domain_name",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/apple_pay_domain"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/apple_pay/domains",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "ApplePayDomainList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Create an apple pay domain.</p>",
        "operationId": "PostApplePayDomains",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "domain_name": {
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": ["domain_name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apple_pay_domain"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/apple_pay/domains/{domain}": {
      "delete": {
        "description": "<p>Delete an apple pay domain.</p>",
        "operationId": "DeleteApplePayDomainsDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_apple_pay_domain"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieve an apple pay domain.</p>",
        "operationId": "GetApplePayDomainsDomain",
        "parameters": [
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apple_pay_domain"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/application_fees": {
      "get": {
        "description": "<p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>",
        "operationId": "GetApplicationFees",
        "parameters": [
          {
            "description": "Only return application fees for the charge specified by this charge ID.",
            "in": "query",
            "name": "charge",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/application_fee"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/application_fees",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/application_fees/{fee}/refunds/{id}": {
      "get": {
        "description": "<p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>",
        "operationId": "GetApplicationFeesFeeRefundsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of the application fee refunded.",
            "in": "path",
            "name": "fee",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "ID of refund to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>\n\n<p>This request only accepts metadata as an argument.</p>",
        "operationId": "PostApplicationFeesFeeRefundsId",
        "parameters": [
          {
            "description": "ID of the application fee refunded.",
            "in": "path",
            "name": "fee",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "ID of refund to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/application_fees/{id}": {
      "get": {
        "description": "<p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>",
        "operationId": "GetApplicationFeesId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the fee to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application_fee"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/application_fees/{id}/refund": {
      "post": {
        "description": "",
        "operationId": "PostApplicationFeesIdRefund",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "type": "integer"
                  },
                  "directive": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application_fee"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/application_fees/{id}/refunds": {
      "get": {
        "description": "<p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>",
        "operationId": "GetApplicationFeesIdRefunds",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the application fee whose refunds will be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/fee_refund"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "FeeRefundList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Refunds an application fee that has previously been collected but not yet refunded.\nFunds will be refunded to the Stripe account from which the fee was originally collected.</p>\n\n<p>You can optionally refund only part of an application fee.\nYou can do so multiple times, until the entire fee has been refunded.</p>\n\n<p>Once entirely refunded, an application fee can’t be refunded again.\nThis method will raise an error when called on an already-refunded application fee,\nor when trying to refund more money than is left on an application fee.</p>",
        "operationId": "PostApplicationFeesIdRefunds",
        "parameters": [
          {
            "description": "The identifier of the application fee to be refunded.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "A positive integer, in _%s_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee.",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fee_refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/balance": {
      "get": {
        "description": "<p>Retrieves the current account balance, based on the authentication that was used to make the request.\n For a sample request, see <a href=\"/docs/connect/account-balances#accounting-for-negative-balances\">Accounting for negative balances</a>.</p>",
        "operationId": "GetBalance",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balance"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/balance/history": {
      "get": {
        "description": "<p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>\n\n<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>",
        "operationId": "GetBalanceHistory",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "available_on",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.",
            "in": "query",
            "name": "payout",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only returns the original transaction.",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only returns transactions of the given type. One of: `charge`, `refund`, `adjustment`, `application_fee`, `application_fee_refund`, `transfer`, `payment`, `payout`, `payout_failure`, `stripe_fee`, or `network_cost`.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/balance_transaction"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/balance_transactions",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "BalanceTransactionsList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/balance/history/{id}": {
      "get": {
        "description": "<p>Retrieves the balance transaction with the given ID.</p>\n\n<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>",
        "operationId": "GetBalanceHistoryId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the desired balance transaction, as found on any API object that affects the balance (e.g., a charge or transfer).",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/balance_transactions": {
      "get": {
        "description": "<p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>\n\n<p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>",
        "operationId": "GetBalanceTransactions",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "available_on",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.",
            "in": "query",
            "name": "payout",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only returns the original transaction.",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only returns transactions of the given type. One of: `charge`, `refund`, `adjustment`, `application_fee`, `application_fee_refund`, `transfer`, `payment`, `payout`, `payout_failure`, `stripe_fee`, or `network_cost`.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/balance_transaction"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/balance_transactions",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "BalanceTransactionsList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/balance_transactions/{id}": {
      "get": {
        "description": "<p>Retrieves the balance transaction with the given ID.</p>\n\n<p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>",
        "operationId": "GetBalanceTransactionsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the desired balance transaction, as found on any API object that affects the balance (e.g., a charge or transfer).",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balance_transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/bitcoin/receivers": {
      "get": {
        "deprecated": true,
        "description": "<p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p>",
        "operationId": "GetBitcoinReceivers",
        "parameters": [
          {
            "description": "Filter for active receivers.",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Filter for filled receivers.",
            "in": "query",
            "name": "filled",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter for receivers with uncaptured funds.",
            "in": "query",
            "name": "uncaptured_funds",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/bitcoin_receiver"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/bitcoin/receivers",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/bitcoin/receivers/{id}": {
      "get": {
        "deprecated": true,
        "description": "<p>Retrieves the Bitcoin receiver with the given ID.</p>",
        "operationId": "GetBitcoinReceiversId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bitcoin_receiver"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/bitcoin/receivers/{receiver}/transactions": {
      "get": {
        "deprecated": true,
        "description": "<p>List bitcoin transacitons for a given receiver.</p>",
        "operationId": "GetBitcoinReceiversReceiverTransactions",
        "parameters": [
          {
            "description": "Only return transactions for the customer specified by this customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return transactions for the receiver specified by this receiver ID.",
            "in": "path",
            "name": "receiver",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/bitcoin_transaction"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "BitcoinTransactionList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/bitcoin/transactions": {
      "get": {
        "deprecated": true,
        "description": "<p>List bitcoin transacitons for a given receiver.</p>",
        "operationId": "GetBitcoinTransactions",
        "parameters": [
          {
            "description": "Only return transactions for the customer specified by this customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return transactions for the receiver specified by this receiver ID.",
            "in": "query",
            "name": "receiver",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/bitcoin_transaction"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "BitcoinTransactionList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges": {
      "get": {
        "description": "<p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>",
        "operationId": "GetCharges",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return charges for the customer specified by this customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.",
            "in": "query",
            "name": "payment_intent",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return charges for this transfer group.",
            "in": "query",
            "name": "transfer_group",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/charge"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/charges",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>",
        "operationId": "PostCharges",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "destination": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                },
                "transfer_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
                    "type": "integer"
                  },
                  "application_fee": {
                    "type": "integer"
                  },
                  "application_fee_amount": {
                    "description": "A fee in %s that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees).",
                    "type": "integer"
                  },
                  "capture": {
                    "description": "Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](#capture_charge) later. Uncaptured charges expire in _seven days_. For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation.",
                    "type": "boolean"
                  },
                  "card": {
                    "anyOf": [
                      {
                        "properties": {
                          "address_city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_zip": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "cvc": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_month": {
                            "type": "integer"
                          },
                          "exp_year": {
                            "type": "integer"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "object": {
                            "enum": ["card"],
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["exp_month", "exp_year", "number"],
                        "title": "customer_payment_source_card",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js).",
                    "x-stripeBypassValidation": true
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "customer": {
                    "description": "The ID of an existing customer that will be charged in this request.",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.",
                    "maxLength": 40000,
                    "type": "string"
                  },
                  "destination": {
                    "anyOf": [
                      {
                        "properties": {
                          "account": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "amount": {
                            "type": "integer"
                          }
                        },
                        "required": ["account"],
                        "title": "destination_specs",
                        "type": "object"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "on_behalf_of": {
                    "description": "The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "receipt_email": {
                    "description": "The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).",
                    "type": "string"
                  },
                  "shipping": {
                    "description": "Shipping information for the charge. Helps prevent fraud on charges for physical goods.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["line1"],
                        "title": "address",
                        "type": "object"
                      },
                      "carrier": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tracking_number": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["address", "name"],
                    "title": "shipping",
                    "type": "object"
                  },
                  "source": {
                    "description": "A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "statement_descriptor": {
                    "description": "For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "statement_descriptor_suffix": {
                    "description": "Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "transfer_data": {
                    "description": "An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.",
                    "properties": {
                      "amount": {
                        "type": "integer"
                      },
                      "destination": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["destination"],
                    "title": "transfer_data_specs",
                    "type": "object"
                  },
                  "transfer_group": {
                    "description": "A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#grouping-transactions).",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges/{charge}": {
      "get": {
        "description": "<p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>",
        "operationId": "GetChargesCharge",
        "parameters": [
          {
            "description": "The identifier of the charge to be retrieved.",
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostChargesCharge",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "fraud_details": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "customer": {
                    "description": "The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.",
                    "maxLength": 40000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "fraud_details": {
                    "description": "A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms.",
                    "properties": {
                      "user_report": {
                        "enum": ["", "fraudulent", "safe"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["user_report"],
                    "title": "fraud_details",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "receipt_email": {
                    "description": "This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "shipping": {
                    "description": "Shipping information for the charge. Helps prevent fraud on charges for physical goods.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["line1"],
                        "title": "address",
                        "type": "object"
                      },
                      "carrier": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tracking_number": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["address", "name"],
                    "title": "shipping",
                    "type": "object"
                  },
                  "transfer_group": {
                    "description": "A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#grouping-transactions) for details.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges/{charge}/capture": {
      "post": {
        "description": "<p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href=\"#create_charge\">created a charge</a> with the capture option set to false.</p>\n\n<p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>",
        "operationId": "PostChargesChargeCapture",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "transfer_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.",
                    "type": "integer"
                  },
                  "application_fee": {
                    "description": "An application fee to add on to this charge. Can only be used with Stripe Connect.",
                    "type": "integer"
                  },
                  "application_fee_amount": {
                    "description": "An application fee amount to add on to this charge, which must be less than or equal to the original amount. Can only be used with Stripe Connect.",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "receipt_email": {
                    "description": "The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.",
                    "type": "string"
                  },
                  "statement_descriptor": {
                    "description": "For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "statement_descriptor_suffix": {
                    "description": "Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "transfer_data": {
                    "description": "An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.",
                    "properties": {
                      "amount": {
                        "type": "integer"
                      }
                    },
                    "title": "transfer_data_specs",
                    "type": "object"
                  },
                  "transfer_group": {
                    "description": "A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#grouping-transactions) for details.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges/{charge}/dispute": {
      "get": {
        "description": "<p>Retrieve a dispute for a specified charge.</p>",
        "operationId": "GetChargesChargeDispute",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "",
        "operationId": "PostChargesChargeDispute",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "evidence": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "evidence": {
                    "description": "Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.",
                    "properties": {
                      "access_activity_log": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "billing_address": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "cancellation_policy": {
                        "type": "string"
                      },
                      "cancellation_policy_disclosure": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "cancellation_rebuttal": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "customer_communication": {
                        "type": "string"
                      },
                      "customer_email_address": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "customer_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "customer_purchase_ip": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "customer_signature": {
                        "type": "string"
                      },
                      "duplicate_charge_documentation": {
                        "type": "string"
                      },
                      "duplicate_charge_explanation": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "duplicate_charge_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "product_description": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "receipt": {
                        "type": "string"
                      },
                      "refund_policy": {
                        "type": "string"
                      },
                      "refund_policy_disclosure": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "refund_refusal_explanation": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "service_date": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "service_documentation": {
                        "type": "string"
                      },
                      "shipping_address": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "shipping_carrier": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "shipping_date": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "shipping_documentation": {
                        "type": "string"
                      },
                      "shipping_tracking_number": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "uncategorized_file": {
                        "type": "string"
                      },
                      "uncategorized_text": {
                        "maxLength": 20000,
                        "type": "string"
                      }
                    },
                    "title": "dispute_evidence_params",
                    "type": "object"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a dispute object. This can be useful for storing additional information about the dispute in a structured format.",
                    "type": "object"
                  },
                  "submit": {
                    "description": "Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges/{charge}/dispute/close": {
      "post": {
        "description": "",
        "operationId": "PostChargesChargeDisputeClose",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges/{charge}/refund": {
      "post": {
        "description": "<p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>\n\n<p>Creating a new refund will refund a charge that has previously been created but not yet refunded.\nFunds will be refunded to the credit or debit card that was originally charged.</p>\n\n<p>You can optionally refund only part of a charge.\nYou can do so multiple times, until the entire charge has been refunded.</p>\n\n<p>Once entirely refunded, a charge can’t be refunded again.\nThis method will raise an error when called on an already-refunded charge,\nor when trying to refund more money than is left on a charge.</p>",
        "operationId": "PostChargesChargeRefund",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "payment_intent": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "reason": {
                    "enum": [
                      "duplicate",
                      "fraudulent",
                      "requested_by_customer"
                    ],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "refund_application_fee": {
                    "type": "boolean"
                  },
                  "reverse_transfer": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/charge"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges/{charge}/refunds": {
      "get": {
        "description": "<p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>",
        "operationId": "GetChargesChargeRefunds",
        "parameters": [
          {
            "description": "The ID of the charge whose refunds will be retrieved.",
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/refund"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "RefundList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Create a refund.</p>",
        "operationId": "PostChargesChargeRefunds",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "payment_intent": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "reason": {
                    "enum": [
                      "duplicate",
                      "fraudulent",
                      "requested_by_customer"
                    ],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "refund_application_fee": {
                    "type": "boolean"
                  },
                  "reverse_transfer": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/charges/{charge}/refunds/{refund}": {
      "get": {
        "description": "<p>Retrieves the details of an existing refund.</p>",
        "operationId": "GetChargesChargeRefundsRefund",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "refund",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Update a specified refund.</p>",
        "operationId": "PostChargesChargeRefundsRefund",
        "parameters": [
          {
            "in": "path",
            "name": "charge",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "refund",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/checkout/sessions": {
      "post": {
        "description": "<p>Creates a Session object.</p>",
        "operationId": "PostCheckoutSessions",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "line_items": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_intent_data": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_types": {
                  "explode": true,
                  "style": "deepObject"
                },
                "setup_intent_data": {
                  "explode": true,
                  "style": "deepObject"
                },
                "subscription_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "billing_address_collection": {
                    "description": "Specify whether Checkout should collect the customer's billing address.",
                    "enum": ["auto", "required"],
                    "type": "string"
                  },
                  "cancel_url": {
                    "description": "The URL the customer will be directed to if they decide to cancel payment and return to your website.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "client_reference_id": {
                    "description": "A unique string to reference the Checkout Session. This can be a\ncustomer ID, a cart ID, or similar, and can be used to reconcile the\nsession with your internal systems.",
                    "maxLength": 200,
                    "type": "string"
                  },
                  "customer": {
                    "description": "ID of an existing customer, if one exists. Only supported for Checkout\nSessions in `payment` or `subscription` mode, but not Checkout Sessions\nin `setup` mode. The email stored on the customer will be used to prefill\nthe email field on the Checkout page. If the customer changes their email\non the Checkout page, the Customer object will be updated with the new\nemail.\nIf blank for Checkout Sessions in `payment` or `subscription` mode,\nCheckout will create a new customer object based on information\nprovided during the session.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "customer_email": {
                    "description": "If provided, this value will be used when the Customer object is created.\nIf not provided, customers will be asked to enter their email address.\nUse this parameter to prefill customer data if you already have an email\non file. To access information about the customer once a session is\ncomplete, use the `customer` field.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "line_items": {
                    "description": "A list of items the customer is purchasing. Use this parameter for\none-time payments or adding invoice line items to a subscription (used\nin conjunction with `subscription_data`).",
                    "items": {
                      "properties": {
                        "amount": {
                          "type": "integer"
                        },
                        "currency": {
                          "type": "string"
                        },
                        "description": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "images": {
                          "items": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "name": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        }
                      },
                      "required": ["amount", "currency", "name", "quantity"],
                      "title": "line_item_params",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "locale": {
                    "description": "The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.",
                    "enum": [
                      "auto",
                      "da",
                      "de",
                      "en",
                      "es",
                      "fi",
                      "fr",
                      "it",
                      "ja",
                      "ms",
                      "nb",
                      "nl",
                      "pl",
                      "pt",
                      "sv",
                      "zh"
                    ],
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "mode": {
                    "description": "The mode of the Checkout Session, one of `payment`, `setup`, or `subscription`.",
                    "enum": ["payment", "setup", "subscription"],
                    "type": "string"
                  },
                  "payment_intent_data": {
                    "description": "A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.",
                    "properties": {
                      "application_fee_amount": {
                        "type": "integer"
                      },
                      "capture_method": {
                        "enum": ["automatic", "manual"],
                        "type": "string"
                      },
                      "description": {
                        "maxLength": 1000,
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "on_behalf_of": {
                        "type": "string"
                      },
                      "receipt_email": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "setup_future_usage": {
                        "enum": ["off_session", "on_session"],
                        "type": "string"
                      },
                      "shipping": {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["line1"],
                            "title": "address",
                            "type": "object"
                          },
                          "carrier": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "tracking_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["address", "name"],
                        "title": "shipping",
                        "type": "object"
                      },
                      "statement_descriptor": {
                        "maxLength": 22,
                        "type": "string"
                      },
                      "transfer_data": {
                        "properties": {
                          "destination": {
                            "type": "string"
                          }
                        },
                        "required": ["destination"],
                        "title": "transfer_data_params",
                        "type": "object"
                      }
                    },
                    "title": "payment_intent_data_params",
                    "type": "object"
                  },
                  "payment_method_types": {
                    "description": "A list of the types of payment methods (e.g. card) this Checkout\nSession is allowed to accept. The only supported values today are `card` and `ideal`.",
                    "items": {
                      "enum": ["card", "ideal"],
                      "type": "string",
                      "x-stripeBypassValidation": true
                    },
                    "type": "array"
                  },
                  "setup_intent_data": {
                    "description": "A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode.",
                    "properties": {
                      "description": {
                        "maxLength": 1000,
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "on_behalf_of": {
                        "type": "string"
                      }
                    },
                    "title": "setup_intent_data_param",
                    "type": "object"
                  },
                  "submit_type": {
                    "description": "Describes the type of transaction being performed by Checkout in order to customize\nrelevant text on the page, such as the submit button. `submit_type` can only be\nspecified on Checkout Sessions in `payment` mode, but not Checkout Sessions\nin `subscription` or `setup` mode.",
                    "enum": ["auto", "book", "donate", "pay"],
                    "type": "string"
                  },
                  "subscription_data": {
                    "description": "A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode.",
                    "properties": {
                      "application_fee_percent": {
                        "type": "number"
                      },
                      "items": {
                        "items": {
                          "properties": {
                            "plan": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "quantity": {
                              "type": "integer"
                            }
                          },
                          "required": ["plan"],
                          "title": "subscription_data_item_param",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "trial_end": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "trial_from_plan": {
                        "type": "boolean"
                      },
                      "trial_period_days": {
                        "type": "integer"
                      }
                    },
                    "required": ["items"],
                    "title": "subscription_data_params",
                    "type": "object"
                  },
                  "success_url": {
                    "description": "The URL to which Stripe should send customers when payment or setup\nis complete.\nIf you’d like access to the Checkout Session for the successful\npayment, read more about it in our guide on [fulfilling your payments\nwith webhooks](/docs/payments/checkout/fulfillment#webhooks).",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": [
                  "cancel_url",
                  "payment_method_types",
                  "success_url"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkout.session"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/checkout/sessions/{session}": {
      "get": {
        "description": "<p>Retrieves a Session object.</p>",
        "operationId": "GetCheckoutSessionsSession",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the Checkout Session.",
            "in": "path",
            "name": "session",
            "required": true,
            "schema": {
              "maxLength": 64,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkout.session"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/country_specs": {
      "get": {
        "description": "<p>Lists all Country Spec objects available in the API.</p>",
        "operationId": "GetCountrySpecs",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/country_spec"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/country_specs",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/country_specs/{country}": {
      "get": {
        "description": "<p>Returns a Country Spec for a given Country code.</p>",
        "operationId": "GetCountrySpecsCountry",
        "parameters": [
          {
            "description": "An ISO 3166-1 alpha-2 country code. Available country codes can be listed with the [List Country Specs](https://stripe.com/docs/api#list_country_specs) endpoint.",
            "in": "path",
            "name": "country",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/country_spec"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/coupons": {
      "get": {
        "description": "<p>Returns a list of your coupons.</p>",
        "operationId": "GetCoupons",
        "parameters": [
          {
            "description": "A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/coupon"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/coupons",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>You can create coupons easily via the <a href=\"https://dashboard.stripe.com/coupons\">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>\n\n<p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>",
        "operationId": "PostCoupons",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount_off": {
                    "description": "A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).",
                    "type": "string"
                  },
                  "duration": {
                    "description": "Specifies how long the discount will be in effect. Can be `forever`, `once`, or `repeating`.",
                    "enum": ["forever", "once", "repeating"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "duration_in_months": {
                    "description": "Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "Unique string of your choice that will be used to identify this coupon when applying it to a customer. This is often a specific code you'll give to your customer to use when signing up (e.g., `FALL25OFF`). If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "max_redemptions": {
                    "description": "A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.",
                    "type": "integer"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.",
                    "maxLength": 40,
                    "type": "string"
                  },
                  "percent_off": {
                    "description": "A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).",
                    "type": "number"
                  },
                  "redeem_by": {
                    "description": "Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.",
                    "format": "unix-time",
                    "type": "integer"
                  }
                },
                "required": ["duration"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coupon"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/coupons/{coupon}": {
      "delete": {
        "description": "<p>You can delete coupons via the <a href=\"https://dashboard.stripe.com/coupons\">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>",
        "operationId": "DeleteCouponsCoupon",
        "parameters": [
          {
            "description": "The identifier of the coupon to be deleted.",
            "in": "path",
            "name": "coupon",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_coupon"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the coupon with the given ID.</p>",
        "operationId": "GetCouponsCoupon",
        "parameters": [
          {
            "description": "The ID of the desired coupon.",
            "in": "path",
            "name": "coupon",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coupon"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>",
        "operationId": "PostCouponsCoupon",
        "parameters": [
          {
            "description": "The identifier of the coupon to be updated.",
            "in": "path",
            "name": "coupon",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format.",
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.",
                    "maxLength": 40,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coupon"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/credit_notes": {
      "get": {
        "description": "<p>Returns a list of credit notes.</p>",
        "operationId": "GetCreditNotes",
        "parameters": [
          {
            "description": "Only return credit notes for the customer specified by this customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return credit notes for the invoice specified by this invoice ID.",
            "in": "query",
            "name": "invoice",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/credit_note"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "CreditNotesList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces\nits <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result\nin any combination of the following:</p>\n\n<ul>\n <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>\n <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>\n <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>\n</ul>\n\n<p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>\n\n<p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>\nor <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>",
        "operationId": "PostCreditNotes",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "The integer amount in **%s** representing the total amount of the credit note.",
                    "type": "integer"
                  },
                  "credit_amount": {
                    "description": "The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "invoice": {
                    "description": "ID of the invoice.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "memo": {
                    "description": "The credit note's memo appears on the credit note PDF.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "out_of_band_amount": {
                    "description": "The integer amount in **%s** representing the amount that is credited outside of Stripe.",
                    "type": "integer"
                  },
                  "reason": {
                    "description": "Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`",
                    "enum": [
                      "duplicate",
                      "fraudulent",
                      "order_change",
                      "product_unsatisfactory"
                    ],
                    "type": "string"
                  },
                  "refund": {
                    "description": "ID of an existing refund to link this credit note to.",
                    "type": "string"
                  },
                  "refund_amount": {
                    "description": "The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.",
                    "type": "integer"
                  }
                },
                "required": ["invoice"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/credit_notes/preview": {
      "get": {
        "description": "<p>Get a preview of a credit note without creating it.</p>",
        "operationId": "GetCreditNotesPreview",
        "parameters": [
          {
            "description": "The integer amount in **%s** representing the total amount of the credit note.",
            "in": "query",
            "name": "amount",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.",
            "in": "query",
            "name": "credit_amount",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of the invoice.",
            "in": "query",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The credit note's memo appears on the credit note PDF.",
            "in": "query",
            "name": "memo",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
            "explode": true,
            "in": "query",
            "name": "metadata",
            "required": false,
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "style": "deepObject"
          },
          {
            "description": "The integer amount in **%s** representing the amount that is credited outside of Stripe.",
            "in": "query",
            "name": "out_of_band_amount",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`",
            "in": "query",
            "name": "reason",
            "required": false,
            "schema": {
              "enum": [
                "duplicate",
                "fraudulent",
                "order_change",
                "product_unsatisfactory"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "ID of an existing refund to link this credit note to.",
            "in": "query",
            "name": "refund",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.",
            "in": "query",
            "name": "refund_amount",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/credit_notes/{id}": {
      "get": {
        "description": "<p>Retrieves the credit note object with the given identifier.</p>",
        "operationId": "GetCreditNotesId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of the credit note object to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing credit note.</p>",
        "operationId": "PostCreditNotesId",
        "parameters": [
          {
            "description": "ID of the credit note object to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "memo": {
                    "description": "Credit note memo.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/credit_notes/{id}/void": {
      "post": {
        "description": "<p>Marks a credit note as void. Learn more about <a href=\"/docs/billing/invoices/credit-notes#voiding\">voiding credit notes</a>.</p>",
        "operationId": "PostCreditNotesIdVoid",
        "parameters": [
          {
            "description": "ID of the credit note object to void.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers": {
      "get": {
        "description": "<p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>",
        "operationId": "GetCustomers",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A filter on the list based on the customer's `email` field. The value must be a string.",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "maxLength": 512,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/customer"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/customers",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new customer object.</p>",
        "operationId": "PostCustomers",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "invoice_settings": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "preferred_locales": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_id_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "anyOf": [
                      {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["line1"],
                        "title": "address",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The customer's address."
                  },
                  "balance": {
                    "description": "An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.",
                    "type": "integer"
                  },
                  "coupon": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "email": {
                    "description": "Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.",
                    "maxLength": 512,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "invoice_prefix": {
                    "description": "The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "invoice_settings": {
                    "description": "Default invoice settings for this customer.",
                    "properties": {
                      "custom_fields": {
                        "anyOf": [
                          {
                            "items": {
                              "properties": {
                                "name": {
                                  "maxLength": 30,
                                  "type": "string"
                                },
                                "value": {
                                  "maxLength": 30,
                                  "type": "string"
                                }
                              },
                              "required": ["name", "value"],
                              "title": "custom_field_params",
                              "type": "object"
                            },
                            "type": "array"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "default_payment_method": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "footer": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "customer_param",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The customer's full name or business name.",
                    "maxLength": 256,
                    "type": "string"
                  },
                  "payment_method": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The customer's phone number.",
                    "maxLength": 20,
                    "type": "string"
                  },
                  "preferred_locales": {
                    "description": "Customer's preferred languages, ordered by preference.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["line1"],
                            "title": "address",
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["address", "name"],
                        "title": "customer_shipping",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The customer's shipping information. Appears on invoices emailed to this customer."
                  },
                  "source": {
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "tax_exempt": {
                    "description": "The customer's tax exemption. One of `none`, `exempt`, or `reverse`.",
                    "enum": ["", "exempt", "none", "reverse"],
                    "type": "string"
                  },
                  "tax_id_data": {
                    "description": "The customer's tax IDs.",
                    "items": {
                      "properties": {
                        "type": {
                          "enum": [
                            "au_abn",
                            "ch_vat",
                            "eu_vat",
                            "in_gst",
                            "mx_rfc",
                            "no_vat",
                            "nz_gst",
                            "za_vat"
                          ],
                          "maxLength": 5000,
                          "type": "string",
                          "x-stripeBypassValidation": true
                        },
                        "value": {
                          "type": "string"
                        }
                      },
                      "required": ["type", "value"],
                      "title": "data_params",
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}": {
      "delete": {
        "description": "<p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>",
        "operationId": "DeleteCustomersCustomer",
        "parameters": [
          {
            "description": "The identifier of the customer to be deleted.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p>",
        "operationId": "GetCustomersCustomer",
        "parameters": [
          {
            "description": "The identifier of the customer to be retrieved.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/customer"
                    },
                    {
                      "$ref": "#/components/schemas/deleted_customer"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>\n\n<p>This request accepts mostly the same arguments as the customer creation call.</p>",
        "operationId": "PostCustomersCustomer",
        "parameters": [
          {
            "description": "The identifier of the customer to subscribe.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "invoice_settings": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "preferred_locales": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                },
                "trial_end": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "anyOf": [
                      {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["line1"],
                        "title": "address",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The customer's address."
                  },
                  "balance": {
                    "description": "An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.",
                    "type": "integer"
                  },
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "customer_payment_source_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "card": {
                    "anyOf": [
                      {
                        "properties": {
                          "address_city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_zip": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "cvc": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_month": {
                            "type": "integer"
                          },
                          "exp_year": {
                            "type": "integer"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "object": {
                            "enum": ["card"],
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["exp_month", "exp_year", "number"],
                        "title": "customer_payment_source_card",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js).",
                    "x-stripeBypassValidation": true
                  },
                  "coupon": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_alipay_account": {
                    "description": "ID of Alipay account to make the customer's new default for invoice payments.",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "default_bank_account": {
                    "description": "ID of bank account to make the customer's new default for invoice payments.",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "default_card": {
                    "description": "ID of card to make the customer's new default for invoice payments.",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "default_source": {
                    "description": "If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.\n\nProvide the ID of a payment source already attached to this customer to make it this customer's default payment source.\n\nIf you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "email": {
                    "description": "Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.",
                    "maxLength": 512,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "invoice_prefix": {
                    "description": "The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "invoice_settings": {
                    "description": "Default invoice settings for this customer.",
                    "properties": {
                      "custom_fields": {
                        "anyOf": [
                          {
                            "items": {
                              "properties": {
                                "name": {
                                  "maxLength": 30,
                                  "type": "string"
                                },
                                "value": {
                                  "maxLength": 30,
                                  "type": "string"
                                }
                              },
                              "required": ["name", "value"],
                              "title": "custom_field_params",
                              "type": "object"
                            },
                            "type": "array"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "default_payment_method": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "footer": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "customer_param",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The customer's full name or business name.",
                    "maxLength": 256,
                    "type": "string"
                  },
                  "phone": {
                    "description": "The customer's phone number.",
                    "maxLength": 20,
                    "type": "string"
                  },
                  "preferred_locales": {
                    "description": "Customer's preferred languages, ordered by preference.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["line1"],
                            "title": "address",
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["address", "name"],
                        "title": "customer_shipping",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The customer's shipping information. Appears on invoices emailed to this customer."
                  },
                  "source": {
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "tax_exempt": {
                    "description": "The customer's tax exemption. One of `none`, `exempt`, or `reverse`.",
                    "enum": ["", "exempt", "none", "reverse"],
                    "type": "string"
                  },
                  "trial_end": {
                    "anyOf": [
                      {
                        "enum": ["now"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    ],
                    "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/balance_transactions": {
      "get": {
        "description": "<p>Returns a list of transactions that updated the customer’s <a href=\"/docs/api/customers/object#customer_object-balance\"><code>balance</code></a>.</p>",
        "operationId": "GetCustomersCustomerBalanceTransactions",
        "parameters": [
          {
            "description": "The customer to retrieve transactions for.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/customer_balance_transaction"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "CustomerBalanceTransactionList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates an immutable transaction that updates the customer’s <a href=\"/docs/api/customers/object#customer_object-balance\"><code>balance</code></a>.</p>",
        "operationId": "PostCustomersCustomerBalanceTransactions",
        "parameters": [
          {
            "description": "The customer the transaction belongs to.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "The integer amount in **%s** to apply to the customer's balance. Pass a negative amount to credit the customer's balance, and pass in a positive amount to debit the customer's balance.",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value.",
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 350,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  }
                },
                "required": ["amount", "currency"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_balance_transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/balance_transactions/{transaction}": {
      "get": {
        "description": "<p>Retrieves a specific transaction that updated the customer’s <a href=\"/docs/api/customers/object#customer_object-balance\"><code>balance</code></a>.</p>",
        "operationId": "GetCustomersCustomerBalanceTransactionsTransaction",
        "parameters": [
          {
            "description": "The customer the transaction belongs to.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The transaction to retrieve.",
            "in": "path",
            "name": "transaction",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_balance_transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Most customer balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>",
        "operationId": "PostCustomersCustomerBalanceTransactionsTransaction",
        "parameters": [
          {
            "description": "The customer the transaction belongs to.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The transaction to update.",
            "in": "path",
            "name": "transaction",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 350,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_balance_transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/bank_accounts": {
      "get": {
        "deprecated": true,
        "description": "<p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>",
        "operationId": "GetCustomersCustomerBankAccounts",
        "parameters": [
          {
            "description": "The ID of the customer whose bank accounts will be retrieved.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/bank_account"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "BankAccountList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>\n\n<p>If the card’s owner has no default card, then the new card will become the default.\nHowever, if the owner already has a default, then it will not change.\nTo change the default, you should <a href=\"/docs/api#update_customer\">update the customer</a> to have a new <code>default_source</code>.</p>",
        "operationId": "PostCustomersCustomerBankAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "alipay_account": {
                    "description": "A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "customer_payment_source_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "card": {
                    "anyOf": [
                      {
                        "properties": {
                          "address_city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_zip": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "cvc": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_month": {
                            "type": "integer"
                          },
                          "exp_year": {
                            "type": "integer"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "object": {
                            "enum": ["card"],
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["exp_month", "exp_year", "number"],
                        "title": "customer_payment_source_card",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js).",
                    "x-stripeBypassValidation": true
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a card object. It can be useful for storing additional information about the card in a structured format.",
                    "type": "object"
                  },
                  "source": {
                    "description": "Please refer to full [documentation](https://stripe.com/docs/api) instead.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/bank_accounts/{id}": {
      "delete": {
        "description": "<p>Delete a specified source for a given customer.</p>",
        "operationId": "DeleteCustomersCustomerBankAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the source to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/payment_source"
                    },
                    {
                      "$ref": "#/components/schemas/deleted_payment_source"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "deprecated": true,
        "description": "<p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>",
        "operationId": "GetCustomersCustomerBankAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of bank account to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Update a specified source for a given customer.</p>",
        "operationId": "PostCustomersCustomerBankAccountsId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "owner": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_holder_name": {
                    "description": "The name of the person or business that owns the bank account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "account_holder_type": {
                    "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
                    "enum": ["company", "individual"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_city": {
                    "description": "City/District/Suburb/Town/Village.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_country": {
                    "description": "Billing address country, if provided when creating card.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line1": {
                    "description": "Address line 1 (Street address/PO Box/Company name).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line2": {
                    "description": "Address line 2 (Apartment/Suite/Unit/Building).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_state": {
                    "description": "State/County/Province/Region.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_zip": {
                    "description": "ZIP or postal code.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_month": {
                    "description": "Two digit number representing the card’s expiration month.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit number representing the card’s expiration year.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Cardholder name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "owner": {
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "source_address",
                        "type": "object"
                      },
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "owner",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card"
                    },
                    {
                      "$ref": "#/components/schemas/bank_account"
                    },
                    {
                      "$ref": "#/components/schemas/source"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/bank_accounts/{id}/verify": {
      "post": {
        "description": "<p>Verify a specified bank account for a given customer.</p>",
        "operationId": "PostCustomersCustomerBankAccountsIdVerify",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the source to be verified.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "amounts": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amounts": {
                    "description": "Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.",
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/cards": {
      "get": {
        "deprecated": true,
        "description": "<p>You can see a list of the cards belonging to a customer.\nNote that the 10 most recent sources are always available on the <code>Customer</code> object.\nIf you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>",
        "operationId": "GetCustomersCustomerCards",
        "parameters": [
          {
            "description": "The ID of the customer whose cards will be retrieved.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/card"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "CardList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>\n\n<p>If the card’s owner has no default card, then the new card will become the default.\nHowever, if the owner already has a default, then it will not change.\nTo change the default, you should <a href=\"/docs/api#update_customer\">update the customer</a> to have a new <code>default_source</code>.</p>",
        "operationId": "PostCustomersCustomerCards",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "alipay_account": {
                    "description": "A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "customer_payment_source_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "card": {
                    "anyOf": [
                      {
                        "properties": {
                          "address_city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_zip": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "cvc": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_month": {
                            "type": "integer"
                          },
                          "exp_year": {
                            "type": "integer"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "object": {
                            "enum": ["card"],
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["exp_month", "exp_year", "number"],
                        "title": "customer_payment_source_card",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js).",
                    "x-stripeBypassValidation": true
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a card object. It can be useful for storing additional information about the card in a structured format.",
                    "type": "object"
                  },
                  "source": {
                    "description": "Please refer to full [documentation](https://stripe.com/docs/api) instead.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/cards/{id}": {
      "delete": {
        "description": "<p>Delete a specified source for a given customer.</p>",
        "operationId": "DeleteCustomersCustomerCardsId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the source to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/payment_source"
                    },
                    {
                      "$ref": "#/components/schemas/deleted_payment_source"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "deprecated": true,
        "description": "<p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>",
        "operationId": "GetCustomersCustomerCardsId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the card to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/card"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Update a specified source for a given customer.</p>",
        "operationId": "PostCustomersCustomerCardsId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "owner": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_holder_name": {
                    "description": "The name of the person or business that owns the bank account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "account_holder_type": {
                    "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
                    "enum": ["company", "individual"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_city": {
                    "description": "City/District/Suburb/Town/Village.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_country": {
                    "description": "Billing address country, if provided when creating card.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line1": {
                    "description": "Address line 1 (Street address/PO Box/Company name).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line2": {
                    "description": "Address line 2 (Apartment/Suite/Unit/Building).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_state": {
                    "description": "State/County/Province/Region.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_zip": {
                    "description": "ZIP or postal code.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_month": {
                    "description": "Two digit number representing the card’s expiration month.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit number representing the card’s expiration year.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Cardholder name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "owner": {
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "source_address",
                        "type": "object"
                      },
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "owner",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card"
                    },
                    {
                      "$ref": "#/components/schemas/bank_account"
                    },
                    {
                      "$ref": "#/components/schemas/source"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/discount": {
      "delete": {
        "description": "<p>Removes the currently applied discount on a customer.</p>",
        "operationId": "DeleteCustomersCustomerDiscount",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_discount"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "",
        "operationId": "GetCustomersCustomerDiscount",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/discount"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/sources": {
      "get": {
        "description": "<p>List sources for a specified customer.</p>",
        "operationId": "GetCustomersCustomerSources",
        "parameters": [
          {
            "description": "The ID of the customer whose sources will be retrieved.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter sources according to a particular object type.",
            "in": "query",
            "name": "object",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "The list contains all payment sources that have been attached to the customer.",
                      "items": {
                        "anyOf": [
                          {
                            "$ref": "#/components/schemas/alipay_account"
                          },
                          {
                            "$ref": "#/components/schemas/bank_account"
                          },
                          {
                            "$ref": "#/components/schemas/bitcoin_receiver"
                          },
                          {
                            "$ref": "#/components/schemas/card"
                          },
                          {
                            "$ref": "#/components/schemas/source"
                          }
                        ],
                        "title": "Polymorphic"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "ApmsSourcesSourceList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>\n\n<p>If the card’s owner has no default card, then the new card will become the default.\nHowever, if the owner already has a default, then it will not change.\nTo change the default, you should <a href=\"/docs/api#update_customer\">update the customer</a> to have a new <code>default_source</code>.</p>",
        "operationId": "PostCustomersCustomerSources",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "alipay_account": {
                    "description": "A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "bank_account": {
                    "anyOf": [
                      {
                        "properties": {
                          "account_holder_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_holder_type": {
                            "enum": ["company", "individual"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "account_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "type": "string"
                          },
                          "object": {
                            "enum": ["bank_account"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "routing_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["account_number", "country"],
                        "title": "customer_payment_source_bank_account",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details."
                  },
                  "card": {
                    "anyOf": [
                      {
                        "properties": {
                          "address_city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_zip": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "cvc": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_month": {
                            "type": "integer"
                          },
                          "exp_year": {
                            "type": "integer"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "object": {
                            "enum": ["card"],
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["exp_month", "exp_year", "number"],
                        "title": "customer_payment_source_card",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js).",
                    "x-stripeBypassValidation": true
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a card object. It can be useful for storing additional information about the card in a structured format.",
                    "type": "object"
                  },
                  "source": {
                    "description": "Please refer to full [documentation](https://stripe.com/docs/api) instead.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/sources/{id}": {
      "delete": {
        "description": "<p>Delete a specified source for a given customer.</p>",
        "operationId": "DeleteCustomersCustomerSourcesId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the source to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/payment_source"
                    },
                    {
                      "$ref": "#/components/schemas/deleted_payment_source"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieve a specified source for a given customer.</p>",
        "operationId": "GetCustomersCustomerSourcesId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the source to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 500,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Update a specified source for a given customer.</p>",
        "operationId": "PostCustomersCustomerSourcesId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "owner": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account_holder_name": {
                    "description": "The name of the person or business that owns the bank account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "account_holder_type": {
                    "description": "The type of entity that holds the account. This can be either `individual` or `company`.",
                    "enum": ["company", "individual"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_city": {
                    "description": "City/District/Suburb/Town/Village.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_country": {
                    "description": "Billing address country, if provided when creating card.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line1": {
                    "description": "Address line 1 (Street address/PO Box/Company name).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_line2": {
                    "description": "Address line 2 (Apartment/Suite/Unit/Building).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_state": {
                    "description": "State/County/Province/Region.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "address_zip": {
                    "description": "ZIP or postal code.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_month": {
                    "description": "Two digit number representing the card’s expiration month.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "exp_year": {
                    "description": "Four digit number representing the card’s expiration year.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Cardholder name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "owner": {
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "source_address",
                        "type": "object"
                      },
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "owner",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/card"
                    },
                    {
                      "$ref": "#/components/schemas/bank_account"
                    },
                    {
                      "$ref": "#/components/schemas/source"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/sources/{id}/verify": {
      "post": {
        "description": "<p>Verify a specified bank account for a given customer.</p>",
        "operationId": "PostCustomersCustomerSourcesIdVerify",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the source to be verified.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "amounts": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amounts": {
                    "description": "Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.",
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_account"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/subscriptions": {
      "get": {
        "description": "<p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>",
        "operationId": "GetCustomersCustomerSubscriptions",
        "parameters": [
          {
            "description": "The ID of the customer whose subscriptions will be retrieved.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/subscription"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "SubscriptionList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new subscription on an existing customer.</p>",
        "operationId": "PostCustomersCustomerSubscriptions",
        "parameters": [
          {
            "description": "The identifier of the customer to subscribe.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_thresholds": {
                  "explode": true,
                  "style": "deepObject"
                },
                "default_tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "pending_invoice_item_interval": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_percent": {
                  "explode": true,
                  "style": "deepObject"
                },
                "trial_end": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "application_fee_percent": {
                    "description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).",
                    "type": "number"
                  },
                  "backdate_start_date": {
                    "description": "For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "billing_cycle_anchor": {
                    "description": "A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.",
                    "format": "unix-time",
                    "type": "integer",
                    "x-stripeBypassValidation": true
                  },
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "amount_gte": {
                            "type": "integer"
                          },
                          "reset_billing_cycle_anchor": {
                            "type": "boolean"
                          }
                        },
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."
                  },
                  "cancel_at": {
                    "description": "A timestamp at which the subscription should cancel. If set to a date before the current period ends this will cause a proration if `prorate=true`.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "cancel_at_period_end": {
                    "description": "Boolean indicating whether this subscription should cancel at the end of the current period.",
                    "type": "boolean"
                  },
                  "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.",
                    "enum": ["charge_automatically", "send_invoice"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "coupon": {
                    "description": "The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "days_until_due": {
                    "description": "Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.",
                    "type": "integer"
                  },
                  "default_payment_method": {
                    "description": "ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_source": {
                    "description": "ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription."
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "description": "List of subscription items, each with an attached plan.",
                    "items": {
                      "properties": {
                        "billing_thresholds": {
                          "anyOf": [
                            {
                              "properties": {
                                "usage_gte": {
                                  "type": "integer"
                                }
                              },
                              "required": ["usage_gte"],
                              "title": "billing_thresholds_param",
                              "type": "object"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "metadata": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        },
                        "plan": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "tax_rates": {
                          "anyOf": [
                            {
                              "items": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        }
                      },
                      "required": ["plan"],
                      "title": "subscription_item_create_params",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a `Subscription` object. It can be useful for storing additional information about the subscription in a structured format.",
                    "type": "object"
                  },
                  "off_session": {
                    "description": "Indicates if a customer is on or off-session while an invoice payment is attempted.",
                    "type": "boolean"
                  },
                  "payment_behavior": {
                    "description": "Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n\nUse `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.",
                    "enum": [
                      "allow_incomplete",
                      "error_if_incomplete",
                      "pending_if_incomplete"
                    ],
                    "type": "string"
                  },
                  "pending_invoice_item_interval": {
                    "anyOf": [
                      {
                        "properties": {
                          "interval": {
                            "enum": ["day", "month", "week", "year"],
                            "type": "string"
                          },
                          "interval_count": {
                            "type": "integer"
                          }
                        },
                        "required": ["interval"],
                        "title": "pending_invoice_item_interval_params",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."
                  },
                  "prorate": {
                    "description": "Boolean (defaults to `true`) telling us whether to [credit for unused time](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g. when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. If `false`, the anchor period will be free (similar to a trial) and no proration adjustments will be created.",
                    "type": "boolean"
                  },
                  "tax_percent": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`."
                  },
                  "trial_end": {
                    "anyOf": [
                      {
                        "enum": ["now"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    ],
                    "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."
                  },
                  "trial_from_plan": {
                    "description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed.",
                    "type": "boolean"
                  },
                  "trial_period_days": {
                    "description": "Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan.",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
      "delete": {
        "description": "<p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>\n\n<p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href=\"#delete_invoiceitem\">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>\n\n<p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>",
        "operationId": "DeleteCustomersCustomerSubscriptionsSubscriptionExposedId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "invoice_now": {
                    "description": "Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items.",
                    "type": "boolean"
                  },
                  "prorate": {
                    "description": "Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the subscription with the given ID.</p>",
        "operationId": "GetCustomersCustomerSubscriptionsSubscriptionExposedId",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of subscription to retrieve.",
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href=\"#upcoming_invoice\">upcoming invoice</a> endpoint.</p>",
        "operationId": "PostCustomersCustomerSubscriptionsSubscriptionExposedId",
        "parameters": [
          {
            "description": "The identifier of the customer to subscribe.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The identifier of the subscription to update.",
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_thresholds": {
                  "explode": true,
                  "style": "deepObject"
                },
                "cancel_at": {
                  "explode": true,
                  "style": "deepObject"
                },
                "default_tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "pending_invoice_item_interval": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_percent": {
                  "explode": true,
                  "style": "deepObject"
                },
                "trial_end": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "application_fee_percent": {
                    "description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).",
                    "type": "number"
                  },
                  "billing_cycle_anchor": {
                    "description": "Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).",
                    "enum": ["now", "unchanged"],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "amount_gte": {
                            "type": "integer"
                          },
                          "reset_billing_cycle_anchor": {
                            "type": "boolean"
                          }
                        },
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."
                  },
                  "cancel_at": {
                    "anyOf": [
                      {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A timestamp at which the subscription should cancel. If set to a date before the current period ends this will cause a proration if `prorate=true`."
                  },
                  "cancel_at_period_end": {
                    "description": "Boolean indicating whether this subscription should cancel at the end of the current period.",
                    "type": "boolean"
                  },
                  "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.",
                    "enum": ["charge_automatically", "send_invoice"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "coupon": {
                    "description": "The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "days_until_due": {
                    "description": "Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.",
                    "type": "integer"
                  },
                  "default_payment_method": {
                    "description": "ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_source": {
                    "description": "ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates."
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "description": "List of subscription items, each with an attached plan.",
                    "items": {
                      "properties": {
                        "billing_thresholds": {
                          "anyOf": [
                            {
                              "properties": {
                                "usage_gte": {
                                  "type": "integer"
                                }
                              },
                              "required": ["usage_gte"],
                              "title": "billing_thresholds_param",
                              "type": "object"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "clear_usage": {
                          "type": "boolean"
                        },
                        "deleted": {
                          "type": "boolean"
                        },
                        "id": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "metadata": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        },
                        "plan": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "tax_rates": {
                          "anyOf": [
                            {
                              "items": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        }
                      },
                      "title": "subscription_item_update_params",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a subscription object. This can be useful for storing additional information about the subscription in a structured format.",
                    "type": "object"
                  },
                  "off_session": {
                    "description": "Indicates if a customer is on or off-session while an invoice payment is attempted.",
                    "type": "boolean"
                  },
                  "payment_behavior": {
                    "description": "Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n\nUse `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.",
                    "enum": [
                      "allow_incomplete",
                      "error_if_incomplete",
                      "pending_if_incomplete"
                    ],
                    "type": "string"
                  },
                  "pending_invoice_item_interval": {
                    "anyOf": [
                      {
                        "properties": {
                          "interval": {
                            "enum": ["day", "month", "week", "year"],
                            "type": "string"
                          },
                          "interval_count": {
                            "type": "integer"
                          }
                        },
                        "required": ["interval"],
                        "title": "pending_invoice_item_interval_params",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."
                  },
                  "prorate": {
                    "description": "Boolean (defaults to `true`) telling us whether to [credit for unused time](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g. when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. If `false`, the anchor period will be free (similar to a trial) and no proration adjustments will be created.",
                    "type": "boolean"
                  },
                  "proration_date": {
                    "description": "If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "tax_percent": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`."
                  },
                  "trial_end": {
                    "anyOf": [
                      {
                        "enum": ["now"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    ],
                    "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."
                  },
                  "trial_from_plan": {
                    "description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
      "delete": {
        "description": "<p>Removes the currently applied discount on a customer.</p>",
        "operationId": "DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_discount"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "",
        "operationId": "GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/discount"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/tax_ids": {
      "get": {
        "description": "<p>Returns a list of tax IDs for a customer.</p>",
        "operationId": "GetCustomersCustomerTaxIds",
        "parameters": [
          {
            "description": "ID of the customer whose tax IDs will be retrieved.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/tax_id"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "TaxIDsList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new <code>TaxID</code> object for a customer.</p>",
        "operationId": "PostCustomersCustomerTaxIds",
        "parameters": [
          {
            "description": "ID of the customer.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": {
                    "description": "Type of the tax ID, one of `au_abn`, `ch_vat`, `eu_vat`, `in_gst`, `mx_rfc`, `no_vat`, `nz_gst`, or `za_vat`",
                    "enum": [
                      "au_abn",
                      "ch_vat",
                      "eu_vat",
                      "in_gst",
                      "mx_rfc",
                      "no_vat",
                      "nz_gst",
                      "za_vat"
                    ],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "value": {
                    "description": "Value of the tax ID.",
                    "type": "string"
                  }
                },
                "required": ["type", "value"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_id"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/customers/{customer}/tax_ids/{id}": {
      "delete": {
        "description": "<p>Deletes an existing <code>TaxID</code> object.</p>",
        "operationId": "DeleteCustomersCustomerTaxIdsId",
        "parameters": [
          {
            "description": "ID of the customer.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Unique identifier of the `TaxID` object to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_tax_id"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the <code>TaxID</code> object with the given identifier.</p>",
        "operationId": "GetCustomersCustomerTaxIdsId",
        "parameters": [
          {
            "description": "ID of the customer.",
            "in": "path",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Unique identifier of the `TaxID` object to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_id"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/disputes": {
      "get": {
        "description": "<p>Returns a list of your disputes.</p>",
        "operationId": "GetDisputes",
        "parameters": [
          {
            "description": "Only return disputes associated to the charge specified by this charge ID.",
            "in": "query",
            "name": "charge",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.",
            "in": "query",
            "name": "payment_intent",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/dispute"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/disputes",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/disputes/{dispute}": {
      "get": {
        "description": "<p>Retrieves the dispute with the given ID.</p>",
        "operationId": "GetDisputesDispute",
        "parameters": [
          {
            "description": "ID of dispute to retrieve.",
            "in": "path",
            "name": "dispute",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href=\"https://dashboard.stripe.com/disputes\">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>\n\n<p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href=\"/docs/disputes/categories\">guide to dispute types</a>.</p>",
        "operationId": "PostDisputesDispute",
        "parameters": [
          {
            "description": "ID of the dispute to update.",
            "in": "path",
            "name": "dispute",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "evidence": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "evidence": {
                    "description": "Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.",
                    "properties": {
                      "access_activity_log": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "billing_address": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "cancellation_policy": {
                        "type": "string"
                      },
                      "cancellation_policy_disclosure": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "cancellation_rebuttal": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "customer_communication": {
                        "type": "string"
                      },
                      "customer_email_address": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "customer_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "customer_purchase_ip": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "customer_signature": {
                        "type": "string"
                      },
                      "duplicate_charge_documentation": {
                        "type": "string"
                      },
                      "duplicate_charge_explanation": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "duplicate_charge_id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "product_description": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "receipt": {
                        "type": "string"
                      },
                      "refund_policy": {
                        "type": "string"
                      },
                      "refund_policy_disclosure": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "refund_refusal_explanation": {
                        "maxLength": 20000,
                        "type": "string"
                      },
                      "service_date": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "service_documentation": {
                        "type": "string"
                      },
                      "shipping_address": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "shipping_carrier": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "shipping_date": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "shipping_documentation": {
                        "type": "string"
                      },
                      "shipping_tracking_number": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "uncategorized_file": {
                        "type": "string"
                      },
                      "uncategorized_text": {
                        "maxLength": 20000,
                        "type": "string"
                      }
                    },
                    "title": "dispute_evidence_params",
                    "type": "object"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a dispute object. This can be useful for storing additional information about the dispute in a structured format.",
                    "type": "object"
                  },
                  "submit": {
                    "description": "Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/disputes/{dispute}/close": {
      "post": {
        "description": "<p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>\n\n<p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>",
        "operationId": "PostDisputesDisputeClose",
        "parameters": [
          {
            "description": "ID of the dispute to close.",
            "in": "path",
            "name": "dispute",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/ephemeral_keys": {
      "post": {
        "description": "<p>Creates a short-lived API key for a given resource.</p>",
        "operationId": "PostEphemeralKeys",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "customer": {
                    "description": "The ID of the Customer you'd like to modify using the resulting ephemeral key.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "issuing_card": {
                    "description": "The ID of the Issuing Card you'd like to access using the resulting ephemeral key.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ephemeral_key"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/ephemeral_keys/{key}": {
      "delete": {
        "description": "<p>Invalidates a short-lived API key for a given resource.</p>",
        "operationId": "DeleteEphemeralKeysKey",
        "parameters": [
          {
            "description": "The ID of the key you'd like to invalidate.",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ephemeral_key"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/events": {
      "get": {
        "description": "<p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href=\"/docs/api/events/object\">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>",
        "operationId": "GetEvents",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned.",
            "in": "query",
            "name": "delivery_success",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both.",
            "explode": true,
            "in": "query",
            "name": "types",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/event"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/events",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/events/{id}": {
      "get": {
        "description": "<p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>",
        "operationId": "GetEventsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the event to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/exchange_rates": {
      "get": {
        "description": "<p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>",
        "operationId": "GetExchangeRates",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/exchange_rate"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/exchange_rates",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/exchange_rates/{currency}": {
      "get": {
        "description": "<p>Retrieves the exchange rates from the given currency to every supported currency.</p>",
        "operationId": "GetExchangeRatesCurrency",
        "parameters": [
          {
            "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
            "in": "path",
            "name": "currency",
            "required": true,
            "schema": {
              "maxLength": 3,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exchange_rate"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/file_links": {
      "get": {
        "description": "<p>Returns a list of file links.</p>",
        "operationId": "GetFileLinks",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Filter links by their expiration status. By default, all links are returned.",
            "in": "query",
            "name": "expired",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Only return links for the given file.",
            "in": "query",
            "name": "file",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/file_link"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/file_links",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new file link object.</p>",
        "operationId": "PostFileLinks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "expires_at": {
                    "description": "A future timestamp after which the link will no longer be usable.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "file": {
                    "description": "The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  }
                },
                "required": ["file"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_link"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/file_links/{link}": {
      "get": {
        "description": "<p>Retrieves the file link with the given ID.</p>",
        "operationId": "GetFileLinksLink",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the file link to be retrieved.",
            "in": "path",
            "name": "link",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_link"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing file link object. Expired links can no longer be updated.</p>",
        "operationId": "PostFileLinksLink",
        "parameters": [
          {
            "description": "The ID of the file link.",
            "in": "path",
            "name": "link",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expires_at": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "expires_at": {
                    "anyOf": [
                      {
                        "enum": ["now"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately."
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_link"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/files": {
      "get": {
        "description": "<p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p>",
        "operationId": "GetFiles",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The file purpose to filter queries by. If none is provided, files will not be filtered by purpose.",
            "in": "query",
            "name": "purpose",
            "required": false,
            "schema": {
              "enum": [
                "business_icon",
                "business_logo",
                "customer_signature",
                "dispute_evidence",
                "finance_report_run",
                "identity_document",
                "pci_document",
                "sigma_scheduled_query",
                "tax_document_user_upload"
              ],
              "maxLength": 5000,
              "type": "string",
              "x-stripeBypassValidation": true
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/file"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/files",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>\n\n<p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>",
        "operationId": "PostFiles",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "file_link_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "file": {
                    "description": "A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol).",
                    "type": "string"
                  },
                  "file_link_data": {
                    "description": "Optional parameters to automatically create a [file link](#file_links) for the newly created file.",
                    "properties": {
                      "create": {
                        "type": "boolean"
                      },
                      "expires_at": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      }
                    },
                    "required": ["create"],
                    "title": "file_link_creation_params",
                    "type": "object"
                  },
                  "purpose": {
                    "description": "The purpose of the uploaded file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `identity_document`, `pci_document`, or `tax_document_user_upload`.",
                    "enum": [
                      "business_icon",
                      "business_logo",
                      "customer_signature",
                      "dispute_evidence",
                      "identity_document",
                      "pci_document",
                      "tax_document_user_upload"
                    ],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  }
                },
                "required": ["file", "purpose"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        },
        "servers": [
          {
            "url": "https://files.stripe.com/"
          }
        ]
      }
    },
    "/v1/files/{file}": {
      "get": {
        "description": "<p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href=\"/docs/file-upload#download-file-contents\">File Upload Guide</a>.</p>",
        "operationId": "GetFilesFile",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the file to be retrieved.",
            "in": "path",
            "name": "file",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoiceitems": {
      "get": {
        "description": "<p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>",
        "operationId": "GetInvoiceitems",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed.",
            "in": "query",
            "name": "invoice",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied.",
            "in": "query",
            "name": "pending",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/invoiceitem"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/invoiceitems",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates an item to be added to a draft invoice. If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>",
        "operationId": "PostInvoiceitems",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "period": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "The integer amount in **%s** of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice.",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "customer": {
                    "description": "The ID of the customer who will be billed when this invoice item is billed.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "discountable": {
                    "description": "Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "invoice": {
                    "description": "The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an invoice item object. It can be useful for storing additional information about the invoice item in a structured format.",
                    "type": "object"
                  },
                  "period": {
                    "description": "The period associated with this invoice item.",
                    "properties": {
                      "end": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "start": {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    },
                    "required": ["end", "start"],
                    "title": "period",
                    "type": "object"
                  },
                  "quantity": {
                    "description": "Non-negative integer. The quantity of units for the invoice item.",
                    "type": "integer"
                  },
                  "subscription": {
                    "description": "The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "tax_rates": {
                    "description": "The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "unit_amount": {
                    "description": "The integer unit amount in **%s** of the charge to be applied to the upcoming invoice. This `unit_amount` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount` will reduce the `amount_due` on the invoice.",
                    "type": "integer"
                  },
                  "unit_amount_decimal": {
                    "description": "Same as `unit_amount`, but accepts a decimal value with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.",
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "required": ["currency", "customer"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceitem"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoiceitems/{invoiceitem}": {
      "delete": {
        "description": "<p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>",
        "operationId": "DeleteInvoiceitemsInvoiceitem",
        "parameters": [
          {
            "description": "The identifier of the invoice item to be deleted.",
            "in": "path",
            "name": "invoiceitem",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_invoiceitem"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the invoice item with the given ID.</p>",
        "operationId": "GetInvoiceitemsInvoiceitem",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the desired invoice item.",
            "in": "path",
            "name": "invoiceitem",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceitem"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>",
        "operationId": "PostInvoiceitemsInvoiceitem",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceitem",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "period": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "The integer amount in **%s** of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount.",
                    "type": "integer"
                  },
                  "description": {
                    "description": "An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "discountable": {
                    "description": "Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an invoice item object. It can be useful for storing additional information about the invoice item in a structured format.",
                    "type": "object"
                  },
                  "period": {
                    "description": "The period associated with this invoice item.",
                    "properties": {
                      "end": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "start": {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    },
                    "required": ["end", "start"],
                    "title": "period",
                    "type": "object"
                  },
                  "quantity": {
                    "description": "Non-negative integer. The quantity of units for the invoice item.",
                    "type": "integer"
                  },
                  "tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates."
                  },
                  "unit_amount": {
                    "description": "The integer unit amount in **%s** of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount.",
                    "type": "integer"
                  },
                  "unit_amount_decimal": {
                    "description": "Same as `unit_amount`, but accepts a decimal value with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.",
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceitem"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices": {
      "get": {
        "description": "<p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>",
        "operationId": "GetInvoices",
        "parameters": [
          {
            "description": "The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.",
            "in": "query",
            "name": "collection_method",
            "required": false,
            "schema": {
              "enum": ["charge_automatically", "send_invoice"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return invoices for the customer specified by this customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "due_date",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": ["draft", "open", "paid", "uncollectible", "void"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return invoices for the subscription specified by this subscription ID.",
            "in": "query",
            "name": "subscription",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/invoice"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/invoices",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations.</p>",
        "operationId": "PostInvoices",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "custom_fields": {
                  "explode": true,
                  "style": "deepObject"
                },
                "default_tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "application_fee_amount": {
                    "description": "A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices).",
                    "type": "integer"
                  },
                  "auto_advance": {
                    "description": "Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.",
                    "type": "boolean"
                  },
                  "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.",
                    "enum": ["charge_automatically", "send_invoice"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "custom_fields": {
                    "anyOf": [
                      {
                        "items": {
                          "properties": {
                            "name": {
                              "maxLength": 30,
                              "type": "string"
                            },
                            "value": {
                              "maxLength": 30,
                              "type": "string"
                            }
                          },
                          "required": ["name", "value"],
                          "title": "custom_field_params",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A list of up to 4 custom fields to be displayed on the invoice."
                  },
                  "customer": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "days_until_due": {
                    "description": "The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`.",
                    "type": "integer"
                  },
                  "default_payment_method": {
                    "description": "ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_source": {
                    "description": "ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_tax_rates": {
                    "description": "The tax rates that will apply to any line item that does not have `tax_rates` set.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "description": {
                    "maxLength": 1500,
                    "type": "string"
                  },
                  "due_date": {
                    "description": "The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "footer": {
                    "description": "Footer to be displayed on the invoice.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "statement_descriptor": {
                    "description": "Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "subscription": {
                    "description": "The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will only include pending invoice items for that subscription and pending invoice items not associated with any subscription. The subscription's billing cycle and regular subscription events won't be affected.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "tax_percent": {
                    "description": "The percent tax rate applied to the invoice, represented as a decimal number. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`.",
                    "type": "number"
                  }
                },
                "required": ["customer"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/upcoming": {
      "get": {
        "description": "<p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.</p>\n\n<p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>\n\n<p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>",
        "operationId": "GetInvoicesUpcoming",
        "parameters": [
          {
            "description": "The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.",
            "in": "query",
            "name": "coupon",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The identifier of the customer whose upcoming invoice you'd like to retrieve.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "List of invoice items to add or update in the upcoming invoice preview.",
            "explode": true,
            "in": "query",
            "name": "invoice_items",
            "required": false,
            "schema": {
              "items": {
                "properties": {
                  "amount": {
                    "type": "integer"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "description": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "discountable": {
                    "type": "boolean"
                  },
                  "invoiceitem": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "period": {
                    "properties": {
                      "end": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "start": {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    },
                    "required": ["end", "start"],
                    "title": "period",
                    "type": "object"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  },
                  "unit_amount": {
                    "type": "integer"
                  },
                  "unit_amount_decimal": {
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "title": "invoice_item_preview_params",
                "type": "object"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.",
            "in": "query",
            "name": "schedule",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.",
            "in": "query",
            "name": "subscription",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.",
            "explode": true,
            "in": "query",
            "name": "subscription_billing_cycle_anchor",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": ["now", "unchanged"],
                  "maxLength": 5000,
                  "type": "string"
                },
                {
                  "format": "unix-time",
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period if `prorate=true`",
            "explode": true,
            "in": "query",
            "name": "subscription_cancel_at",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "format": "unix-time",
                  "type": "integer"
                },
                {
                  "enum": [""],
                  "type": "string"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Boolean indicating whether this subscription should cancel at the end of the current period.",
            "in": "query",
            "name": "subscription_cancel_at_period_end",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "This simulates the subscription being canceled or expired immediately.",
            "in": "query",
            "name": "subscription_cancel_now",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.",
            "explode": true,
            "in": "query",
            "name": "subscription_default_tax_rates",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "items": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "enum": [""],
                  "type": "string"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "List of subscription items, each with an attached plan.",
            "explode": true,
            "in": "query",
            "name": "subscription_items",
            "required": false,
            "schema": {
              "items": {
                "properties": {
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "usage_gte": {
                            "type": "integer"
                          }
                        },
                        "required": ["usage_gte"],
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  },
                  "clear_usage": {
                    "type": "boolean"
                  },
                  "deleted": {
                    "type": "boolean"
                  },
                  "id": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "plan": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  }
                },
                "title": "subscription_item_update_params",
                "type": "object"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required.",
            "in": "query",
            "name": "subscription_prorate",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false.",
            "in": "query",
            "name": "subscription_proration_date",
            "required": false,
            "schema": {
              "format": "unix-time",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Date a subscription is intended to start (can be future or past)",
            "in": "query",
            "name": "subscription_start_date",
            "required": false,
            "schema": {
              "format": "unix-time",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`.",
            "in": "query",
            "name": "subscription_tax_percent",
            "required": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "description": "If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.",
            "explode": true,
            "in": "query",
            "name": "subscription_trial_end",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": ["now"],
                  "maxLength": 5000,
                  "type": "string"
                },
                {
                  "format": "unix-time",
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed.",
            "in": "query",
            "name": "subscription_trial_from_plan",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/upcoming/lines": {
      "get": {
        "description": "<p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>",
        "operationId": "GetInvoicesUpcomingLines",
        "parameters": [
          {
            "description": "The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.",
            "in": "query",
            "name": "coupon",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The identifier of the customer whose upcoming invoice you'd like to retrieve.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "List of invoice items to add or update in the upcoming invoice preview.",
            "explode": true,
            "in": "query",
            "name": "invoice_items",
            "required": false,
            "schema": {
              "items": {
                "properties": {
                  "amount": {
                    "type": "integer"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "description": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "discountable": {
                    "type": "boolean"
                  },
                  "invoiceitem": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "period": {
                    "properties": {
                      "end": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "start": {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    },
                    "required": ["end", "start"],
                    "title": "period",
                    "type": "object"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  },
                  "unit_amount": {
                    "type": "integer"
                  },
                  "unit_amount_decimal": {
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "title": "invoice_item_preview_params",
                "type": "object"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.",
            "in": "query",
            "name": "schedule",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.",
            "in": "query",
            "name": "subscription",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.",
            "explode": true,
            "in": "query",
            "name": "subscription_billing_cycle_anchor",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": ["now", "unchanged"],
                  "maxLength": 5000,
                  "type": "string"
                },
                {
                  "format": "unix-time",
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period if `prorate=true`",
            "explode": true,
            "in": "query",
            "name": "subscription_cancel_at",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "format": "unix-time",
                  "type": "integer"
                },
                {
                  "enum": [""],
                  "type": "string"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Boolean indicating whether this subscription should cancel at the end of the current period.",
            "in": "query",
            "name": "subscription_cancel_at_period_end",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "This simulates the subscription being canceled or expired immediately.",
            "in": "query",
            "name": "subscription_cancel_now",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set.",
            "explode": true,
            "in": "query",
            "name": "subscription_default_tax_rates",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "items": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "enum": [""],
                  "type": "string"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "List of subscription items, each with an attached plan.",
            "explode": true,
            "in": "query",
            "name": "subscription_items",
            "required": false,
            "schema": {
              "items": {
                "properties": {
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "usage_gte": {
                            "type": "integer"
                          }
                        },
                        "required": ["usage_gte"],
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  },
                  "clear_usage": {
                    "type": "boolean"
                  },
                  "deleted": {
                    "type": "boolean"
                  },
                  "id": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "plan": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  }
                },
                "title": "subscription_item_update_params",
                "type": "object"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required.",
            "in": "query",
            "name": "subscription_prorate",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false.",
            "in": "query",
            "name": "subscription_proration_date",
            "required": false,
            "schema": {
              "format": "unix-time",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Date a subscription is intended to start (can be future or past)",
            "in": "query",
            "name": "subscription_start_date",
            "required": false,
            "schema": {
              "format": "unix-time",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`.",
            "in": "query",
            "name": "subscription_tax_percent",
            "required": false,
            "schema": {
              "type": "number"
            },
            "style": "form"
          },
          {
            "description": "If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.",
            "explode": true,
            "in": "query",
            "name": "subscription_trial_end",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": ["now"],
                  "maxLength": 5000,
                  "type": "string"
                },
                {
                  "format": "unix-time",
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed.",
            "in": "query",
            "name": "subscription_trial_from_plan",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/line_item"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "InvoiceLinesList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/{invoice}": {
      "delete": {
        "description": "<p>Permanently deletes a draft invoice. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized, it must be <a href=\"#void_invoice\">voided</a>.</p>",
        "operationId": "DeleteInvoicesInvoice",
        "parameters": [
          {
            "description": "The identifier of the invoice to be deleted.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the invoice with the given ID.</p>",
        "operationId": "GetInvoicesInvoice",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the desired invoice.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Draft invoices are fully editable. Once an invoice is <a href=\"/docs/billing/invoices/workflow#finalized\">finalized</a>,\nmonetary values, as well as <code>collection_method</code>, become uneditable.</p>\n\n<p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,\nsending reminders for, or <a href=\"/docs/billing/invoices/reconciliation\">automatically reconciling</a> invoices, pass\n<code>auto_advance=false</code>.</p>",
        "operationId": "PostInvoicesInvoice",
        "parameters": [
          {
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "custom_fields": {
                  "explode": true,
                  "style": "deepObject"
                },
                "default_tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_percent": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "application_fee_amount": {
                    "description": "A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices).",
                    "type": "integer"
                  },
                  "auto_advance": {
                    "description": "Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice.",
                    "type": "boolean"
                  },
                  "collection_method": {
                    "description": "Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.",
                    "enum": ["charge_automatically", "send_invoice"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "custom_fields": {
                    "anyOf": [
                      {
                        "items": {
                          "properties": {
                            "name": {
                              "maxLength": 30,
                              "type": "string"
                            },
                            "value": {
                              "maxLength": 30,
                              "type": "string"
                            }
                          },
                          "required": ["name", "value"],
                          "title": "custom_field_params",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields."
                  },
                  "days_until_due": {
                    "description": "The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.",
                    "type": "integer"
                  },
                  "default_payment_method": {
                    "description": "ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_source": {
                    "description": "ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates."
                  },
                  "description": {
                    "maxLength": 1500,
                    "type": "string"
                  },
                  "due_date": {
                    "description": "The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "footer": {
                    "description": "Footer to be displayed on the invoice.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "statement_descriptor": {
                    "description": "Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "tax_percent": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The percent tax rate applied to the invoice, represented as a non-negative decimal number (with at most four decimal places) between 0 and 100. To unset a previously-set value, pass an empty string. This field can be updated only on `draft` invoices. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/{invoice}/finalize": {
      "post": {
        "description": "<p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>",
        "operationId": "PostInvoicesInvoiceFinalize",
        "parameters": [
          {
            "description": "The invoice to be finalized, it must have `status=draft`.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "auto_advance": {
                    "description": "Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/{invoice}/lines": {
      "get": {
        "description": "<p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>",
        "operationId": "GetInvoicesInvoiceLines",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the invoice containing the lines to be retrieved.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/line_item"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "InvoiceLinesList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/{invoice}/mark_uncollectible": {
      "post": {
        "description": "<p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>",
        "operationId": "PostInvoicesInvoiceMarkUncollectible",
        "parameters": [
          {
            "description": "The identifier of the invoice to be marked as uncollectible. The invoice must be `open`.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/{invoice}/pay": {
      "post": {
        "description": "<p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>",
        "operationId": "PostInvoicesInvoicePay",
        "parameters": [
          {
            "description": "ID of invoice to pay.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "forgive": {
                    "description": "In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due. \n\nPassing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference.",
                    "type": "boolean"
                  },
                  "off_session": {
                    "description": "Indicates if a customer is on or off-session while an invoice payment is attempted.",
                    "type": "boolean"
                  },
                  "paid_out_of_band": {
                    "description": "Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made.",
                    "type": "boolean"
                  },
                  "payment_method": {
                    "description": "A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "source": {
                    "description": "A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/{invoice}/send": {
      "post": {
        "description": "<p>Stripe will automatically send invoices to customers according to your <a href=\"https://dashboard.stripe.com/account/billing/automatic\">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>\n\n<p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>",
        "operationId": "PostInvoicesInvoiceSend",
        "parameters": [
          {
            "description": "The invoice you would like to send. The billing mode for this invoice must be `send_invoice`.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/invoices/{invoice}/void": {
      "post": {
        "description": "<p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href=\"#delete_invoice\">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>",
        "operationId": "PostInvoicesInvoiceVoid",
        "parameters": [
          {
            "description": "ID of invoice to void. It must be finalized.",
            "in": "path",
            "name": "invoice",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuer_fraud_records": {
      "get": {
        "deprecated": true,
        "description": "<p>Returns a list of issuer fraud records.</p>",
        "operationId": "GetIssuerFraudRecords",
        "parameters": [
          {
            "description": "Only return issuer fraud records for the charge specified by this charge ID.",
            "in": "query",
            "name": "charge",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/issuer_fraud_record"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/issuer_fraud_records",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "RadarIssuerFraudRecordList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuer_fraud_records/{issuer_fraud_record}": {
      "get": {
        "deprecated": true,
        "description": "<p>Retrieves the details of an issuer fraud record that has previously been created. </p>\n\n<p>Please refer to the <a href=\"#issuer_fraud_record_object\">issuer fraud record</a> object reference for more details.</p>",
        "operationId": "GetIssuerFraudRecordsIssuerFraudRecord",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the issuer fraud record to be retrieved.",
            "in": "path",
            "name": "issuer_fraud_record",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuer_fraud_record"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/authorizations": {
      "get": {
        "description": "<p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetIssuingAuthorizations",
        "parameters": [
          {
            "description": "Only return issuing transactions that belong to the given card.",
            "in": "query",
            "name": "card",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return authorizations belonging to the given cardholder.",
            "in": "query",
            "name": "cardholder",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return authorizations that were created during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": ["closed", "pending", "reversed"],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/issuing.authorization"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/issuing/authorizations",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/authorizations/{authorization}": {
      "get": {
        "description": "<p>Retrieves an Issuing <code>Authorization</code> object.</p>",
        "operationId": "GetIssuingAuthorizationsAuthorization",
        "parameters": [
          {
            "description": "The ID of the authorization to retrieve.",
            "in": "path",
            "name": "authorization",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.authorization"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostIssuingAuthorizationsAuthorization",
        "parameters": [
          {
            "description": "The identifier of the authorization to update.",
            "in": "path",
            "name": "authorization",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.authorization"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/authorizations/{authorization}/approve": {
      "post": {
        "description": "<p>Approves a pending Issuing <code>Authorization</code> object.</p>",
        "operationId": "PostIssuingAuthorizationsAuthorizationApprove",
        "parameters": [
          {
            "description": "The identifier of the authorization to approve.",
            "in": "path",
            "name": "authorization",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "held_amount": {
                    "description": "If the authorization's `is_held_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request).",
                    "type": "integer"
                  },
                  "metadata": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.authorization"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/authorizations/{authorization}/decline": {
      "post": {
        "description": "<p>Declines a pending Issuing <code>Authorization</code> object.</p>",
        "operationId": "PostIssuingAuthorizationsAuthorizationDecline",
        "parameters": [
          {
            "description": "The identifier of the issuing authorization to decline.",
            "in": "path",
            "name": "authorization",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.authorization"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/cardholders": {
      "get": {
        "description": "<p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetIssuingCardholders",
        "parameters": [
          {
            "description": "Only return cardholders that were created during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return cardholders that have the given email address.",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return the default cardholder.",
            "in": "query",
            "name": "is_default",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return cardholders that have the given phone number.",
            "in": "query",
            "name": "phone_number",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": ["active", "blocked", "inactive"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return cardholders that have the given type. One of `individual` or `business_entity`.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": ["business_entity", "individual"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/issuing.cardholder"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/issuing/cardholders",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>",
        "operationId": "PostIssuingCardholders",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "authorization_controls": {
                  "explode": true,
                  "style": "deepObject"
                },
                "billing": {
                  "explode": true,
                  "style": "deepObject"
                },
                "company": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "individual": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "authorization_controls": {
                    "description": "Spending rules that give you control over how your cardholders can make charges. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.",
                    "properties": {
                      "allowed_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "blocked_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "spending_limits": {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer"
                            },
                            "categories": {
                              "items": {
                                "enum": [
                                  "ac_refrigeration_repair",
                                  "accounting_bookkeeping_services",
                                  "advertising_services",
                                  "agricultural_cooperative",
                                  "airlines_air_carriers",
                                  "airports_flying_fields",
                                  "ambulance_services",
                                  "amusement_parks_carnivals",
                                  "antique_reproductions",
                                  "antique_shops",
                                  "aquariums",
                                  "architectural_surveying_services",
                                  "art_dealers_and_galleries",
                                  "artists_supply_and_craft_shops",
                                  "auto_and_home_supply_stores",
                                  "auto_body_repair_shops",
                                  "auto_paint_shops",
                                  "auto_service_shops",
                                  "automated_cash_disburse",
                                  "automated_fuel_dispensers",
                                  "automobile_associations",
                                  "automotive_parts_and_accessories_stores",
                                  "automotive_tire_stores",
                                  "bail_and_bond_payments",
                                  "bakeries",
                                  "bands_orchestras",
                                  "barber_and_beauty_shops",
                                  "betting_casino_gambling",
                                  "bicycle_shops",
                                  "billiard_pool_establishments",
                                  "boat_dealers",
                                  "boat_rentals_and_leases",
                                  "book_stores",
                                  "books_periodicals_and_newspapers",
                                  "bowling_alleys",
                                  "bus_lines",
                                  "business_secretarial_schools",
                                  "buying_shopping_services",
                                  "cable_satellite_and_other_pay_television_and_radio",
                                  "camera_and_photographic_supply_stores",
                                  "candy_nut_and_confectionery_stores",
                                  "car_and_truck_dealers_new_used",
                                  "car_and_truck_dealers_used_only",
                                  "car_rental_agencies",
                                  "car_washes",
                                  "carpentry_services",
                                  "carpet_upholstery_cleaning",
                                  "caterers",
                                  "charitable_and_social_service_organizations_fundraising",
                                  "chemicals_and_allied_products",
                                  "child_care_services",
                                  "childrens_and_infants_wear_stores",
                                  "chiropodists_podiatrists",
                                  "chiropractors",
                                  "cigar_stores_and_stands",
                                  "civic_social_fraternal_associations",
                                  "cleaning_and_maintenance",
                                  "clothing_rental",
                                  "colleges_universities",
                                  "commercial_equipment",
                                  "commercial_footwear",
                                  "commercial_photography_art_and_graphics",
                                  "commuter_transport_and_ferries",
                                  "computer_network_services",
                                  "computer_programming",
                                  "computer_repair",
                                  "computer_software_stores",
                                  "computers_peripherals_and_software",
                                  "concrete_work_services",
                                  "construction_materials",
                                  "consulting_public_relations",
                                  "correspondence_schools",
                                  "cosmetic_stores",
                                  "counseling_services",
                                  "country_clubs",
                                  "courier_services",
                                  "court_costs",
                                  "credit_reporting_agencies",
                                  "cruise_lines",
                                  "dairy_products_stores",
                                  "dance_hall_studios_schools",
                                  "dating_escort_services",
                                  "dentists_orthodontists",
                                  "department_stores",
                                  "detective_agencies",
                                  "digital_goods_applications",
                                  "digital_goods_games",
                                  "digital_goods_large_volume",
                                  "digital_goods_media",
                                  "direct_marketing_catalog_merchant",
                                  "direct_marketing_combination_catalog_and_retail_merchant",
                                  "direct_marketing_inbound_telemarketing",
                                  "direct_marketing_insurance_services",
                                  "direct_marketing_other",
                                  "direct_marketing_outbound_telemarketing",
                                  "direct_marketing_subscription",
                                  "direct_marketing_travel",
                                  "discount_stores",
                                  "doctors",
                                  "door_to_door_sales",
                                  "drapery_window_covering_and_upholstery_stores",
                                  "drinking_places",
                                  "drug_stores_and_pharmacies",
                                  "drugs_drug_proprietaries_and_druggist_sundries",
                                  "dry_cleaners",
                                  "durable_goods",
                                  "duty_free_stores",
                                  "eating_places_restaurants",
                                  "educational_services",
                                  "electric_razor_stores",
                                  "electrical_parts_and_equipment",
                                  "electrical_services",
                                  "electronics_repair_shops",
                                  "electronics_stores",
                                  "elementary_secondary_schools",
                                  "employment_temp_agencies",
                                  "equipment_rental",
                                  "exterminating_services",
                                  "family_clothing_stores",
                                  "fast_food_restaurants",
                                  "financial_institutions",
                                  "fines_government_administrative_entities",
                                  "fireplace_fireplace_screens_and_accessories_stores",
                                  "floor_covering_stores",
                                  "florists",
                                  "florists_supplies_nursery_stock_and_flowers",
                                  "freezer_and_locker_meat_provisioners",
                                  "fuel_dealers_non_automotive",
                                  "funeral_services_crematories",
                                  "furniture_home_furnishings_and_equipment_stores_except_appliances",
                                  "furniture_repair_refinishing",
                                  "furriers_and_fur_shops",
                                  "general_services",
                                  "gift_card_novelty_and_souvenir_shops",
                                  "glass_paint_and_wallpaper_stores",
                                  "glassware_crystal_stores",
                                  "golf_courses_public",
                                  "government_services",
                                  "grocery_stores_supermarkets",
                                  "hardware_equipment_and_supplies",
                                  "hardware_stores",
                                  "health_and_beauty_spas",
                                  "hearing_aids_sales_and_supplies",
                                  "heating_plumbing_a_c",
                                  "hobby_toy_and_game_shops",
                                  "home_supply_warehouse_stores",
                                  "hospitals",
                                  "hotels_motels_and_resorts",
                                  "household_appliance_stores",
                                  "industrial_supplies",
                                  "information_retrieval_services",
                                  "insurance_default",
                                  "insurance_underwriting_premiums",
                                  "intra_company_purchases",
                                  "jewelry_stores_watches_clocks_and_silverware_stores",
                                  "landscaping_services",
                                  "laundries",
                                  "laundry_cleaning_services",
                                  "legal_services_attorneys",
                                  "luggage_and_leather_goods_stores",
                                  "lumber_building_materials_stores",
                                  "manual_cash_disburse",
                                  "marinas_service_and_supplies",
                                  "masonry_stonework_and_plaster",
                                  "massage_parlors",
                                  "medical_and_dental_labs",
                                  "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                                  "medical_services",
                                  "membership_organizations",
                                  "mens_and_boys_clothing_and_accessories_stores",
                                  "mens_womens_clothing_stores",
                                  "metal_service_centers",
                                  "miscellaneous",
                                  "miscellaneous_apparel_and_accessory_shops",
                                  "miscellaneous_auto_dealers",
                                  "miscellaneous_business_services",
                                  "miscellaneous_food_stores",
                                  "miscellaneous_general_merchandise",
                                  "miscellaneous_general_services",
                                  "miscellaneous_home_furnishing_specialty_stores",
                                  "miscellaneous_publishing_and_printing",
                                  "miscellaneous_recreation_services",
                                  "miscellaneous_repair_shops",
                                  "miscellaneous_specialty_retail",
                                  "mobile_home_dealers",
                                  "motion_picture_theaters",
                                  "motor_freight_carriers_and_trucking",
                                  "motor_homes_dealers",
                                  "motor_vehicle_supplies_and_new_parts",
                                  "motorcycle_shops_and_dealers",
                                  "motorcycle_shops_dealers",
                                  "music_stores_musical_instruments_pianos_and_sheet_music",
                                  "news_dealers_and_newsstands",
                                  "non_fi_money_orders",
                                  "non_fi_stored_value_card_purchase_load",
                                  "nondurable_goods",
                                  "nurseries_lawn_and_garden_supply_stores",
                                  "nursing_personal_care",
                                  "office_and_commercial_furniture",
                                  "opticians_eyeglasses",
                                  "optometrists_ophthalmologist",
                                  "orthopedic_goods_prosthetic_devices",
                                  "osteopaths",
                                  "package_stores_beer_wine_and_liquor",
                                  "paints_varnishes_and_supplies",
                                  "parking_lots_garages",
                                  "passenger_railways",
                                  "pawn_shops",
                                  "pet_shops_pet_food_and_supplies",
                                  "petroleum_and_petroleum_products",
                                  "photo_developing",
                                  "photographic_photocopy_microfilm_equipment_and_supplies",
                                  "photographic_studios",
                                  "picture_video_production",
                                  "piece_goods_notions_and_other_dry_goods",
                                  "plumbing_heating_equipment_and_supplies",
                                  "political_organizations",
                                  "postal_services_government_only",
                                  "precious_stones_and_metals_watches_and_jewelry",
                                  "professional_services",
                                  "public_warehousing_and_storage",
                                  "quick_copy_repro_and_blueprint",
                                  "railroads",
                                  "real_estate_agents_and_managers_rentals",
                                  "record_stores",
                                  "recreational_vehicle_rentals",
                                  "religious_goods_stores",
                                  "religious_organizations",
                                  "roofing_siding_sheet_metal",
                                  "secretarial_support_services",
                                  "security_brokers_dealers",
                                  "service_stations",
                                  "sewing_needlework_fabric_and_piece_goods_stores",
                                  "shoe_repair_hat_cleaning",
                                  "shoe_stores",
                                  "small_appliance_repair",
                                  "snowmobile_dealers",
                                  "special_trade_services",
                                  "specialty_cleaning",
                                  "sporting_goods_stores",
                                  "sporting_recreation_camps",
                                  "sports_and_riding_apparel_stores",
                                  "sports_clubs_fields",
                                  "stamp_and_coin_stores",
                                  "stationary_office_supplies_printing_and_writing_paper",
                                  "stationery_stores_office_and_school_supply_stores",
                                  "swimming_pools_sales",
                                  "t_ui_travel_germany",
                                  "tailors_alterations",
                                  "tax_payments_government_agencies",
                                  "tax_preparation_services",
                                  "taxicabs_limousines",
                                  "telecommunication_equipment_and_telephone_sales",
                                  "telecommunication_services",
                                  "telegraph_services",
                                  "tent_and_awning_shops",
                                  "testing_laboratories",
                                  "theatrical_ticket_agencies",
                                  "timeshares",
                                  "tire_retreading_and_repair",
                                  "tolls_bridge_fees",
                                  "tourist_attractions_and_exhibits",
                                  "towing_services",
                                  "trailer_parks_campgrounds",
                                  "transportation_services",
                                  "travel_agencies_tour_operators",
                                  "truck_stop_iteration",
                                  "truck_utility_trailer_rentals",
                                  "typesetting_plate_making_and_related_services",
                                  "typewriter_stores",
                                  "u_s_federal_government_agencies_or_departments",
                                  "uniforms_commercial_clothing",
                                  "used_merchandise_and_secondhand_stores",
                                  "utilities",
                                  "variety_stores",
                                  "veterinary_services",
                                  "video_amusement_game_supplies",
                                  "video_game_arcades",
                                  "video_tape_rental_stores",
                                  "vocational_trade_schools",
                                  "watch_jewelry_repair",
                                  "welding_repair",
                                  "wholesale_clubs",
                                  "wig_and_toupee_stores",
                                  "wires_money_orders",
                                  "womens_accessory_and_specialty_shops",
                                  "womens_ready_to_wear_stores",
                                  "wrecking_and_salvage_yards"
                                ],
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "interval": {
                              "enum": [
                                "all_time",
                                "daily",
                                "monthly",
                                "per_authorization",
                                "weekly",
                                "yearly"
                              ],
                              "type": "string"
                            }
                          },
                          "required": ["amount", "interval"],
                          "title": "spending_limits_param",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "spending_limits_currency": {
                        "type": "string"
                      }
                    },
                    "title": "authorization_controls_param_v2",
                    "type": "object"
                  },
                  "billing": {
                    "description": "The cardholder's billing address.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["city", "country", "line1", "postal_code"],
                        "title": "required_address",
                        "type": "object"
                      }
                    },
                    "required": ["address"],
                    "title": "billing_specs",
                    "type": "object"
                  },
                  "company": {
                    "description": "Additional information about a `business_entity` cardholder.",
                    "properties": {
                      "tax_id": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "company_param",
                    "type": "object"
                  },
                  "email": {
                    "description": "The cardholder's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "individual": {
                    "description": "Additional information about an `individual` cardholder.",
                    "properties": {
                      "dob": {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      "first_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_param",
                            "type": "object"
                          }
                        },
                        "title": "person_verification_param",
                        "type": "object"
                      }
                    },
                    "required": ["first_name", "last_name"],
                    "title": "individual_param",
                    "type": "object"
                  },
                  "is_default": {
                    "description": "Specifies whether to set this as the default cardholder.",
                    "type": "boolean"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "The cardholder's name. This will be printed on cards issued to them.",
                    "type": "string"
                  },
                  "phone_number": {
                    "description": "The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.",
                    "enum": ["active", "inactive"],
                    "type": "string"
                  },
                  "type": {
                    "description": "One of `individual` or `business_entity`.",
                    "enum": ["business_entity", "individual"],
                    "type": "string"
                  }
                },
                "required": ["billing", "name", "type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.cardholder"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/cardholders/{cardholder}": {
      "get": {
        "description": "<p>Retrieves an Issuing <code>Cardholder</code> object.</p>",
        "operationId": "GetIssuingCardholdersCardholder",
        "parameters": [
          {
            "description": "The identifier of the cardholder to be retrieved.",
            "in": "path",
            "name": "cardholder",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.cardholder"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostIssuingCardholdersCardholder",
        "parameters": [
          {
            "description": "The ID of the cardholder to update.",
            "in": "path",
            "name": "cardholder",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "authorization_controls": {
                  "explode": true,
                  "style": "deepObject"
                },
                "billing": {
                  "explode": true,
                  "style": "deepObject"
                },
                "company": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "individual": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "authorization_controls": {
                    "description": "Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.",
                    "properties": {
                      "allowed_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "blocked_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "spending_limits": {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer"
                            },
                            "categories": {
                              "items": {
                                "enum": [
                                  "ac_refrigeration_repair",
                                  "accounting_bookkeeping_services",
                                  "advertising_services",
                                  "agricultural_cooperative",
                                  "airlines_air_carriers",
                                  "airports_flying_fields",
                                  "ambulance_services",
                                  "amusement_parks_carnivals",
                                  "antique_reproductions",
                                  "antique_shops",
                                  "aquariums",
                                  "architectural_surveying_services",
                                  "art_dealers_and_galleries",
                                  "artists_supply_and_craft_shops",
                                  "auto_and_home_supply_stores",
                                  "auto_body_repair_shops",
                                  "auto_paint_shops",
                                  "auto_service_shops",
                                  "automated_cash_disburse",
                                  "automated_fuel_dispensers",
                                  "automobile_associations",
                                  "automotive_parts_and_accessories_stores",
                                  "automotive_tire_stores",
                                  "bail_and_bond_payments",
                                  "bakeries",
                                  "bands_orchestras",
                                  "barber_and_beauty_shops",
                                  "betting_casino_gambling",
                                  "bicycle_shops",
                                  "billiard_pool_establishments",
                                  "boat_dealers",
                                  "boat_rentals_and_leases",
                                  "book_stores",
                                  "books_periodicals_and_newspapers",
                                  "bowling_alleys",
                                  "bus_lines",
                                  "business_secretarial_schools",
                                  "buying_shopping_services",
                                  "cable_satellite_and_other_pay_television_and_radio",
                                  "camera_and_photographic_supply_stores",
                                  "candy_nut_and_confectionery_stores",
                                  "car_and_truck_dealers_new_used",
                                  "car_and_truck_dealers_used_only",
                                  "car_rental_agencies",
                                  "car_washes",
                                  "carpentry_services",
                                  "carpet_upholstery_cleaning",
                                  "caterers",
                                  "charitable_and_social_service_organizations_fundraising",
                                  "chemicals_and_allied_products",
                                  "child_care_services",
                                  "childrens_and_infants_wear_stores",
                                  "chiropodists_podiatrists",
                                  "chiropractors",
                                  "cigar_stores_and_stands",
                                  "civic_social_fraternal_associations",
                                  "cleaning_and_maintenance",
                                  "clothing_rental",
                                  "colleges_universities",
                                  "commercial_equipment",
                                  "commercial_footwear",
                                  "commercial_photography_art_and_graphics",
                                  "commuter_transport_and_ferries",
                                  "computer_network_services",
                                  "computer_programming",
                                  "computer_repair",
                                  "computer_software_stores",
                                  "computers_peripherals_and_software",
                                  "concrete_work_services",
                                  "construction_materials",
                                  "consulting_public_relations",
                                  "correspondence_schools",
                                  "cosmetic_stores",
                                  "counseling_services",
                                  "country_clubs",
                                  "courier_services",
                                  "court_costs",
                                  "credit_reporting_agencies",
                                  "cruise_lines",
                                  "dairy_products_stores",
                                  "dance_hall_studios_schools",
                                  "dating_escort_services",
                                  "dentists_orthodontists",
                                  "department_stores",
                                  "detective_agencies",
                                  "digital_goods_applications",
                                  "digital_goods_games",
                                  "digital_goods_large_volume",
                                  "digital_goods_media",
                                  "direct_marketing_catalog_merchant",
                                  "direct_marketing_combination_catalog_and_retail_merchant",
                                  "direct_marketing_inbound_telemarketing",
                                  "direct_marketing_insurance_services",
                                  "direct_marketing_other",
                                  "direct_marketing_outbound_telemarketing",
                                  "direct_marketing_subscription",
                                  "direct_marketing_travel",
                                  "discount_stores",
                                  "doctors",
                                  "door_to_door_sales",
                                  "drapery_window_covering_and_upholstery_stores",
                                  "drinking_places",
                                  "drug_stores_and_pharmacies",
                                  "drugs_drug_proprietaries_and_druggist_sundries",
                                  "dry_cleaners",
                                  "durable_goods",
                                  "duty_free_stores",
                                  "eating_places_restaurants",
                                  "educational_services",
                                  "electric_razor_stores",
                                  "electrical_parts_and_equipment",
                                  "electrical_services",
                                  "electronics_repair_shops",
                                  "electronics_stores",
                                  "elementary_secondary_schools",
                                  "employment_temp_agencies",
                                  "equipment_rental",
                                  "exterminating_services",
                                  "family_clothing_stores",
                                  "fast_food_restaurants",
                                  "financial_institutions",
                                  "fines_government_administrative_entities",
                                  "fireplace_fireplace_screens_and_accessories_stores",
                                  "floor_covering_stores",
                                  "florists",
                                  "florists_supplies_nursery_stock_and_flowers",
                                  "freezer_and_locker_meat_provisioners",
                                  "fuel_dealers_non_automotive",
                                  "funeral_services_crematories",
                                  "furniture_home_furnishings_and_equipment_stores_except_appliances",
                                  "furniture_repair_refinishing",
                                  "furriers_and_fur_shops",
                                  "general_services",
                                  "gift_card_novelty_and_souvenir_shops",
                                  "glass_paint_and_wallpaper_stores",
                                  "glassware_crystal_stores",
                                  "golf_courses_public",
                                  "government_services",
                                  "grocery_stores_supermarkets",
                                  "hardware_equipment_and_supplies",
                                  "hardware_stores",
                                  "health_and_beauty_spas",
                                  "hearing_aids_sales_and_supplies",
                                  "heating_plumbing_a_c",
                                  "hobby_toy_and_game_shops",
                                  "home_supply_warehouse_stores",
                                  "hospitals",
                                  "hotels_motels_and_resorts",
                                  "household_appliance_stores",
                                  "industrial_supplies",
                                  "information_retrieval_services",
                                  "insurance_default",
                                  "insurance_underwriting_premiums",
                                  "intra_company_purchases",
                                  "jewelry_stores_watches_clocks_and_silverware_stores",
                                  "landscaping_services",
                                  "laundries",
                                  "laundry_cleaning_services",
                                  "legal_services_attorneys",
                                  "luggage_and_leather_goods_stores",
                                  "lumber_building_materials_stores",
                                  "manual_cash_disburse",
                                  "marinas_service_and_supplies",
                                  "masonry_stonework_and_plaster",
                                  "massage_parlors",
                                  "medical_and_dental_labs",
                                  "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                                  "medical_services",
                                  "membership_organizations",
                                  "mens_and_boys_clothing_and_accessories_stores",
                                  "mens_womens_clothing_stores",
                                  "metal_service_centers",
                                  "miscellaneous",
                                  "miscellaneous_apparel_and_accessory_shops",
                                  "miscellaneous_auto_dealers",
                                  "miscellaneous_business_services",
                                  "miscellaneous_food_stores",
                                  "miscellaneous_general_merchandise",
                                  "miscellaneous_general_services",
                                  "miscellaneous_home_furnishing_specialty_stores",
                                  "miscellaneous_publishing_and_printing",
                                  "miscellaneous_recreation_services",
                                  "miscellaneous_repair_shops",
                                  "miscellaneous_specialty_retail",
                                  "mobile_home_dealers",
                                  "motion_picture_theaters",
                                  "motor_freight_carriers_and_trucking",
                                  "motor_homes_dealers",
                                  "motor_vehicle_supplies_and_new_parts",
                                  "motorcycle_shops_and_dealers",
                                  "motorcycle_shops_dealers",
                                  "music_stores_musical_instruments_pianos_and_sheet_music",
                                  "news_dealers_and_newsstands",
                                  "non_fi_money_orders",
                                  "non_fi_stored_value_card_purchase_load",
                                  "nondurable_goods",
                                  "nurseries_lawn_and_garden_supply_stores",
                                  "nursing_personal_care",
                                  "office_and_commercial_furniture",
                                  "opticians_eyeglasses",
                                  "optometrists_ophthalmologist",
                                  "orthopedic_goods_prosthetic_devices",
                                  "osteopaths",
                                  "package_stores_beer_wine_and_liquor",
                                  "paints_varnishes_and_supplies",
                                  "parking_lots_garages",
                                  "passenger_railways",
                                  "pawn_shops",
                                  "pet_shops_pet_food_and_supplies",
                                  "petroleum_and_petroleum_products",
                                  "photo_developing",
                                  "photographic_photocopy_microfilm_equipment_and_supplies",
                                  "photographic_studios",
                                  "picture_video_production",
                                  "piece_goods_notions_and_other_dry_goods",
                                  "plumbing_heating_equipment_and_supplies",
                                  "political_organizations",
                                  "postal_services_government_only",
                                  "precious_stones_and_metals_watches_and_jewelry",
                                  "professional_services",
                                  "public_warehousing_and_storage",
                                  "quick_copy_repro_and_blueprint",
                                  "railroads",
                                  "real_estate_agents_and_managers_rentals",
                                  "record_stores",
                                  "recreational_vehicle_rentals",
                                  "religious_goods_stores",
                                  "religious_organizations",
                                  "roofing_siding_sheet_metal",
                                  "secretarial_support_services",
                                  "security_brokers_dealers",
                                  "service_stations",
                                  "sewing_needlework_fabric_and_piece_goods_stores",
                                  "shoe_repair_hat_cleaning",
                                  "shoe_stores",
                                  "small_appliance_repair",
                                  "snowmobile_dealers",
                                  "special_trade_services",
                                  "specialty_cleaning",
                                  "sporting_goods_stores",
                                  "sporting_recreation_camps",
                                  "sports_and_riding_apparel_stores",
                                  "sports_clubs_fields",
                                  "stamp_and_coin_stores",
                                  "stationary_office_supplies_printing_and_writing_paper",
                                  "stationery_stores_office_and_school_supply_stores",
                                  "swimming_pools_sales",
                                  "t_ui_travel_germany",
                                  "tailors_alterations",
                                  "tax_payments_government_agencies",
                                  "tax_preparation_services",
                                  "taxicabs_limousines",
                                  "telecommunication_equipment_and_telephone_sales",
                                  "telecommunication_services",
                                  "telegraph_services",
                                  "tent_and_awning_shops",
                                  "testing_laboratories",
                                  "theatrical_ticket_agencies",
                                  "timeshares",
                                  "tire_retreading_and_repair",
                                  "tolls_bridge_fees",
                                  "tourist_attractions_and_exhibits",
                                  "towing_services",
                                  "trailer_parks_campgrounds",
                                  "transportation_services",
                                  "travel_agencies_tour_operators",
                                  "truck_stop_iteration",
                                  "truck_utility_trailer_rentals",
                                  "typesetting_plate_making_and_related_services",
                                  "typewriter_stores",
                                  "u_s_federal_government_agencies_or_departments",
                                  "uniforms_commercial_clothing",
                                  "used_merchandise_and_secondhand_stores",
                                  "utilities",
                                  "variety_stores",
                                  "veterinary_services",
                                  "video_amusement_game_supplies",
                                  "video_game_arcades",
                                  "video_tape_rental_stores",
                                  "vocational_trade_schools",
                                  "watch_jewelry_repair",
                                  "welding_repair",
                                  "wholesale_clubs",
                                  "wig_and_toupee_stores",
                                  "wires_money_orders",
                                  "womens_accessory_and_specialty_shops",
                                  "womens_ready_to_wear_stores",
                                  "wrecking_and_salvage_yards"
                                ],
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "interval": {
                              "enum": [
                                "all_time",
                                "daily",
                                "monthly",
                                "per_authorization",
                                "weekly",
                                "yearly"
                              ],
                              "type": "string"
                            }
                          },
                          "required": ["amount", "interval"],
                          "title": "spending_limits_param",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "spending_limits_currency": {
                        "type": "string"
                      }
                    },
                    "title": "authorization_controls_param_v2",
                    "type": "object"
                  },
                  "billing": {
                    "description": "The cardholder's billing address.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["city", "country", "line1", "postal_code"],
                        "title": "required_address",
                        "type": "object"
                      }
                    },
                    "required": ["address"],
                    "title": "billing_specs",
                    "type": "object"
                  },
                  "company": {
                    "description": "Additional information about a `business_entity` cardholder.",
                    "properties": {
                      "tax_id": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "company_param",
                    "type": "object"
                  },
                  "email": {
                    "description": "The cardholder's email address.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "individual": {
                    "description": "Additional information about an `individual` cardholder.",
                    "properties": {
                      "dob": {
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": ["day", "month", "year"],
                        "title": "date_of_birth_specs",
                        "type": "object"
                      },
                      "first_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_param",
                            "type": "object"
                          }
                        },
                        "title": "person_verification_param",
                        "type": "object"
                      }
                    },
                    "required": ["first_name", "last_name"],
                    "title": "individual_param",
                    "type": "object"
                  },
                  "is_default": {
                    "description": "Specifies whether to set this as the default cardholder.",
                    "type": "boolean"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "phone_number": {
                    "description": "The cardholder's phone number.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Specifies whether to permit authorizations on this cardholder's cards.",
                    "enum": ["active", "inactive"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.cardholder"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/cards": {
      "get": {
        "description": "<p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetIssuingCards",
        "parameters": [
          {
            "description": "Only return cards belonging to the Cardholder with the provided ID.",
            "in": "query",
            "name": "cardholder",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return cards that were issued during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return cards that have the given expiration month.",
            "in": "query",
            "name": "exp_month",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return cards that have the given expiration year.",
            "in": "query",
            "name": "exp_year",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return cards that have the given last four digits.",
            "in": "query",
            "name": "last4",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return cards that have the given name.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return cards whose full card number matches that of this card source ID.",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return cards that have the given status. One of `active`, `inactive`, `canceled`, `lost`, or `stolen`.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": ["active", "canceled", "inactive", "lost", "stolen"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return cards that have the given type. One of `virtual` or `physical`.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": ["physical", "virtual"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/issuing.card"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/issuing/cards",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates an Issuing <code>Card</code> object.</p>",
        "operationId": "PostIssuingCards",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "authorization_controls": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                },
                "type": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "authorization_controls": {
                    "description": "Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.",
                    "properties": {
                      "allowed_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "blocked_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "max_approvals": {
                        "type": "integer"
                      },
                      "spending_limits": {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer"
                            },
                            "categories": {
                              "items": {
                                "enum": [
                                  "ac_refrigeration_repair",
                                  "accounting_bookkeeping_services",
                                  "advertising_services",
                                  "agricultural_cooperative",
                                  "airlines_air_carriers",
                                  "airports_flying_fields",
                                  "ambulance_services",
                                  "amusement_parks_carnivals",
                                  "antique_reproductions",
                                  "antique_shops",
                                  "aquariums",
                                  "architectural_surveying_services",
                                  "art_dealers_and_galleries",
                                  "artists_supply_and_craft_shops",
                                  "auto_and_home_supply_stores",
                                  "auto_body_repair_shops",
                                  "auto_paint_shops",
                                  "auto_service_shops",
                                  "automated_cash_disburse",
                                  "automated_fuel_dispensers",
                                  "automobile_associations",
                                  "automotive_parts_and_accessories_stores",
                                  "automotive_tire_stores",
                                  "bail_and_bond_payments",
                                  "bakeries",
                                  "bands_orchestras",
                                  "barber_and_beauty_shops",
                                  "betting_casino_gambling",
                                  "bicycle_shops",
                                  "billiard_pool_establishments",
                                  "boat_dealers",
                                  "boat_rentals_and_leases",
                                  "book_stores",
                                  "books_periodicals_and_newspapers",
                                  "bowling_alleys",
                                  "bus_lines",
                                  "business_secretarial_schools",
                                  "buying_shopping_services",
                                  "cable_satellite_and_other_pay_television_and_radio",
                                  "camera_and_photographic_supply_stores",
                                  "candy_nut_and_confectionery_stores",
                                  "car_and_truck_dealers_new_used",
                                  "car_and_truck_dealers_used_only",
                                  "car_rental_agencies",
                                  "car_washes",
                                  "carpentry_services",
                                  "carpet_upholstery_cleaning",
                                  "caterers",
                                  "charitable_and_social_service_organizations_fundraising",
                                  "chemicals_and_allied_products",
                                  "child_care_services",
                                  "childrens_and_infants_wear_stores",
                                  "chiropodists_podiatrists",
                                  "chiropractors",
                                  "cigar_stores_and_stands",
                                  "civic_social_fraternal_associations",
                                  "cleaning_and_maintenance",
                                  "clothing_rental",
                                  "colleges_universities",
                                  "commercial_equipment",
                                  "commercial_footwear",
                                  "commercial_photography_art_and_graphics",
                                  "commuter_transport_and_ferries",
                                  "computer_network_services",
                                  "computer_programming",
                                  "computer_repair",
                                  "computer_software_stores",
                                  "computers_peripherals_and_software",
                                  "concrete_work_services",
                                  "construction_materials",
                                  "consulting_public_relations",
                                  "correspondence_schools",
                                  "cosmetic_stores",
                                  "counseling_services",
                                  "country_clubs",
                                  "courier_services",
                                  "court_costs",
                                  "credit_reporting_agencies",
                                  "cruise_lines",
                                  "dairy_products_stores",
                                  "dance_hall_studios_schools",
                                  "dating_escort_services",
                                  "dentists_orthodontists",
                                  "department_stores",
                                  "detective_agencies",
                                  "digital_goods_applications",
                                  "digital_goods_games",
                                  "digital_goods_large_volume",
                                  "digital_goods_media",
                                  "direct_marketing_catalog_merchant",
                                  "direct_marketing_combination_catalog_and_retail_merchant",
                                  "direct_marketing_inbound_telemarketing",
                                  "direct_marketing_insurance_services",
                                  "direct_marketing_other",
                                  "direct_marketing_outbound_telemarketing",
                                  "direct_marketing_subscription",
                                  "direct_marketing_travel",
                                  "discount_stores",
                                  "doctors",
                                  "door_to_door_sales",
                                  "drapery_window_covering_and_upholstery_stores",
                                  "drinking_places",
                                  "drug_stores_and_pharmacies",
                                  "drugs_drug_proprietaries_and_druggist_sundries",
                                  "dry_cleaners",
                                  "durable_goods",
                                  "duty_free_stores",
                                  "eating_places_restaurants",
                                  "educational_services",
                                  "electric_razor_stores",
                                  "electrical_parts_and_equipment",
                                  "electrical_services",
                                  "electronics_repair_shops",
                                  "electronics_stores",
                                  "elementary_secondary_schools",
                                  "employment_temp_agencies",
                                  "equipment_rental",
                                  "exterminating_services",
                                  "family_clothing_stores",
                                  "fast_food_restaurants",
                                  "financial_institutions",
                                  "fines_government_administrative_entities",
                                  "fireplace_fireplace_screens_and_accessories_stores",
                                  "floor_covering_stores",
                                  "florists",
                                  "florists_supplies_nursery_stock_and_flowers",
                                  "freezer_and_locker_meat_provisioners",
                                  "fuel_dealers_non_automotive",
                                  "funeral_services_crematories",
                                  "furniture_home_furnishings_and_equipment_stores_except_appliances",
                                  "furniture_repair_refinishing",
                                  "furriers_and_fur_shops",
                                  "general_services",
                                  "gift_card_novelty_and_souvenir_shops",
                                  "glass_paint_and_wallpaper_stores",
                                  "glassware_crystal_stores",
                                  "golf_courses_public",
                                  "government_services",
                                  "grocery_stores_supermarkets",
                                  "hardware_equipment_and_supplies",
                                  "hardware_stores",
                                  "health_and_beauty_spas",
                                  "hearing_aids_sales_and_supplies",
                                  "heating_plumbing_a_c",
                                  "hobby_toy_and_game_shops",
                                  "home_supply_warehouse_stores",
                                  "hospitals",
                                  "hotels_motels_and_resorts",
                                  "household_appliance_stores",
                                  "industrial_supplies",
                                  "information_retrieval_services",
                                  "insurance_default",
                                  "insurance_underwriting_premiums",
                                  "intra_company_purchases",
                                  "jewelry_stores_watches_clocks_and_silverware_stores",
                                  "landscaping_services",
                                  "laundries",
                                  "laundry_cleaning_services",
                                  "legal_services_attorneys",
                                  "luggage_and_leather_goods_stores",
                                  "lumber_building_materials_stores",
                                  "manual_cash_disburse",
                                  "marinas_service_and_supplies",
                                  "masonry_stonework_and_plaster",
                                  "massage_parlors",
                                  "medical_and_dental_labs",
                                  "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                                  "medical_services",
                                  "membership_organizations",
                                  "mens_and_boys_clothing_and_accessories_stores",
                                  "mens_womens_clothing_stores",
                                  "metal_service_centers",
                                  "miscellaneous",
                                  "miscellaneous_apparel_and_accessory_shops",
                                  "miscellaneous_auto_dealers",
                                  "miscellaneous_business_services",
                                  "miscellaneous_food_stores",
                                  "miscellaneous_general_merchandise",
                                  "miscellaneous_general_services",
                                  "miscellaneous_home_furnishing_specialty_stores",
                                  "miscellaneous_publishing_and_printing",
                                  "miscellaneous_recreation_services",
                                  "miscellaneous_repair_shops",
                                  "miscellaneous_specialty_retail",
                                  "mobile_home_dealers",
                                  "motion_picture_theaters",
                                  "motor_freight_carriers_and_trucking",
                                  "motor_homes_dealers",
                                  "motor_vehicle_supplies_and_new_parts",
                                  "motorcycle_shops_and_dealers",
                                  "motorcycle_shops_dealers",
                                  "music_stores_musical_instruments_pianos_and_sheet_music",
                                  "news_dealers_and_newsstands",
                                  "non_fi_money_orders",
                                  "non_fi_stored_value_card_purchase_load",
                                  "nondurable_goods",
                                  "nurseries_lawn_and_garden_supply_stores",
                                  "nursing_personal_care",
                                  "office_and_commercial_furniture",
                                  "opticians_eyeglasses",
                                  "optometrists_ophthalmologist",
                                  "orthopedic_goods_prosthetic_devices",
                                  "osteopaths",
                                  "package_stores_beer_wine_and_liquor",
                                  "paints_varnishes_and_supplies",
                                  "parking_lots_garages",
                                  "passenger_railways",
                                  "pawn_shops",
                                  "pet_shops_pet_food_and_supplies",
                                  "petroleum_and_petroleum_products",
                                  "photo_developing",
                                  "photographic_photocopy_microfilm_equipment_and_supplies",
                                  "photographic_studios",
                                  "picture_video_production",
                                  "piece_goods_notions_and_other_dry_goods",
                                  "plumbing_heating_equipment_and_supplies",
                                  "political_organizations",
                                  "postal_services_government_only",
                                  "precious_stones_and_metals_watches_and_jewelry",
                                  "professional_services",
                                  "public_warehousing_and_storage",
                                  "quick_copy_repro_and_blueprint",
                                  "railroads",
                                  "real_estate_agents_and_managers_rentals",
                                  "record_stores",
                                  "recreational_vehicle_rentals",
                                  "religious_goods_stores",
                                  "religious_organizations",
                                  "roofing_siding_sheet_metal",
                                  "secretarial_support_services",
                                  "security_brokers_dealers",
                                  "service_stations",
                                  "sewing_needlework_fabric_and_piece_goods_stores",
                                  "shoe_repair_hat_cleaning",
                                  "shoe_stores",
                                  "small_appliance_repair",
                                  "snowmobile_dealers",
                                  "special_trade_services",
                                  "specialty_cleaning",
                                  "sporting_goods_stores",
                                  "sporting_recreation_camps",
                                  "sports_and_riding_apparel_stores",
                                  "sports_clubs_fields",
                                  "stamp_and_coin_stores",
                                  "stationary_office_supplies_printing_and_writing_paper",
                                  "stationery_stores_office_and_school_supply_stores",
                                  "swimming_pools_sales",
                                  "t_ui_travel_germany",
                                  "tailors_alterations",
                                  "tax_payments_government_agencies",
                                  "tax_preparation_services",
                                  "taxicabs_limousines",
                                  "telecommunication_equipment_and_telephone_sales",
                                  "telecommunication_services",
                                  "telegraph_services",
                                  "tent_and_awning_shops",
                                  "testing_laboratories",
                                  "theatrical_ticket_agencies",
                                  "timeshares",
                                  "tire_retreading_and_repair",
                                  "tolls_bridge_fees",
                                  "tourist_attractions_and_exhibits",
                                  "towing_services",
                                  "trailer_parks_campgrounds",
                                  "transportation_services",
                                  "travel_agencies_tour_operators",
                                  "truck_stop_iteration",
                                  "truck_utility_trailer_rentals",
                                  "typesetting_plate_making_and_related_services",
                                  "typewriter_stores",
                                  "u_s_federal_government_agencies_or_departments",
                                  "uniforms_commercial_clothing",
                                  "used_merchandise_and_secondhand_stores",
                                  "utilities",
                                  "variety_stores",
                                  "veterinary_services",
                                  "video_amusement_game_supplies",
                                  "video_game_arcades",
                                  "video_tape_rental_stores",
                                  "vocational_trade_schools",
                                  "watch_jewelry_repair",
                                  "welding_repair",
                                  "wholesale_clubs",
                                  "wig_and_toupee_stores",
                                  "wires_money_orders",
                                  "womens_accessory_and_specialty_shops",
                                  "womens_ready_to_wear_stores",
                                  "wrecking_and_salvage_yards"
                                ],
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "interval": {
                              "enum": [
                                "all_time",
                                "daily",
                                "monthly",
                                "per_authorization",
                                "weekly",
                                "yearly"
                              ],
                              "type": "string"
                            }
                          },
                          "required": ["amount", "interval"],
                          "title": "spending_limits_param",
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "title": "authorization_controls_param",
                    "type": "object"
                  },
                  "cardholder": {
                    "description": "The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "currency": {
                    "description": "The currency for the card. This currently must be `usd`.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "replacement_for": {
                    "description": "The card this is meant to be a replacement for (if any).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "replacement_reason": {
                    "description": "If `replacement_for` is specified, this should indicate why that card is being replaced.",
                    "enum": ["damage", "expiration", "loss", "theft"],
                    "type": "string"
                  },
                  "shipping": {
                    "description": "The address where the card will be shipped.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["city", "country", "line1", "postal_code"],
                        "title": "required_address",
                        "type": "object"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "type": {
                        "anyOf": [
                          {
                            "enum": ["bulk", "individual"],
                            "type": "string"
                          },
                          {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "required": ["address", "name"],
                    "title": "shipping_specs",
                    "type": "object"
                  },
                  "status": {
                    "description": "Whether authorizations can be approved on this card. Defaults to `inactive`.",
                    "enum": ["active", "inactive"],
                    "type": "string"
                  },
                  "type": {
                    "anyOf": [
                      {
                        "enum": ["physical", "virtual"],
                        "type": "string"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "The type of card to issue. Possible values are `physical` or `virtual`."
                  }
                },
                "required": ["currency", "type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.card"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/cards/{card}": {
      "get": {
        "description": "<p>Retrieves an Issuing <code>Card</code> object.</p>",
        "operationId": "GetIssuingCardsCard",
        "parameters": [
          {
            "description": "The identifier of the card to be retrieved.",
            "in": "path",
            "name": "card",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.card"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostIssuingCardsCard",
        "parameters": [
          {
            "description": "The identifier of the issued card to update.",
            "in": "path",
            "name": "card",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "authorization_controls": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "authorization_controls": {
                    "description": "Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.",
                    "properties": {
                      "allowed_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "blocked_categories": {
                        "items": {
                          "enum": [
                            "ac_refrigeration_repair",
                            "accounting_bookkeeping_services",
                            "advertising_services",
                            "agricultural_cooperative",
                            "airlines_air_carriers",
                            "airports_flying_fields",
                            "ambulance_services",
                            "amusement_parks_carnivals",
                            "antique_reproductions",
                            "antique_shops",
                            "aquariums",
                            "architectural_surveying_services",
                            "art_dealers_and_galleries",
                            "artists_supply_and_craft_shops",
                            "auto_and_home_supply_stores",
                            "auto_body_repair_shops",
                            "auto_paint_shops",
                            "auto_service_shops",
                            "automated_cash_disburse",
                            "automated_fuel_dispensers",
                            "automobile_associations",
                            "automotive_parts_and_accessories_stores",
                            "automotive_tire_stores",
                            "bail_and_bond_payments",
                            "bakeries",
                            "bands_orchestras",
                            "barber_and_beauty_shops",
                            "betting_casino_gambling",
                            "bicycle_shops",
                            "billiard_pool_establishments",
                            "boat_dealers",
                            "boat_rentals_and_leases",
                            "book_stores",
                            "books_periodicals_and_newspapers",
                            "bowling_alleys",
                            "bus_lines",
                            "business_secretarial_schools",
                            "buying_shopping_services",
                            "cable_satellite_and_other_pay_television_and_radio",
                            "camera_and_photographic_supply_stores",
                            "candy_nut_and_confectionery_stores",
                            "car_and_truck_dealers_new_used",
                            "car_and_truck_dealers_used_only",
                            "car_rental_agencies",
                            "car_washes",
                            "carpentry_services",
                            "carpet_upholstery_cleaning",
                            "caterers",
                            "charitable_and_social_service_organizations_fundraising",
                            "chemicals_and_allied_products",
                            "child_care_services",
                            "childrens_and_infants_wear_stores",
                            "chiropodists_podiatrists",
                            "chiropractors",
                            "cigar_stores_and_stands",
                            "civic_social_fraternal_associations",
                            "cleaning_and_maintenance",
                            "clothing_rental",
                            "colleges_universities",
                            "commercial_equipment",
                            "commercial_footwear",
                            "commercial_photography_art_and_graphics",
                            "commuter_transport_and_ferries",
                            "computer_network_services",
                            "computer_programming",
                            "computer_repair",
                            "computer_software_stores",
                            "computers_peripherals_and_software",
                            "concrete_work_services",
                            "construction_materials",
                            "consulting_public_relations",
                            "correspondence_schools",
                            "cosmetic_stores",
                            "counseling_services",
                            "country_clubs",
                            "courier_services",
                            "court_costs",
                            "credit_reporting_agencies",
                            "cruise_lines",
                            "dairy_products_stores",
                            "dance_hall_studios_schools",
                            "dating_escort_services",
                            "dentists_orthodontists",
                            "department_stores",
                            "detective_agencies",
                            "digital_goods_applications",
                            "digital_goods_games",
                            "digital_goods_large_volume",
                            "digital_goods_media",
                            "direct_marketing_catalog_merchant",
                            "direct_marketing_combination_catalog_and_retail_merchant",
                            "direct_marketing_inbound_telemarketing",
                            "direct_marketing_insurance_services",
                            "direct_marketing_other",
                            "direct_marketing_outbound_telemarketing",
                            "direct_marketing_subscription",
                            "direct_marketing_travel",
                            "discount_stores",
                            "doctors",
                            "door_to_door_sales",
                            "drapery_window_covering_and_upholstery_stores",
                            "drinking_places",
                            "drug_stores_and_pharmacies",
                            "drugs_drug_proprietaries_and_druggist_sundries",
                            "dry_cleaners",
                            "durable_goods",
                            "duty_free_stores",
                            "eating_places_restaurants",
                            "educational_services",
                            "electric_razor_stores",
                            "electrical_parts_and_equipment",
                            "electrical_services",
                            "electronics_repair_shops",
                            "electronics_stores",
                            "elementary_secondary_schools",
                            "employment_temp_agencies",
                            "equipment_rental",
                            "exterminating_services",
                            "family_clothing_stores",
                            "fast_food_restaurants",
                            "financial_institutions",
                            "fines_government_administrative_entities",
                            "fireplace_fireplace_screens_and_accessories_stores",
                            "floor_covering_stores",
                            "florists",
                            "florists_supplies_nursery_stock_and_flowers",
                            "freezer_and_locker_meat_provisioners",
                            "fuel_dealers_non_automotive",
                            "funeral_services_crematories",
                            "furniture_home_furnishings_and_equipment_stores_except_appliances",
                            "furniture_repair_refinishing",
                            "furriers_and_fur_shops",
                            "general_services",
                            "gift_card_novelty_and_souvenir_shops",
                            "glass_paint_and_wallpaper_stores",
                            "glassware_crystal_stores",
                            "golf_courses_public",
                            "government_services",
                            "grocery_stores_supermarkets",
                            "hardware_equipment_and_supplies",
                            "hardware_stores",
                            "health_and_beauty_spas",
                            "hearing_aids_sales_and_supplies",
                            "heating_plumbing_a_c",
                            "hobby_toy_and_game_shops",
                            "home_supply_warehouse_stores",
                            "hospitals",
                            "hotels_motels_and_resorts",
                            "household_appliance_stores",
                            "industrial_supplies",
                            "information_retrieval_services",
                            "insurance_default",
                            "insurance_underwriting_premiums",
                            "intra_company_purchases",
                            "jewelry_stores_watches_clocks_and_silverware_stores",
                            "landscaping_services",
                            "laundries",
                            "laundry_cleaning_services",
                            "legal_services_attorneys",
                            "luggage_and_leather_goods_stores",
                            "lumber_building_materials_stores",
                            "manual_cash_disburse",
                            "marinas_service_and_supplies",
                            "masonry_stonework_and_plaster",
                            "massage_parlors",
                            "medical_and_dental_labs",
                            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                            "medical_services",
                            "membership_organizations",
                            "mens_and_boys_clothing_and_accessories_stores",
                            "mens_womens_clothing_stores",
                            "metal_service_centers",
                            "miscellaneous",
                            "miscellaneous_apparel_and_accessory_shops",
                            "miscellaneous_auto_dealers",
                            "miscellaneous_business_services",
                            "miscellaneous_food_stores",
                            "miscellaneous_general_merchandise",
                            "miscellaneous_general_services",
                            "miscellaneous_home_furnishing_specialty_stores",
                            "miscellaneous_publishing_and_printing",
                            "miscellaneous_recreation_services",
                            "miscellaneous_repair_shops",
                            "miscellaneous_specialty_retail",
                            "mobile_home_dealers",
                            "motion_picture_theaters",
                            "motor_freight_carriers_and_trucking",
                            "motor_homes_dealers",
                            "motor_vehicle_supplies_and_new_parts",
                            "motorcycle_shops_and_dealers",
                            "motorcycle_shops_dealers",
                            "music_stores_musical_instruments_pianos_and_sheet_music",
                            "news_dealers_and_newsstands",
                            "non_fi_money_orders",
                            "non_fi_stored_value_card_purchase_load",
                            "nondurable_goods",
                            "nurseries_lawn_and_garden_supply_stores",
                            "nursing_personal_care",
                            "office_and_commercial_furniture",
                            "opticians_eyeglasses",
                            "optometrists_ophthalmologist",
                            "orthopedic_goods_prosthetic_devices",
                            "osteopaths",
                            "package_stores_beer_wine_and_liquor",
                            "paints_varnishes_and_supplies",
                            "parking_lots_garages",
                            "passenger_railways",
                            "pawn_shops",
                            "pet_shops_pet_food_and_supplies",
                            "petroleum_and_petroleum_products",
                            "photo_developing",
                            "photographic_photocopy_microfilm_equipment_and_supplies",
                            "photographic_studios",
                            "picture_video_production",
                            "piece_goods_notions_and_other_dry_goods",
                            "plumbing_heating_equipment_and_supplies",
                            "political_organizations",
                            "postal_services_government_only",
                            "precious_stones_and_metals_watches_and_jewelry",
                            "professional_services",
                            "public_warehousing_and_storage",
                            "quick_copy_repro_and_blueprint",
                            "railroads",
                            "real_estate_agents_and_managers_rentals",
                            "record_stores",
                            "recreational_vehicle_rentals",
                            "religious_goods_stores",
                            "religious_organizations",
                            "roofing_siding_sheet_metal",
                            "secretarial_support_services",
                            "security_brokers_dealers",
                            "service_stations",
                            "sewing_needlework_fabric_and_piece_goods_stores",
                            "shoe_repair_hat_cleaning",
                            "shoe_stores",
                            "small_appliance_repair",
                            "snowmobile_dealers",
                            "special_trade_services",
                            "specialty_cleaning",
                            "sporting_goods_stores",
                            "sporting_recreation_camps",
                            "sports_and_riding_apparel_stores",
                            "sports_clubs_fields",
                            "stamp_and_coin_stores",
                            "stationary_office_supplies_printing_and_writing_paper",
                            "stationery_stores_office_and_school_supply_stores",
                            "swimming_pools_sales",
                            "t_ui_travel_germany",
                            "tailors_alterations",
                            "tax_payments_government_agencies",
                            "tax_preparation_services",
                            "taxicabs_limousines",
                            "telecommunication_equipment_and_telephone_sales",
                            "telecommunication_services",
                            "telegraph_services",
                            "tent_and_awning_shops",
                            "testing_laboratories",
                            "theatrical_ticket_agencies",
                            "timeshares",
                            "tire_retreading_and_repair",
                            "tolls_bridge_fees",
                            "tourist_attractions_and_exhibits",
                            "towing_services",
                            "trailer_parks_campgrounds",
                            "transportation_services",
                            "travel_agencies_tour_operators",
                            "truck_stop_iteration",
                            "truck_utility_trailer_rentals",
                            "typesetting_plate_making_and_related_services",
                            "typewriter_stores",
                            "u_s_federal_government_agencies_or_departments",
                            "uniforms_commercial_clothing",
                            "used_merchandise_and_secondhand_stores",
                            "utilities",
                            "variety_stores",
                            "veterinary_services",
                            "video_amusement_game_supplies",
                            "video_game_arcades",
                            "video_tape_rental_stores",
                            "vocational_trade_schools",
                            "watch_jewelry_repair",
                            "welding_repair",
                            "wholesale_clubs",
                            "wig_and_toupee_stores",
                            "wires_money_orders",
                            "womens_accessory_and_specialty_shops",
                            "womens_ready_to_wear_stores",
                            "wrecking_and_salvage_yards"
                          ],
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "max_approvals": {
                        "type": "integer"
                      },
                      "spending_limits": {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer"
                            },
                            "categories": {
                              "items": {
                                "enum": [
                                  "ac_refrigeration_repair",
                                  "accounting_bookkeeping_services",
                                  "advertising_services",
                                  "agricultural_cooperative",
                                  "airlines_air_carriers",
                                  "airports_flying_fields",
                                  "ambulance_services",
                                  "amusement_parks_carnivals",
                                  "antique_reproductions",
                                  "antique_shops",
                                  "aquariums",
                                  "architectural_surveying_services",
                                  "art_dealers_and_galleries",
                                  "artists_supply_and_craft_shops",
                                  "auto_and_home_supply_stores",
                                  "auto_body_repair_shops",
                                  "auto_paint_shops",
                                  "auto_service_shops",
                                  "automated_cash_disburse",
                                  "automated_fuel_dispensers",
                                  "automobile_associations",
                                  "automotive_parts_and_accessories_stores",
                                  "automotive_tire_stores",
                                  "bail_and_bond_payments",
                                  "bakeries",
                                  "bands_orchestras",
                                  "barber_and_beauty_shops",
                                  "betting_casino_gambling",
                                  "bicycle_shops",
                                  "billiard_pool_establishments",
                                  "boat_dealers",
                                  "boat_rentals_and_leases",
                                  "book_stores",
                                  "books_periodicals_and_newspapers",
                                  "bowling_alleys",
                                  "bus_lines",
                                  "business_secretarial_schools",
                                  "buying_shopping_services",
                                  "cable_satellite_and_other_pay_television_and_radio",
                                  "camera_and_photographic_supply_stores",
                                  "candy_nut_and_confectionery_stores",
                                  "car_and_truck_dealers_new_used",
                                  "car_and_truck_dealers_used_only",
                                  "car_rental_agencies",
                                  "car_washes",
                                  "carpentry_services",
                                  "carpet_upholstery_cleaning",
                                  "caterers",
                                  "charitable_and_social_service_organizations_fundraising",
                                  "chemicals_and_allied_products",
                                  "child_care_services",
                                  "childrens_and_infants_wear_stores",
                                  "chiropodists_podiatrists",
                                  "chiropractors",
                                  "cigar_stores_and_stands",
                                  "civic_social_fraternal_associations",
                                  "cleaning_and_maintenance",
                                  "clothing_rental",
                                  "colleges_universities",
                                  "commercial_equipment",
                                  "commercial_footwear",
                                  "commercial_photography_art_and_graphics",
                                  "commuter_transport_and_ferries",
                                  "computer_network_services",
                                  "computer_programming",
                                  "computer_repair",
                                  "computer_software_stores",
                                  "computers_peripherals_and_software",
                                  "concrete_work_services",
                                  "construction_materials",
                                  "consulting_public_relations",
                                  "correspondence_schools",
                                  "cosmetic_stores",
                                  "counseling_services",
                                  "country_clubs",
                                  "courier_services",
                                  "court_costs",
                                  "credit_reporting_agencies",
                                  "cruise_lines",
                                  "dairy_products_stores",
                                  "dance_hall_studios_schools",
                                  "dating_escort_services",
                                  "dentists_orthodontists",
                                  "department_stores",
                                  "detective_agencies",
                                  "digital_goods_applications",
                                  "digital_goods_games",
                                  "digital_goods_large_volume",
                                  "digital_goods_media",
                                  "direct_marketing_catalog_merchant",
                                  "direct_marketing_combination_catalog_and_retail_merchant",
                                  "direct_marketing_inbound_telemarketing",
                                  "direct_marketing_insurance_services",
                                  "direct_marketing_other",
                                  "direct_marketing_outbound_telemarketing",
                                  "direct_marketing_subscription",
                                  "direct_marketing_travel",
                                  "discount_stores",
                                  "doctors",
                                  "door_to_door_sales",
                                  "drapery_window_covering_and_upholstery_stores",
                                  "drinking_places",
                                  "drug_stores_and_pharmacies",
                                  "drugs_drug_proprietaries_and_druggist_sundries",
                                  "dry_cleaners",
                                  "durable_goods",
                                  "duty_free_stores",
                                  "eating_places_restaurants",
                                  "educational_services",
                                  "electric_razor_stores",
                                  "electrical_parts_and_equipment",
                                  "electrical_services",
                                  "electronics_repair_shops",
                                  "electronics_stores",
                                  "elementary_secondary_schools",
                                  "employment_temp_agencies",
                                  "equipment_rental",
                                  "exterminating_services",
                                  "family_clothing_stores",
                                  "fast_food_restaurants",
                                  "financial_institutions",
                                  "fines_government_administrative_entities",
                                  "fireplace_fireplace_screens_and_accessories_stores",
                                  "floor_covering_stores",
                                  "florists",
                                  "florists_supplies_nursery_stock_and_flowers",
                                  "freezer_and_locker_meat_provisioners",
                                  "fuel_dealers_non_automotive",
                                  "funeral_services_crematories",
                                  "furniture_home_furnishings_and_equipment_stores_except_appliances",
                                  "furniture_repair_refinishing",
                                  "furriers_and_fur_shops",
                                  "general_services",
                                  "gift_card_novelty_and_souvenir_shops",
                                  "glass_paint_and_wallpaper_stores",
                                  "glassware_crystal_stores",
                                  "golf_courses_public",
                                  "government_services",
                                  "grocery_stores_supermarkets",
                                  "hardware_equipment_and_supplies",
                                  "hardware_stores",
                                  "health_and_beauty_spas",
                                  "hearing_aids_sales_and_supplies",
                                  "heating_plumbing_a_c",
                                  "hobby_toy_and_game_shops",
                                  "home_supply_warehouse_stores",
                                  "hospitals",
                                  "hotels_motels_and_resorts",
                                  "household_appliance_stores",
                                  "industrial_supplies",
                                  "information_retrieval_services",
                                  "insurance_default",
                                  "insurance_underwriting_premiums",
                                  "intra_company_purchases",
                                  "jewelry_stores_watches_clocks_and_silverware_stores",
                                  "landscaping_services",
                                  "laundries",
                                  "laundry_cleaning_services",
                                  "legal_services_attorneys",
                                  "luggage_and_leather_goods_stores",
                                  "lumber_building_materials_stores",
                                  "manual_cash_disburse",
                                  "marinas_service_and_supplies",
                                  "masonry_stonework_and_plaster",
                                  "massage_parlors",
                                  "medical_and_dental_labs",
                                  "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                                  "medical_services",
                                  "membership_organizations",
                                  "mens_and_boys_clothing_and_accessories_stores",
                                  "mens_womens_clothing_stores",
                                  "metal_service_centers",
                                  "miscellaneous",
                                  "miscellaneous_apparel_and_accessory_shops",
                                  "miscellaneous_auto_dealers",
                                  "miscellaneous_business_services",
                                  "miscellaneous_food_stores",
                                  "miscellaneous_general_merchandise",
                                  "miscellaneous_general_services",
                                  "miscellaneous_home_furnishing_specialty_stores",
                                  "miscellaneous_publishing_and_printing",
                                  "miscellaneous_recreation_services",
                                  "miscellaneous_repair_shops",
                                  "miscellaneous_specialty_retail",
                                  "mobile_home_dealers",
                                  "motion_picture_theaters",
                                  "motor_freight_carriers_and_trucking",
                                  "motor_homes_dealers",
                                  "motor_vehicle_supplies_and_new_parts",
                                  "motorcycle_shops_and_dealers",
                                  "motorcycle_shops_dealers",
                                  "music_stores_musical_instruments_pianos_and_sheet_music",
                                  "news_dealers_and_newsstands",
                                  "non_fi_money_orders",
                                  "non_fi_stored_value_card_purchase_load",
                                  "nondurable_goods",
                                  "nurseries_lawn_and_garden_supply_stores",
                                  "nursing_personal_care",
                                  "office_and_commercial_furniture",
                                  "opticians_eyeglasses",
                                  "optometrists_ophthalmologist",
                                  "orthopedic_goods_prosthetic_devices",
                                  "osteopaths",
                                  "package_stores_beer_wine_and_liquor",
                                  "paints_varnishes_and_supplies",
                                  "parking_lots_garages",
                                  "passenger_railways",
                                  "pawn_shops",
                                  "pet_shops_pet_food_and_supplies",
                                  "petroleum_and_petroleum_products",
                                  "photo_developing",
                                  "photographic_photocopy_microfilm_equipment_and_supplies",
                                  "photographic_studios",
                                  "picture_video_production",
                                  "piece_goods_notions_and_other_dry_goods",
                                  "plumbing_heating_equipment_and_supplies",
                                  "political_organizations",
                                  "postal_services_government_only",
                                  "precious_stones_and_metals_watches_and_jewelry",
                                  "professional_services",
                                  "public_warehousing_and_storage",
                                  "quick_copy_repro_and_blueprint",
                                  "railroads",
                                  "real_estate_agents_and_managers_rentals",
                                  "record_stores",
                                  "recreational_vehicle_rentals",
                                  "religious_goods_stores",
                                  "religious_organizations",
                                  "roofing_siding_sheet_metal",
                                  "secretarial_support_services",
                                  "security_brokers_dealers",
                                  "service_stations",
                                  "sewing_needlework_fabric_and_piece_goods_stores",
                                  "shoe_repair_hat_cleaning",
                                  "shoe_stores",
                                  "small_appliance_repair",
                                  "snowmobile_dealers",
                                  "special_trade_services",
                                  "specialty_cleaning",
                                  "sporting_goods_stores",
                                  "sporting_recreation_camps",
                                  "sports_and_riding_apparel_stores",
                                  "sports_clubs_fields",
                                  "stamp_and_coin_stores",
                                  "stationary_office_supplies_printing_and_writing_paper",
                                  "stationery_stores_office_and_school_supply_stores",
                                  "swimming_pools_sales",
                                  "t_ui_travel_germany",
                                  "tailors_alterations",
                                  "tax_payments_government_agencies",
                                  "tax_preparation_services",
                                  "taxicabs_limousines",
                                  "telecommunication_equipment_and_telephone_sales",
                                  "telecommunication_services",
                                  "telegraph_services",
                                  "tent_and_awning_shops",
                                  "testing_laboratories",
                                  "theatrical_ticket_agencies",
                                  "timeshares",
                                  "tire_retreading_and_repair",
                                  "tolls_bridge_fees",
                                  "tourist_attractions_and_exhibits",
                                  "towing_services",
                                  "trailer_parks_campgrounds",
                                  "transportation_services",
                                  "travel_agencies_tour_operators",
                                  "truck_stop_iteration",
                                  "truck_utility_trailer_rentals",
                                  "typesetting_plate_making_and_related_services",
                                  "typewriter_stores",
                                  "u_s_federal_government_agencies_or_departments",
                                  "uniforms_commercial_clothing",
                                  "used_merchandise_and_secondhand_stores",
                                  "utilities",
                                  "variety_stores",
                                  "veterinary_services",
                                  "video_amusement_game_supplies",
                                  "video_game_arcades",
                                  "video_tape_rental_stores",
                                  "vocational_trade_schools",
                                  "watch_jewelry_repair",
                                  "welding_repair",
                                  "wholesale_clubs",
                                  "wig_and_toupee_stores",
                                  "wires_money_orders",
                                  "womens_accessory_and_specialty_shops",
                                  "womens_ready_to_wear_stores",
                                  "wrecking_and_salvage_yards"
                                ],
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "interval": {
                              "enum": [
                                "all_time",
                                "daily",
                                "monthly",
                                "per_authorization",
                                "weekly",
                                "yearly"
                              ],
                              "type": "string"
                            }
                          },
                          "required": ["amount", "interval"],
                          "title": "spending_limits_param",
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "title": "authorization_controls_param",
                    "type": "object"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  },
                  "status": {
                    "description": "Whether authorizations can be approved on this card.",
                    "enum": [
                      "active",
                      "canceled",
                      "inactive",
                      "lost",
                      "stolen"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.card"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/cards/{card}/details": {
      "get": {
        "description": "<p>For virtual cards only. Retrieves an Issuing <code>card_details</code> object that contains <a href=\"/docs/issuing/cards/management#virtual-card-info\">the sensitive details</a> of a virtual card.</p>",
        "operationId": "GetIssuingCardsCardDetails",
        "parameters": [
          {
            "description": "The identifier of the virtual card to be retrieved.",
            "in": "path",
            "name": "card",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.card_details"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/cards/{card}/pin": {
      "get": {
        "description": "<p>Retrieves the PIN for a card object, subject to cardholder verification, see <a href=\"/docs/issuing/pin_management\">Retrieve and update cardholder PIN</a></p>",
        "operationId": "GetIssuingCardsCardPin",
        "parameters": [
          {
            "description": "The id of the `Card` that the PIN belongs to",
            "in": "path",
            "name": "card",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The id of the `Verification` that was sent and the code entered by the cardholder",
            "explode": true,
            "in": "query",
            "name": "verification",
            "required": true,
            "schema": {
              "properties": {
                "id": {
                  "maxLength": 5000,
                  "type": "string"
                },
                "one_time_code": {
                  "maxLength": 5000,
                  "type": "string"
                }
              },
              "required": ["id", "one_time_code"],
              "title": "verification_params",
              "type": "object"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.card_pin"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the PIN for a card, subject to cardholder verification. See <a href=\"/docs/issuing/pin_management\">Retrieve and update cardholder PIN</a></p>",
        "operationId": "PostIssuingCardsCardPin",
        "parameters": [
          {
            "description": "The id of the `Card` that the PIN belongs to",
            "in": "path",
            "name": "card",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "verification": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "pin": {
                    "description": "The new desired PIN",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "verification": {
                    "description": "The id of the `Verification` that was sent and the code entered by the cardholder",
                    "properties": {
                      "id": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "one_time_code": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["id", "one_time_code"],
                    "title": "verification_params",
                    "type": "object"
                  }
                },
                "required": ["pin", "verification"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.card_pin"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/disputes": {
      "get": {
        "description": "<p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetIssuingDisputes",
        "parameters": [
          {
            "description": "Only return issuing disputes that were created during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return issuing disputes for the given transaction.",
            "in": "query",
            "name": "disputed_transaction",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/issuing.dispute"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/issuing/disputes",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "IssuingDisputeList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates an Issuing <code>Dispute</code> object.</p>",
        "operationId": "PostIssuingDisputes",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "evidence": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Amount to dispute, defaults to full value, given in the currency the transaction was made in.",
                    "type": "integer"
                  },
                  "disputed_transaction": {
                    "description": "The ID of the issuing transaction to create a dispute for.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "evidence": {
                    "description": "A hash containing all the evidence related to the dispute. This should have a single key, equal to the provided `reason`, mapping to an appropriate evidence object.",
                    "properties": {
                      "fraudulent": {
                        "properties": {
                          "dispute_explanation": {
                            "maxLength": 10000,
                            "type": "string"
                          },
                          "uncategorized_file": {
                            "type": "string"
                          }
                        },
                        "required": ["dispute_explanation"],
                        "title": "fraudulent",
                        "type": "object"
                      },
                      "other": {
                        "properties": {
                          "dispute_explanation": {
                            "maxLength": 10000,
                            "type": "string"
                          },
                          "uncategorized_file": {
                            "type": "string"
                          }
                        },
                        "required": ["dispute_explanation"],
                        "title": "other",
                        "type": "object"
                      }
                    },
                    "title": "disputes_evidence",
                    "type": "object"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "reason": {
                    "description": "The reason for the dispute. One of `other` or `fraudulent`.",
                    "enum": ["fraudulent", "other"],
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["disputed_transaction", "reason"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/disputes/{dispute}": {
      "get": {
        "description": "<p>Retrieves an Issuing <code>Dispute</code> object.</p>",
        "operationId": "GetIssuingDisputesDispute",
        "parameters": [
          {
            "description": "The ID of the dispute to retrieve.",
            "in": "path",
            "name": "dispute",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostIssuingDisputesDispute",
        "parameters": [
          {
            "description": "The ID of the dispute to update.",
            "in": "path",
            "name": "dispute",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.dispute"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/settlements": {
      "get": {
        "description": "<p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetIssuingSettlements",
        "parameters": [
          {
            "description": "Only return issuing settlements that were created during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/issuing.settlement"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/issuing/settlements",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/settlements/{settlement}": {
      "get": {
        "description": "<p>Retrieves an Issuing <code>Settlement</code> object.</p>",
        "operationId": "GetIssuingSettlementsSettlement",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the settlement to retrieve.",
            "in": "path",
            "name": "settlement",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.settlement"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostIssuingSettlementsSettlement",
        "parameters": [
          {
            "description": "The ID of the settlement to update.",
            "in": "path",
            "name": "settlement",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.settlement"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/transactions": {
      "get": {
        "description": "<p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetIssuingTransactions",
        "parameters": [
          {
            "description": "Only return issuing transactions that belong to the given card.",
            "in": "query",
            "name": "card",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return authorizations belonging to the given cardholder.",
            "in": "query",
            "name": "cardholder",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return transactions that were created during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return transactions that originate from a given dispute.",
            "in": "query",
            "name": "dispute",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return transactions that are associated with the given settlement.",
            "in": "query",
            "name": "settlement",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/issuing.transaction"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/issuing/transactions",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/transactions/{transaction}": {
      "get": {
        "description": "<p>Retrieves an Issuing <code>Transaction</code> object.</p>",
        "operationId": "GetIssuingTransactionsTransaction",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the transaction to retrieve.",
            "in": "path",
            "name": "transaction",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostIssuingTransactionsTransaction",
        "parameters": [
          {
            "description": "The identifier of the transaction to update.",
            "in": "path",
            "name": "transaction",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/issuing/verifications": {
      "post": {
        "description": "<p>Some actions (eg: updating a PIN) need confirmation from the cardholder</p>",
        "operationId": "PostIssuingVerifications",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "card": {
                    "description": "The `Card` for which a verification is requested",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "scope": {
                    "description": "The scope of the verification (one of `card_pin_retrieve` or `card_pin_update`)",
                    "enum": ["card_pin_retrieve", "card_pin_update"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "verification_method": {
                    "description": "The method used to send the cardholder the verification (one of `email` or `sms`)",
                    "enum": ["email", "sms"],
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["card", "scope", "verification_method"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issuing.verification"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/mandates/{mandate}": {
      "get": {
        "description": "<p>Retrieves a Mandate object.</p>",
        "operationId": "GetMandatesMandate",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of the Mandate to retrieve.",
            "in": "path",
            "name": "mandate",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mandate"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/order_returns": {
      "get": {
        "description": "<p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p>",
        "operationId": "GetOrderReturns",
        "parameters": [
          {
            "description": "Date this return was created.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The order to retrieve returns for.",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/order_return"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/order_returns",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/order_returns/{id}": {
      "get": {
        "description": "<p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p>",
        "operationId": "GetOrderReturnsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the order return to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order_return"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/orders": {
      "get": {
        "description": "<p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>",
        "operationId": "GetOrders",
        "parameters": [
          {
            "description": "Date this order was created.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return orders for the given customer.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return orders with the given IDs.",
            "explode": true,
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return orders that have the given status. One of `created`, `paid`, `fulfilled`, or `refunded`.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter orders based on when they were paid, fulfilled, canceled, or returned.",
            "explode": true,
            "in": "query",
            "name": "status_transitions",
            "required": false,
            "schema": {
              "properties": {
                "canceled": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer"
                        },
                        "gte": {
                          "type": "integer"
                        },
                        "lt": {
                          "type": "integer"
                        },
                        "lte": {
                          "type": "integer"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "fulfilled": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer"
                        },
                        "gte": {
                          "type": "integer"
                        },
                        "lt": {
                          "type": "integer"
                        },
                        "lte": {
                          "type": "integer"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "paid": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer"
                        },
                        "gte": {
                          "type": "integer"
                        },
                        "lt": {
                          "type": "integer"
                        },
                        "lte": {
                          "type": "integer"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                },
                "returned": {
                  "anyOf": [
                    {
                      "properties": {
                        "gt": {
                          "type": "integer"
                        },
                        "gte": {
                          "type": "integer"
                        },
                        "lt": {
                          "type": "integer"
                        },
                        "lte": {
                          "type": "integer"
                        }
                      },
                      "title": "range_query_specs",
                      "type": "object"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                }
              },
              "title": "order_timestamp_specs",
              "type": "object"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return orders with the given upstream order IDs.",
            "explode": true,
            "in": "query",
            "name": "upstream_ids",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/order"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/orders",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new order object.</p>",
        "operationId": "PostOrders",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "coupon": {
                    "description": "A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "customer": {
                    "description": "The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If `email` or `shipping` are also provided, they will override the values retrieved from the customer object.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the customer placing the order.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "description": "List of items constituting the order. An order can have up to 25 items.",
                    "items": {
                      "properties": {
                        "amount": {
                          "type": "integer"
                        },
                        "currency": {
                          "type": "string"
                        },
                        "description": {
                          "maxLength": 1000,
                          "type": "string"
                        },
                        "parent": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "type": {
                          "enum": ["discount", "shipping", "sku", "tax"],
                          "maxLength": 5000,
                          "type": "string"
                        }
                      },
                      "title": "order_item_specs",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an order object. Limited to 500 characters. Metadata can be useful for storing additional information about the order in a structured format.",
                    "type": "object"
                  },
                  "shipping": {
                    "description": "Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["line1"],
                        "title": "address",
                        "type": "object"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["address", "name"],
                    "title": "customer_shipping",
                    "type": "object"
                  }
                },
                "required": ["currency"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "description": "<p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>",
        "operationId": "GetOrdersId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the order to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostOrdersId",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "coupon": {
                    "description": "A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the order in a structured format.",
                    "type": "object"
                  },
                  "selected_shipping_method": {
                    "description": "The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "shipping": {
                    "description": "Tracking information once the order has been fulfilled.",
                    "properties": {
                      "carrier": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tracking_number": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["carrier", "tracking_number"],
                    "title": "shipping_tracking_params",
                    "type": "object"
                  },
                  "status": {
                    "description": "Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).",
                    "enum": [
                      "canceled",
                      "created",
                      "fulfilled",
                      "paid",
                      "returned"
                    ],
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/orders/{id}/pay": {
      "post": {
        "description": "<p>Pay an order by providing a <code>source</code> to create a payment.</p>",
        "operationId": "PostOrdersIdPay",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "application_fee": {
                    "type": "integer"
                  },
                  "customer": {
                    "description": "The ID of an existing customer that will be charged for this order. If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified customer will be charged instead of the one attached to the order.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the customer placing the order. Required if not previously specified for the order.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to an order object. Limited to 500 characters. Metadata can be useful for storing additional information about the order in a structured format.",
                    "type": "object"
                  },
                  "source": {
                    "description": "A [Token](https://stripe.com/docs/api#tokens)'s or a [Source](https://stripe.com/docs/api#sources)'s ID, as returned by [Elements](https://stripe.com/docs/elements). If no customer was attached to the order at creation, either `source` or `customer is required. Otherwise, the specified source will be charged intead of the customer attached to the order.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/orders/{id}/returns": {
      "post": {
        "description": "<p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p>",
        "operationId": "PostOrdersIdReturns",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "anyOf": [
                      {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer"
                            },
                            "description": {
                              "maxLength": 1000,
                              "type": "string"
                            },
                            "parent": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "quantity": {
                              "type": "integer"
                            },
                            "type": {
                              "enum": ["discount", "shipping", "sku", "tax"],
                              "maxLength": 5000,
                              "type": "string"
                            }
                          },
                          "title": "return_order_item_specs",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "List of items to return."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order_return"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_intents": {
      "get": {
        "description": "<p>Returns a list of PaymentIntents.</p>",
        "operationId": "GetPaymentIntents",
        "parameters": [
          {
            "description": "A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return PaymentIntents for the customer specified by this customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/payment_intent"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/payment_intents",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "PaymentFlowsPaymentIntentList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a PaymentIntent object.</p>\n\n<p>After the PaymentIntent is created, attach a payment method and <a href=\"/docs/api/payment_intents/confirm\">confirm</a>\nto continue the payment. You can read more about the different payment flows\navailable via the Payment Intents API <a href=\"/docs/payments/payment-intents\">here</a>.</p>\n\n<p>When <code>confirm=true</code> is used during creation, it is equivalent to creating\nand confirming the PaymentIntent in the same call. You may use any parameters\navailable in the <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> when <code>confirm=true</code>\nis supplied.</p>",
        "operationId": "PostPaymentIntents",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "mandate_data": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "off_session": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_options": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_types": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                },
                "transfer_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
                    "type": "integer"
                  },
                  "application_fee_amount": {
                    "description": "The amount of the application fee (if any) that will be applied to the\npayment and transferred to the application owner's Stripe account. For\nmore information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).",
                    "type": "integer"
                  },
                  "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "enum": ["automatic", "manual"],
                    "type": "string"
                  },
                  "confirm": {
                    "description": "Set to `true` to attempt to [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, parameters available in the [confirm](https://stripe.com/docs/api/payment_intents/confirm) API may also be provided.",
                    "type": "boolean"
                  },
                  "confirmation_method": {
                    "enum": ["automatic", "manual"],
                    "type": "string"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "customer": {
                    "description": "ID of the Customer this PaymentIntent belongs to, if one exists.\n\nIf present, payment methods used with this PaymentIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this PaymentIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 1000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "mandate": {
                    "description": "ID of the mandate to be used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "mandate_data": {
                    "description": "This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).",
                    "properties": {
                      "customer_acceptance": {
                        "properties": {
                          "accepted_at": {
                            "format": "unix-time",
                            "type": "integer"
                          },
                          "offline": {
                            "properties": {},
                            "title": "offline_param",
                            "type": "object"
                          },
                          "online": {
                            "properties": {
                              "ip_address": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "user_agent": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["ip_address", "user_agent"],
                            "title": "online_param",
                            "type": "object"
                          },
                          "type": {
                            "enum": ["offline", "online"],
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["type"],
                        "title": "customer_acceptance_param",
                        "type": "object"
                      }
                    },
                    "required": ["customer_acceptance"],
                    "title": "secret_key_param",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "off_session": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "enum": ["one_off", "recurring"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm)."
                  },
                  "on_behalf_of": {
                    "description": "The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).",
                    "type": "string"
                  },
                  "payment_method": {
                    "description": "ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.\n\nIf this parameter is omitted with `confirm=true`, `customer.default_source` will be attached as this PaymentIntent's payment instrument to improve the migration experience for users of the Charges API. We recommend that you explicitly provide the `payment_method` going forward.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "payment_method_options": {
                    "description": "Payment-method-specific configuration for this PaymentIntent.",
                    "properties": {
                      "card": {
                        "properties": {
                          "installments": {
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "plan": {
                                "anyOf": [
                                  {
                                    "properties": {
                                      "count": {
                                        "type": "integer"
                                      },
                                      "interval": {
                                        "enum": ["month"],
                                        "type": "string"
                                      },
                                      "type": {
                                        "enum": ["fixed_count"],
                                        "type": "string"
                                      }
                                    },
                                    "required": ["count", "interval", "type"],
                                    "title": "installment_plan",
                                    "type": "object"
                                  },
                                  {
                                    "enum": [""],
                                    "type": "string"
                                  }
                                ]
                              }
                            },
                            "title": "installments_param",
                            "type": "object"
                          },
                          "request_three_d_secure": {
                            "enum": ["any", "automatic"],
                            "maxLength": 5000,
                            "type": "string",
                            "x-stripeBypassValidation": true
                          }
                        },
                        "title": "payment_intent_param",
                        "type": "object"
                      }
                    },
                    "title": "payment_method_options_param",
                    "type": "object"
                  },
                  "payment_method_types": {
                    "description": "The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. If this is not provided, defaults to [\"card\"].",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "receipt_email": {
                    "description": "Email address that the receipt for the resulting payment will be sent to.",
                    "type": "string"
                  },
                  "return_url": {
                    "description": "The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).",
                    "type": "string"
                  },
                  "save_payment_method": {
                    "description": "If the PaymentIntent has a `payment_method` and a `customer` or if you're attaching a payment method to the PaymentIntent in this request, you can pass `save_payment_method=true` to save the payment method to the customer. Defaults to `false`.\n\nIf the payment method is already saved to a customer, this does nothing. If this type of payment method cannot be saved to a customer, the request will error.\n\n_Note that saving a payment method using this parameter does not guarantee that the payment method can be charged._ To ensure that only payment methods which can be charged are saved to a customer, you can [manually save](https://stripe.com/docs/api/customers/create#create_customer-source) the payment method in response to the [`payment_intent.succeeded` webhook](https://stripe.com/docs/api/events/types#event_types-payment_intent.succeeded).",
                    "type": "boolean"
                  },
                  "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n\nFor more, learn to [save card details after a payment](https://stripe.com/docs/payments/save-after-payment).\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by [SCA](https://stripe.com/docs/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect [off-session payments](https://stripe.com/docs/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.",
                    "enum": ["off_session", "on_session"],
                    "type": "string"
                  },
                  "shipping": {
                    "description": "Shipping information for this PaymentIntent.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["line1"],
                        "title": "address",
                        "type": "object"
                      },
                      "carrier": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "tracking_number": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["address", "name"],
                    "title": "shipping",
                    "type": "object"
                  },
                  "statement_descriptor": {
                    "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "statement_descriptor_suffix": {
                    "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "transfer_data": {
                    "description": "The parameters used to automatically create a Transfer when the payment succeeds.\nFor more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).",
                    "properties": {
                      "amount": {
                        "type": "integer"
                      },
                      "destination": {
                        "type": "string"
                      }
                    },
                    "required": ["destination"],
                    "title": "transfer_data_creation_params",
                    "type": "object"
                  },
                  "transfer_group": {
                    "description": "A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.",
                    "type": "string"
                  },
                  "use_stripe_sdk": {
                    "description": "Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps.",
                    "type": "boolean"
                  }
                },
                "required": ["amount", "currency"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_intents/{intent}": {
      "get": {
        "description": "<p>Retrieves the details of a PaymentIntent that has previously been created. </p>\n\n<p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>\n\n<p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href=\"#payment_intent_object\">payment intent</a> object reference for more details.</p>",
        "operationId": "GetPaymentIntentsIntent",
        "parameters": [
          {
            "description": "The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.",
            "in": "query",
            "name": "client_secret",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of the PaymentIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates properties on a PaymentIntent object without confirming.</p>\n\n<p>Depending on which properties you update, you may need to confirm the\nPaymentIntent again. For example, updating the <code>payment_method</code> will\nalways require you to confirm the PaymentIntent again. If you prefer to\nupdate and confirm at the same time, we recommend updating properties via\nthe <a href=\"/docs/api/payment_intents/confirm\">confirm API</a> instead.</p>",
        "operationId": "PostPaymentIntentsIntent",
        "parameters": [
          {
            "description": "ID of the PaymentIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "application_fee_amount": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_types": {
                  "explode": true,
                  "style": "deepObject"
                },
                "receipt_email": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                },
                "transfer_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
                    "type": "integer"
                  },
                  "application_fee_amount": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The amount of the application fee (if any) for the resulting payment. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "customer": {
                    "description": "ID of the Customer this PaymentIntent belongs to, if one exists.\n\nIf present, payment methods used with this PaymentIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this PaymentIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 1000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "payment_method": {
                    "description": "ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "payment_method_types": {
                    "description": "The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "receipt_email": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Email address that the receipt for the resulting payment will be sent to."
                  },
                  "save_payment_method": {
                    "description": "If the PaymentIntent has a `payment_method` and a `customer` or if you're attaching a payment method to the PaymentIntent in this request, you can pass `save_payment_method=true` to save the payment method to the customer. Defaults to `false`.\n\nIf the payment method is already saved to a customer, this does nothing. If this type of payment method cannot be saved to a customer, the request will error.\n\n_Note that saving a payment method using this parameter does not guarantee that the payment method can be charged._ To ensure that only payment methods which can be charged are saved to a customer, you can [manually save](https://stripe.com/docs/api/customers/create#create_customer-source) the payment method in response to the [`payment_intent.succeeded` webhook](https://stripe.com/docs/api/events/types#event_types-payment_intent.succeeded).",
                    "type": "boolean"
                  },
                  "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by [SCA](https://stripe.com/docs/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect [off-session payments](https://stripe.com/docs/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n\nIf `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.",
                    "enum": ["", "off_session", "on_session"],
                    "type": "string"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["line1"],
                            "title": "address",
                            "type": "object"
                          },
                          "carrier": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "tracking_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["address", "name"],
                        "title": "shipping",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Shipping information for this PaymentIntent."
                  },
                  "statement_descriptor": {
                    "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "statement_descriptor_suffix": {
                    "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "transfer_data": {
                    "description": "The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).",
                    "properties": {
                      "amount": {
                        "type": "integer"
                      }
                    },
                    "title": "transfer_data_update_params",
                    "type": "object"
                  },
                  "transfer_group": {
                    "description": "A string that identifies the resulting payment as part of a group. `transfer_group` may only be provided if it has not been set. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_intents/{intent}/cancel": {
      "post": {
        "description": "<p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>\n\n<p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status='requires_capture'</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>",
        "operationId": "PostPaymentIntentsIntentCancel",
        "parameters": [
          {
            "description": "ID of the PaymentIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "cancellation_reason": {
                    "description": "Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`",
                    "enum": [
                      "abandoned",
                      "duplicate",
                      "fraudulent",
                      "requested_by_customer"
                    ],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_intents/{intent}/capture": {
      "post": {
        "description": "<p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>\n\n<p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>\n\n<p>Learn more about <a href=\"/docs/payments/capture-later\">separate authorization and capture</a>.</p>",
        "operationId": "PostPaymentIntentsIntentCapture",
        "parameters": [
          {
            "description": "ID of the PaymentIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "transfer_data": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount_to_capture": {
                    "description": "The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full `amount_capturable` if not provided.",
                    "type": "integer"
                  },
                  "application_fee_amount": {
                    "description": "The amount of the application fee (if any) that will be applied to the\npayment and transferred to the application owner's Stripe account. For\nmore information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "statement_descriptor": {
                    "description": "For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "statement_descriptor_suffix": {
                    "description": "Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "transfer_data": {
                    "description": "The parameters used to automatically create a Transfer when the payment\nis captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).",
                    "properties": {
                      "amount": {
                        "type": "integer"
                      }
                    },
                    "title": "transfer_data_update_params",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_intents/{intent}/confirm": {
      "post": {
        "description": "<p>Confirm that your customer intends to pay with current or provided\npayment method. Upon confirmation, the PaymentIntent will attempt to initiate\na payment.</p>\n\n<p>If the selected payment method requires additional authentication steps, the\nPaymentIntent will transition to the <code>requires_action</code> status and\nsuggest additional actions via <code>next_action</code>. If payment fails,\nthe PaymentIntent will transition to the <code>requires_payment_method</code> status. If\npayment succeeds, the PaymentIntent will transition to the <code>succeeded</code>\nstatus (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>\n\n<p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted\nusing our <a href=\"/docs/stripe-js/reference#stripe-handle-card-payment\">client SDKs</a>\nand the PaymentIntent’s <a href=\"#payment_intent_object-client_secret\">client_secret</a>.\nAfter <code>next_action</code>s are handled by the client, no additional\nconfirmation is required to complete the payment.</p>\n\n<p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be\ninitiated using a secret key.\nIf any actions are required for the payment, the PaymentIntent will\nreturn to the <code>requires_confirmation</code> state\nafter those actions are completed. Your server needs to then\nexplicitly re-confirm the PaymentIntent to initiate the next payment\nattempt. Read the <a href=\"/docs/payments/payment-intents/web-manual\">expanded documentation</a>\nto learn more about manual confirmation.</p>",
        "operationId": "PostPaymentIntentsIntentConfirm",
        "parameters": [
          {
            "description": "ID of the PaymentIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "mandate_data": {
                  "explode": true,
                  "style": "deepObject"
                },
                "off_session": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_options": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_types": {
                  "explode": true,
                  "style": "deepObject"
                },
                "receipt_email": {
                  "explode": true,
                  "style": "deepObject"
                },
                "shipping": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "client_secret": {
                    "description": "The client secret of the PaymentIntent.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "mandate": {
                    "description": "ID of the mandate to be used for this payment.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "mandate_data": {
                    "anyOf": [
                      {
                        "properties": {
                          "customer_acceptance": {
                            "properties": {
                              "accepted_at": {
                                "format": "unix-time",
                                "type": "integer"
                              },
                              "offline": {
                                "properties": {},
                                "title": "offline_param",
                                "type": "object"
                              },
                              "online": {
                                "properties": {
                                  "ip_address": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  },
                                  "user_agent": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  }
                                },
                                "required": ["ip_address", "user_agent"],
                                "title": "online_param",
                                "type": "object"
                              },
                              "type": {
                                "enum": ["offline", "online"],
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["type"],
                            "title": "customer_acceptance_param",
                            "type": "object"
                          }
                        },
                        "required": ["customer_acceptance"],
                        "title": "secret_key_param",
                        "type": "object"
                      },
                      {
                        "properties": {
                          "customer_acceptance": {
                            "properties": {
                              "online": {
                                "properties": {
                                  "ip_address": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  },
                                  "user_agent": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  }
                                },
                                "title": "online_param",
                                "type": "object"
                              },
                              "type": {
                                "enum": ["online"],
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["online", "type"],
                            "title": "customer_acceptance_param",
                            "type": "object"
                          }
                        },
                        "required": ["customer_acceptance"],
                        "title": "client_key_param",
                        "type": "object"
                      }
                    ],
                    "description": "This hash contains details about the Mandate to create"
                  },
                  "off_session": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "enum": ["one_off", "recurring"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards)."
                  },
                  "payment_method": {
                    "description": "ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "payment_method_options": {
                    "description": "Payment-method-specific configuration for this PaymentIntent.",
                    "properties": {
                      "card": {
                        "properties": {
                          "installments": {
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "plan": {
                                "anyOf": [
                                  {
                                    "properties": {
                                      "count": {
                                        "type": "integer"
                                      },
                                      "interval": {
                                        "enum": ["month"],
                                        "type": "string"
                                      },
                                      "type": {
                                        "enum": ["fixed_count"],
                                        "type": "string"
                                      }
                                    },
                                    "required": ["count", "interval", "type"],
                                    "title": "installment_plan",
                                    "type": "object"
                                  },
                                  {
                                    "enum": [""],
                                    "type": "string"
                                  }
                                ]
                              }
                            },
                            "title": "installments_param",
                            "type": "object"
                          },
                          "request_three_d_secure": {
                            "enum": ["any", "automatic"],
                            "maxLength": 5000,
                            "type": "string",
                            "x-stripeBypassValidation": true
                          }
                        },
                        "title": "payment_intent_param",
                        "type": "object"
                      }
                    },
                    "title": "payment_method_options_param",
                    "type": "object"
                  },
                  "payment_method_types": {
                    "description": "The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "receipt_email": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Email address that the receipt for the resulting payment will be sent to."
                  },
                  "return_url": {
                    "description": "The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.\nIf you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.\nThis parameter is only used for cards and other redirect-based payment methods.",
                    "type": "string"
                  },
                  "save_payment_method": {
                    "description": "If the PaymentIntent has a `payment_method` and a `customer` or if you're attaching a payment method to the PaymentIntent in this request, you can pass `save_payment_method=true` to save the payment method to the customer. Defaults to `false`.\n\nIf the payment method is already saved to a customer, this does nothing. If this type of payment method cannot be saved to a customer, the request will error.\n\n_Note that saving a payment method using this parameter does not guarantee that the payment method can be charged._ To ensure that only payment methods which can be charged are saved to a customer, you can [manually save](https://stripe.com/docs/api/customers/create#create_customer-source) the payment method in response to the [`payment_intent.succeeded` webhook](https://stripe.com/docs/api/events/types#event_types-payment_intent.succeeded).",
                    "type": "boolean"
                  },
                  "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.\n\nIf present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n\nUse `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n\nStripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by [SCA](https://stripe.com/docs/strong-customer-authentication), using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to collect [off-session payments](https://stripe.com/docs/payments/cards/charging-saved-cards#off-session-payments-with-saved-cards) for this customer.\n\nIf `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.",
                    "enum": ["", "off_session", "on_session"],
                    "type": "string"
                  },
                  "shipping": {
                    "anyOf": [
                      {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["line1"],
                            "title": "address",
                            "type": "object"
                          },
                          "carrier": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "tracking_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["address", "name"],
                        "title": "shipping",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Shipping information for this PaymentIntent."
                  },
                  "use_stripe_sdk": {
                    "description": "Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_methods": {
      "get": {
        "description": "<p>Returns a list of PaymentMethods for a given Customer</p>",
        "operationId": "GetPaymentMethods",
        "parameters": [
          {
            "description": "The ID of the customer whose PaymentMethods will be retrieved.",
            "in": "query",
            "name": "customer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A required filter on the list, based on the object `type` field.",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": ["card", "card_present", "ideal", "sepa_debit"],
              "maxLength": 5000,
              "type": "string",
              "x-stripeBypassValidation": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/payment_method"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/payment_methods",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "PaymentFlowsPaymentMethodList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a PaymentMethod object. Read the <a href=\"/docs/stripe-js/reference#stripe-create-payment-method\">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>",
        "operationId": "PostPaymentMethods",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_details": {
                  "explode": true,
                  "style": "deepObject"
                },
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "ideal": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "sepa_debit": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "billing_details": {
                    "description": "Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "billing_details_address",
                        "type": "object"
                      },
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "billing_details_inner_params",
                    "type": "object"
                  },
                  "card": {
                    "anyOf": [
                      {
                        "properties": {
                          "cvc": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_month": {
                            "type": "integer"
                          },
                          "exp_year": {
                            "type": "integer"
                          },
                          "number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["exp_month", "exp_year", "number"],
                        "title": "card_details_params",
                        "type": "object"
                      },
                      {
                        "properties": {
                          "token": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["token"],
                        "title": "token_params",
                        "type": "object"
                      }
                    ],
                    "description": "If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: \"tok_visa\"}`. When creating with a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly.",
                    "x-stripeBypassValidation": true
                  },
                  "customer": {
                    "description": "The `Customer` to whom the original PaymentMethod is attached.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "ideal": {
                    "description": "If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.",
                    "properties": {
                      "bank": {
                        "enum": [
                          "abn_amro",
                          "asn_bank",
                          "bunq",
                          "handelsbanken",
                          "ing",
                          "knab",
                          "moneyou",
                          "rabobank",
                          "regiobank",
                          "sns_bank",
                          "triodos_bank",
                          "van_lanschot"
                        ],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "param",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "payment_method": {
                    "description": "The PaymentMethod to share.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "sepa_debit": {
                    "description": "If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.",
                    "properties": {
                      "iban": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["iban"],
                    "title": "param",
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. Required unless `payment_method` is specified (see the [Cloning PaymentMethods](https://stripe.com/docs/payments/payment-methods/connect#cloning-payment-methods) guide)",
                    "enum": ["card", "ideal", "sepa_debit"],
                    "type": "string",
                    "x-stripeBypassValidation": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_method"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_methods/{payment_method}": {
      "get": {
        "description": "<p>Retrieves a PaymentMethod object.</p>",
        "operationId": "GetPaymentMethodsPaymentMethod",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the PaymentMethod.",
            "in": "path",
            "name": "payment_method",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_method"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>",
        "operationId": "PostPaymentMethodsPaymentMethod",
        "parameters": [
          {
            "in": "path",
            "name": "payment_method",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_details": {
                  "explode": true,
                  "style": "deepObject"
                },
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "sepa_debit": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "billing_details": {
                    "description": "Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "billing_details_address",
                        "type": "object"
                      },
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "billing_details_inner_params",
                    "type": "object"
                  },
                  "card": {
                    "properties": {
                      "exp_month": {
                        "type": "integer"
                      },
                      "exp_year": {
                        "type": "integer"
                      }
                    },
                    "title": "update_api_param",
                    "type": "object"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "sepa_debit": {
                    "properties": {},
                    "title": "update_param",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_method"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_methods/{payment_method}/attach": {
      "post": {
        "description": "<p>Attaches a PaymentMethod object to a Customer.</p>\n\n<p>To use this PaymentMethod as the default for invoice or subscription payments,\nset <a href=\"/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\"><code>invoice_settings.default_payment_method</code></a>,\non the Customer to the PaymentMethod’s ID.</p>",
        "operationId": "PostPaymentMethodsPaymentMethodAttach",
        "parameters": [
          {
            "in": "path",
            "name": "payment_method",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "customer": {
                    "description": "The ID of the customer to which to attach the PaymentMethod.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": ["customer"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_method"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payment_methods/{payment_method}/detach": {
      "post": {
        "description": "<p>Detaches a PaymentMethod object from a Customer.</p>",
        "operationId": "PostPaymentMethodsPaymentMethodDetach",
        "parameters": [
          {
            "in": "path",
            "name": "payment_method",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_method"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payouts": {
      "get": {
        "description": "<p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>",
        "operationId": "GetPayouts",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "arrival_date",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of an external account - only return payouts sent to this external account.",
            "in": "query",
            "name": "destination",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/payout"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/payouts",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "PayoutList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>To send funds to your own bank account, you create a new payout object. Your <a href=\"#balance\">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>\n\n<p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>\n\n<p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href=\"#balance_object\">balance object</a> details available and pending amounts by source type.</p>",
        "operationId": "PostPayouts",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "A positive integer in cents representing how much to payout.",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "destination": {
                    "description": "The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a payout object. It can be useful for storing additional information about the payout in a structured format.",
                    "type": "object"
                  },
                  "method": {
                    "description": "The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).)",
                    "enum": ["instant", "standard"],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "source_type": {
                    "description": "The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of `bank_account` or `card`.",
                    "enum": ["bank_account", "card"],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "statement_descriptor": {
                    "description": "A string to be displayed on the recipient's bank or card statement. This may be at most 22 characters. Attempting to use a `statement_descriptor` longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all.",
                    "maxLength": 22,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  }
                },
                "required": ["amount", "currency"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payout"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payouts/{payout}": {
      "get": {
        "description": "<p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>",
        "operationId": "GetPayoutsPayout",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the payout to be retrieved.",
            "in": "path",
            "name": "payout",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payout"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>",
        "operationId": "PostPayoutsPayout",
        "parameters": [
          {
            "description": "The identifier of the payout to be updated.",
            "in": "path",
            "name": "payout",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a payout object. It can be useful for storing additional information about the payout in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payout"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/payouts/{payout}/cancel": {
      "post": {
        "description": "<p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>",
        "operationId": "PostPayoutsPayoutCancel",
        "parameters": [
          {
            "description": "The identifier of the payout to be canceled.",
            "in": "path",
            "name": "payout",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payout"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/plans": {
      "get": {
        "description": "<p>Returns a list of your plans.</p>",
        "operationId": "GetPlans",
        "parameters": [
          {
            "description": "Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return plans for the given product.",
            "in": "query",
            "name": "product",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/plan"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/plans",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>You can create plans using the API, or in the Stripe <a href=\"https://dashboard.stripe.com/subscriptions/products\">Dashboard</a>.</p>",
        "operationId": "PostPlans",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "product": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tiers": {
                  "explode": true,
                  "style": "deepObject"
                },
                "transform_usage": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Whether the plan is currently available for new subscriptions. Defaults to `true`.",
                    "type": "boolean"
                  },
                  "aggregate_usage": {
                    "description": "Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.",
                    "enum": ["last_during_period", "last_ever", "max", "sum"],
                    "type": "string"
                  },
                  "amount": {
                    "description": "A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis.",
                    "type": "integer"
                  },
                  "amount_decimal": {
                    "description": "Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set.",
                    "format": "decimal",
                    "type": "string"
                  },
                  "billing_scheme": {
                    "description": "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.",
                    "enum": ["per_unit", "tiered"],
                    "type": "string"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "interval": {
                    "description": "Specifies billing frequency. Either `day`, `week`, `month` or `year`.",
                    "enum": ["day", "month", "week", "year"],
                    "type": "string"
                  },
                  "interval_count": {
                    "description": "The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).",
                    "type": "integer"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "nickname": {
                    "description": "A brief description of the plan, hidden from customers.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "product": {
                    "anyOf": [
                      {
                        "description": "The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://stripe.com/docs/api#product_object-type).",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "id": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "statement_descriptor": {
                            "maxLength": 22,
                            "type": "string"
                          },
                          "unit_label": {
                            "maxLength": 12,
                            "type": "string"
                          }
                        },
                        "required": ["name"],
                        "title": "inline_product_params",
                        "type": "object"
                      },
                      {
                        "description": "The ID of the product whose pricing the created plan will represent.",
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ]
                  },
                  "tiers": {
                    "description": "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.",
                    "items": {
                      "properties": {
                        "flat_amount": {
                          "type": "integer"
                        },
                        "flat_amount_decimal": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "unit_amount": {
                          "type": "integer"
                        },
                        "unit_amount_decimal": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "up_to": {
                          "anyOf": [
                            {
                              "enum": ["inf"],
                              "maxLength": 5000,
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        }
                      },
                      "required": ["up_to"],
                      "title": "plan_tier_param",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "tiers_mode": {
                    "description": "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.",
                    "enum": ["graduated", "volume"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "transform_usage": {
                    "description": "Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.",
                    "properties": {
                      "divide_by": {
                        "type": "integer"
                      },
                      "round": {
                        "enum": ["down", "up"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["divide_by", "round"],
                    "title": "transform_usage_param",
                    "type": "object"
                  },
                  "trial_period_days": {
                    "description": "Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).",
                    "type": "integer"
                  },
                  "usage_type": {
                    "description": "Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.",
                    "enum": ["licensed", "metered"],
                    "type": "string"
                  }
                },
                "required": ["currency", "interval"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plan"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/plans/{plan}": {
      "delete": {
        "description": "<p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>",
        "operationId": "DeletePlansPlan",
        "parameters": [
          {
            "description": "The identifier of the plan to be deleted.",
            "in": "path",
            "name": "plan",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_plan"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the plan with the given ID.</p>",
        "operationId": "GetPlansPlan",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the desired plan.",
            "in": "path",
            "name": "plan",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plan"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>",
        "operationId": "PostPlansPlan",
        "parameters": [
          {
            "description": "The identifier of the plan to be updated.",
            "in": "path",
            "name": "plan",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Whether the plan is currently available for new subscriptions.",
                    "type": "boolean"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "nickname": {
                    "description": "A brief description of the plan, hidden from customers.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "product": {
                    "description": "The product the plan belongs to. Note that after updating, statement descriptors and line items of the plan in active subscriptions will be affected.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "trial_period_days": {
                    "description": "Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plan"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "description": "<p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>",
        "operationId": "GetProducts",
        "parameters": [
          {
            "description": "Only return products that are active or inactive (e.g., pass `false` to list all inactive products).",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Only return products that were created during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return products with the given IDs.",
            "explode": true,
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return products that can be shipped (i.e., physical, not digital products).",
            "in": "query",
            "name": "shippable",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return products of this type.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": ["good", "service"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return products with the given url.",
            "in": "query",
            "name": "url",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/product"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/products",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new product object. To create a product for use with orders, see <a href=\"#create_product\">Products</a>.</p>",
        "operationId": "PostProducts",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "attributes": {
                  "explode": true,
                  "style": "deepObject"
                },
                "deactivate_on": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "images": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "package_dimensions": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Whether the product is currently available for purchase. Defaults to `true`.",
                    "type": "boolean"
                  },
                  "attributes": {
                    "description": "A list of up to 5 alphanumeric attributes.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "caption": {
                    "description": "A short one-line description of the product, meant to be displayable to the customer. May only be set if type=`good`.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "deactivate_on": {
                    "description": "An array of Connect application names or identifiers that should not be able to order the SKUs for this product. May only be set if type=`good`.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "description": {
                    "description": "The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.",
                    "maxLength": 40000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "images": {
                    "description": "A list of up to 8 URLs of images for this product, meant to be displayable to the customer. May only be set if type=`good`.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "package_dimensions": {
                    "description": "The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. May only be set if type=`good`.",
                    "properties": {
                      "height": {
                        "type": "number"
                      },
                      "length": {
                        "type": "number"
                      },
                      "weight": {
                        "type": "number"
                      },
                      "width": {
                        "type": "number"
                      }
                    },
                    "required": ["height", "length", "weight", "width"],
                    "title": "package_dimensions_specs",
                    "type": "object"
                  },
                  "shippable": {
                    "description": "Whether this product is shipped (i.e., physical goods). Defaults to `true`. May only be set if type=`good`.",
                    "type": "boolean"
                  },
                  "statement_descriptor": {
                    "description": "An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>\"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the product. Defaults to `service` if not explicitly specified, enabling use of this product with Subscriptions and Plans. Set this parameter to `good` to use this product with Orders and SKUs. On API versions before `2018-02-05`, this field defaults to `good` for compatibility reasons.",
                    "enum": ["good", "service"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "unit_label": {
                    "description": "A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.",
                    "maxLength": 12,
                    "type": "string"
                  },
                  "url": {
                    "description": "A URL of a publicly-accessible webpage for this product. May only be set if type=`good`.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/products/{id}": {
      "delete": {
        "description": "<p>Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if it has no plans associated with it.</p>",
        "operationId": "DeleteProductsId",
        "parameters": [
          {
            "description": "The ID of the product to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_product"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>",
        "operationId": "GetProductsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the product to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostProductsId",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "attributes": {
                  "explode": true,
                  "style": "deepObject"
                },
                "deactivate_on": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "images": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "package_dimensions": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Whether the product is available for purchase.",
                    "type": "boolean"
                  },
                  "attributes": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A list of up to 5 alphanumeric attributes that each SKU can provide values for (e.g., `[\"color\", \"size\"]`). If a value for `attributes` is specified, the list specified will replace the existing attributes list on this product. Any attributes not present after the update will be deleted from the SKUs for this product."
                  },
                  "caption": {
                    "description": "A short one-line description of the product, meant to be displayable to the customer. May only be set if `type=good`.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "deactivate_on": {
                    "description": "An array of Connect application names or identifiers that should not be able to order the SKUs for this product. May only be set if `type=good`.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "description": {
                    "description": "The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.",
                    "maxLength": 40000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "images": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A list of up to 8 URLs of images for this product, meant to be displayable to the customer. May only be set if `type=good`."
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "package_dimensions": {
                    "anyOf": [
                      {
                        "properties": {
                          "height": {
                            "type": "number"
                          },
                          "length": {
                            "type": "number"
                          },
                          "weight": {
                            "type": "number"
                          },
                          "width": {
                            "type": "number"
                          }
                        },
                        "required": ["height", "length", "weight", "width"],
                        "title": "package_dimensions_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. May only be set if `type=good`."
                  },
                  "shippable": {
                    "description": "Whether this product is shipped (i.e., physical goods). Defaults to `true`. May only be set if `type=good`.",
                    "type": "boolean"
                  },
                  "statement_descriptor": {
                    "description": "An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>\"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter. May only be set if `type=service`.",
                    "maxLength": 22,
                    "type": "string"
                  },
                  "unit_label": {
                    "description": "A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`.",
                    "maxLength": 12,
                    "type": "string"
                  },
                  "url": {
                    "description": "A URL of a publicly-accessible webpage for this product. May only be set if `type=good`.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/radar/early_fraud_warnings": {
      "get": {
        "description": "<p>Returns a list of early fraud warnings.</p>",
        "operationId": "GetRadarEarlyFraudWarnings",
        "parameters": [
          {
            "description": "Only return early fraud warnings for the charge specified by this charge ID.",
            "in": "query",
            "name": "charge",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/radar.early_fraud_warning"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/radar/early_fraud_warnings",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "RadarEarlyFraudWarningList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/radar/early_fraud_warnings/{early_fraud_warning}": {
      "get": {
        "description": "<p>Retrieves the details of an early fraud warning that has previously been created. </p>\n\n<p>Please refer to the <a href=\"#early_fraud_warning_object\">early fraud warning</a> object reference for more details.</p>",
        "operationId": "GetRadarEarlyFraudWarningsEarlyFraudWarning",
        "parameters": [
          {
            "description": "The identifier of the early fraud warning to be retrieved.",
            "in": "path",
            "name": "early_fraud_warning",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radar.early_fraud_warning"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/radar/value_list_items": {
      "get": {
        "description": "<p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetRadarValueListItems",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Return items belonging to the parent list whose value matches the specified value (using an \"is like\" match).",
            "in": "query",
            "name": "value",
            "required": false,
            "schema": {
              "maxLength": 800,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Identifier for the parent value list this item belongs to.",
            "in": "query",
            "name": "value_list",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/radar.value_list_item"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/radar/value_list_items",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>",
        "operationId": "PostRadarValueListItems",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "value": {
                    "description": "The value of the item (whose type must match the type of the parent value list).",
                    "maxLength": 800,
                    "type": "string"
                  },
                  "value_list": {
                    "description": "The identifier of the value list which the created item will be added to.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["value", "value_list"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radar.value_list_item"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/radar/value_list_items/{item}": {
      "delete": {
        "description": "<p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>",
        "operationId": "DeleteRadarValueListItemsItem",
        "parameters": [
          {
            "description": "The identifier of the value list item to be deleted.",
            "in": "path",
            "name": "item",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_radar.value_list_item"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves a <code>ValueListItem</code> object.</p>",
        "operationId": "GetRadarValueListItemsItem",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the value list item to be retrieved.",
            "in": "path",
            "name": "item",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radar.value_list_item"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/radar/value_lists": {
      "get": {
        "description": "<p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetRadarValueLists",
        "parameters": [
          {
            "description": "The alias used to reference the value list when writing rules.",
            "in": "query",
            "name": "alias",
            "required": false,
            "schema": {
              "maxLength": 100,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A value contained within a value list - returns all value lists containing this value.",
            "in": "query",
            "name": "contains",
            "required": false,
            "schema": {
              "maxLength": 800,
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/radar.value_list"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/radar/value_lists",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>",
        "operationId": "PostRadarValueLists",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "alias": {
                    "description": "The name of the value list for use in rules.",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "item_type": {
                    "description": "Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. Use `string` if the item type is unknown or mixed.",
                    "enum": [
                      "card_bin",
                      "card_fingerprint",
                      "case_sensitive_string",
                      "country",
                      "email",
                      "ip_address",
                      "string"
                    ],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The human-readable name of the value list.",
                    "maxLength": 100,
                    "type": "string"
                  }
                },
                "required": ["alias", "name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radar.value_list"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/radar/value_lists/{value_list}": {
      "delete": {
        "description": "<p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>",
        "operationId": "DeleteRadarValueListsValueList",
        "parameters": [
          {
            "description": "The identifier of the value list to be deleted.",
            "in": "path",
            "name": "value_list",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_radar.value_list"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves a <code>ValueList</code> object.</p>",
        "operationId": "GetRadarValueListsValueList",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the value list to be retrieved.",
            "in": "path",
            "name": "value_list",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radar.value_list"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>",
        "operationId": "PostRadarValueListsValueList",
        "parameters": [
          {
            "description": "The identifier of the value list to be updated.",
            "in": "path",
            "name": "value_list",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "alias": {
                    "description": "The name of the value list for use in rules.",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The human-readable name of the value list.",
                    "maxLength": 100,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radar.value_list"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/recipients": {
      "get": {
        "deprecated": true,
        "description": "<p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p>",
        "operationId": "GetRecipients",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": ["corporation", "individual"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return recipients that are verified or unverified.",
            "in": "query",
            "name": "verified",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/recipient"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/recipients",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "deprecated": true,
        "description": "<p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.\nAlso verifies the recipient’s bank account information or debit card, if either is provided.</p>",
        "operationId": "PostRecipients",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "bank_account": {
                    "description": "A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "card": {
                    "description": "A U.S. Visa or MasterCard debit card (_not_ prepaid) to attach to the recipient. If the debit card is not valid, recipient creation will fail. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "description": {
                    "description": "An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "email": {
                    "description": "The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "tax_id": {
                    "description": "The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the recipient: either `individual` or `corporation`.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["name", "type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recipient"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/recipients/{id}": {
      "delete": {
        "deprecated": true,
        "description": "<p>Permanently deletes a recipient. It cannot be undone.</p>",
        "operationId": "DeleteRecipientsId",
        "parameters": [
          {
            "description": "The identifier of the recipient to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_recipient"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "deprecated": true,
        "description": "<p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p>",
        "operationId": "GetRecipientsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the recipient to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/recipient"
                    },
                    {
                      "$ref": "#/components/schemas/deleted_recipient"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "deprecated": true,
        "description": "<p>Updates the specified recipient by setting the values of the parameters passed.\nAny parameters not provided will be left unchanged.</p>\n\n<p>If you update the name or tax ID, the identity verification will automatically be rerun.\nIf you update the bank account, the bank account validation will automatically be rerun.</p>",
        "operationId": "PostRecipientsId",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "bank_account": {
                    "description": "A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "card": {
                    "description": "A U.S. Visa or MasterCard debit card (not prepaid) to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Passing `card` will create a new card, make it the new recipient default card, and delete the old recipient default (if one exists). If you want to add additional debit cards instead of replacing the existing default, use the [card creation API](#create_card). Whenever you attach a card to a recipient, Stripe will automatically validate the debit card.",
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "default_card": {
                    "description": "ID of the card to set as the recipient's new default for payouts.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "email": {
                    "description": "The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "name": {
                    "description": "The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "tax_id": {
                    "description": "The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recipient"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/refunds": {
      "get": {
        "description": "<p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>",
        "operationId": "GetRefunds",
        "parameters": [
          {
            "description": "Only return refunds for the charge specified by this charge ID.",
            "in": "query",
            "name": "charge",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return refunds for the PaymentIntent specified by this ID.",
            "in": "query",
            "name": "payment_intent",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/refund"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/refunds",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Create a refund.</p>",
        "operationId": "PostRefunds",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "type": "integer"
                  },
                  "charge": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "payment_intent": {
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "reason": {
                    "enum": [
                      "duplicate",
                      "fraudulent",
                      "requested_by_customer"
                    ],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "refund_application_fee": {
                    "type": "boolean"
                  },
                  "reverse_transfer": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/refunds/{refund}": {
      "get": {
        "description": "<p>Retrieves the details of an existing refund.</p>",
        "operationId": "GetRefundsRefund",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of refund to retrieve.",
            "in": "path",
            "name": "refund",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>\n\n<p>This request only accepts <code>metadata</code> as an argument.</p>",
        "operationId": "PostRefundsRefund",
        "parameters": [
          {
            "in": "path",
            "name": "refund",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refund"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/reporting/report_runs": {
      "get": {
        "description": "<p>Returns a list of Report Runs, with the most recent appearing first. (Requires a <a href=\"https://stripe.com/docs/keys#test-live-modes\">live-mode API key</a>.)</p>",
        "operationId": "GetReportingReportRuns",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/reporting.report_run"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/reporting/report_runs",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new object and begin running the report. (Requires a <a href=\"https://stripe.com/docs/keys#test-live-modes\">live-mode API key</a>.)</p>",
        "operationId": "PostReportingReportRuns",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "parameters": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "parameters": {
                    "description": "Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation.",
                    "properties": {
                      "columns": {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "connected_account": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "interval_end": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "interval_start": {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      "payout": {
                        "type": "string"
                      },
                      "reporting_category": {
                        "enum": [
                          "advance",
                          "advance_funding",
                          "charge",
                          "charge_failure",
                          "connect_collection_transfer",
                          "connect_reserved_funds",
                          "dispute",
                          "dispute_reversal",
                          "fee",
                          "financing_paydown",
                          "financing_paydown_reversal",
                          "financing_payout",
                          "financing_payout_reversal",
                          "issuing_authorization_hold",
                          "issuing_authorization_release",
                          "issuing_transaction",
                          "network_cost",
                          "other_adjustment",
                          "partial_capture_reversal",
                          "payout",
                          "payout_reversal",
                          "platform_earning",
                          "platform_earning_refund",
                          "refund",
                          "refund_failure",
                          "risk_reserved_funds",
                          "tax",
                          "topup",
                          "topup_reversal",
                          "transfer",
                          "transfer_reversal"
                        ],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "run_parameter_specs",
                    "type": "object"
                  },
                  "report_type": {
                    "description": "The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `\"balance.summary.1\"`.",
                    "type": "string"
                  }
                },
                "required": ["report_type"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reporting.report_run"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/reporting/report_runs/{report_run}": {
      "get": {
        "description": "<p>Retrieves the details of an existing Report Run. (Requires a <a href=\"https://stripe.com/docs/keys#test-live-modes\">live-mode API key</a>.)</p>",
        "operationId": "GetReportingReportRunsReportRun",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the run to retrieve",
            "in": "path",
            "name": "report_run",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reporting.report_run"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/reporting/report_types": {
      "get": {
        "description": "<p>Returns a full list of Report Types. (Requires a <a href=\"https://stripe.com/docs/keys#test-live-modes\">live-mode API key</a>.)</p>",
        "operationId": "GetReportingReportTypes",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/reporting.report_type"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "FinancialReportingFinanceReportTypeList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/reporting/report_types/{report_type}": {
      "get": {
        "description": "<p>Retrieves the details of a Report Type. (Requires a <a href=\"https://stripe.com/docs/keys#test-live-modes\">live-mode API key</a>.)</p>",
        "operationId": "GetReportingReportTypesReportType",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types) to retrieve, such as `balance.summary.1`.",
            "in": "path",
            "name": "report_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reporting.report_type"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/reviews": {
      "get": {
        "description": "<p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>",
        "operationId": "GetReviews",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/review"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/reviews",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/reviews/{review}": {
      "get": {
        "description": "<p>Retrieves a <code>Review</code> object.</p>",
        "operationId": "GetReviewsReview",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the review to be retrieved.",
            "in": "path",
            "name": "review",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/review"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/reviews/{review}/approve": {
      "post": {
        "description": "<p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>",
        "operationId": "PostReviewsReviewApprove",
        "parameters": [
          {
            "description": "The identifier of the review to be approved.",
            "in": "path",
            "name": "review",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/review"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/setup_intents": {
      "get": {
        "description": "<p>Returns a list of SetupIntents.</p>",
        "operationId": "GetSetupIntents",
        "parameters": [
          {
            "description": "A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return SetupIntents for the customer specified by this customer ID.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return SetupIntents associated with the specified payment method.",
            "in": "query",
            "name": "payment_method",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/setup_intent"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/setup_intents",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "PaymentFlowsSetupIntentList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a SetupIntent object.</p>\n\n<p>After the SetupIntent is created, attach a payment method and <a href=\"/docs/api/setup_intents/confirm\">confirm</a>\nto collect any required permissions to charge the payment method later.</p>",
        "operationId": "PostSetupIntents",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "mandate_data": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_options": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_types": {
                  "explode": true,
                  "style": "deepObject"
                },
                "single_use": {
                  "explode": true,
                  "style": "deepObject"
                },
                "usage": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "confirm": {
                    "description": "Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required.",
                    "type": "boolean"
                  },
                  "customer": {
                    "description": "ID of the Customer this SetupIntent belongs to, if one exists.\n\nIf present, payment methods used with this SetupIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this SetupIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 1000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "mandate_data": {
                    "description": "This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).",
                    "properties": {
                      "customer_acceptance": {
                        "properties": {
                          "accepted_at": {
                            "format": "unix-time",
                            "type": "integer"
                          },
                          "offline": {
                            "properties": {},
                            "title": "offline_param",
                            "type": "object"
                          },
                          "online": {
                            "properties": {
                              "ip_address": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "user_agent": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["ip_address", "user_agent"],
                            "title": "online_param",
                            "type": "object"
                          },
                          "type": {
                            "enum": ["offline", "online"],
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["type"],
                        "title": "customer_acceptance_param",
                        "type": "object"
                      }
                    },
                    "required": ["customer_acceptance"],
                    "title": "secret_key_param",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "on_behalf_of": {
                    "description": "The Stripe account ID for which this SetupIntent is created.",
                    "type": "string"
                  },
                  "payment_method": {
                    "description": "ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "payment_method_options": {
                    "description": "Payment-method-specific configuration for this SetupIntent.",
                    "properties": {
                      "card": {
                        "properties": {
                          "request_three_d_secure": {
                            "enum": ["any", "automatic"],
                            "maxLength": 5000,
                            "type": "string",
                            "x-stripeBypassValidation": true
                          }
                        },
                        "title": "setup_intent_param",
                        "type": "object"
                      }
                    },
                    "title": "payment_method_options_param",
                    "type": "object"
                  },
                  "payment_method_types": {
                    "description": "The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to [\"card\"].",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "return_url": {
                    "description": "The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).",
                    "type": "string"
                  },
                  "single_use": {
                    "description": "If this hash is populated, this SetupIntent will generate a single_use Mandate on success.",
                    "properties": {
                      "amount": {
                        "type": "integer"
                      },
                      "currency": {
                        "type": "string"
                      }
                    },
                    "required": ["amount", "currency"],
                    "title": "setup_intent_single_use_params",
                    "type": "object"
                  },
                  "usage": {
                    "anyOf": [
                      {
                        "enum": ["off_session", "on_session"],
                        "type": "string"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/setup_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/setup_intents/{intent}": {
      "get": {
        "description": "<p>Retrieves the details of a SetupIntent that has previously been created. </p>\n\n<p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>\n\n<p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href=\"#setup_intent_object\">SetupIntent</a> object reference for more details.</p>",
        "operationId": "GetSetupIntentsIntent",
        "parameters": [
          {
            "description": "The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent.",
            "in": "query",
            "name": "client_secret",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of the SetupIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/setup_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates a SetupIntent object.</p>",
        "operationId": "PostSetupIntentsIntent",
        "parameters": [
          {
            "description": "ID of the SetupIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_types": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "customer": {
                    "description": "ID of the Customer this SetupIntent belongs to, if one exists.\n\nIf present, payment methods used with this SetupIntent can only be attached to this Customer, and payment methods attached to other Customers cannot be used with this SetupIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 1000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "payment_method": {
                    "description": "ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "payment_method_types": {
                    "description": "The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to [\"card\"].",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/setup_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/setup_intents/{intent}/cancel": {
      "post": {
        "description": "<p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>\n\n<p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>",
        "operationId": "PostSetupIntentsIntentCancel",
        "parameters": [
          {
            "description": "ID of the SetupIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "cancellation_reason": {
                    "description": "Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate`",
                    "enum": ["abandoned", "duplicate", "requested_by_customer"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/setup_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/setup_intents/{intent}/confirm": {
      "post": {
        "description": "<p>Confirm that your customer intends to set up the current or\nprovided payment method. For example, you would confirm a SetupIntent\nwhen a customer hits the “Save” button on a payment method management\npage on your website.</p>\n\n<p>If the selected payment method does not require any additional\nsteps from the customer, the SetupIntent will transition to the\n<code>succeeded</code> status.</p>\n\n<p>Otherwise, it will transition to the <code>requires_action</code> status and\nsuggest additional actions via <code>next_action</code>. If setup fails,\nthe SetupIntent will transition to the\n<code>requires_payment_method</code> status.</p>",
        "operationId": "PostSetupIntentsIntentConfirm",
        "parameters": [
          {
            "description": "ID of the SetupIntent to retrieve.",
            "in": "path",
            "name": "intent",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "mandate_data": {
                  "explode": true,
                  "style": "deepObject"
                },
                "payment_method_options": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "client_secret": {
                    "description": "The client secret of the SetupIntent.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "mandate_data": {
                    "anyOf": [
                      {
                        "properties": {
                          "customer_acceptance": {
                            "properties": {
                              "accepted_at": {
                                "format": "unix-time",
                                "type": "integer"
                              },
                              "offline": {
                                "properties": {},
                                "title": "offline_param",
                                "type": "object"
                              },
                              "online": {
                                "properties": {
                                  "ip_address": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  },
                                  "user_agent": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  }
                                },
                                "required": ["ip_address", "user_agent"],
                                "title": "online_param",
                                "type": "object"
                              },
                              "type": {
                                "enum": ["offline", "online"],
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["type"],
                            "title": "customer_acceptance_param",
                            "type": "object"
                          }
                        },
                        "required": ["customer_acceptance"],
                        "title": "secret_key_param",
                        "type": "object"
                      },
                      {
                        "properties": {
                          "customer_acceptance": {
                            "properties": {
                              "online": {
                                "properties": {
                                  "ip_address": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  },
                                  "user_agent": {
                                    "maxLength": 5000,
                                    "type": "string"
                                  }
                                },
                                "title": "online_param",
                                "type": "object"
                              },
                              "type": {
                                "enum": ["online"],
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["online", "type"],
                            "title": "customer_acceptance_param",
                            "type": "object"
                          }
                        },
                        "required": ["customer_acceptance"],
                        "title": "client_key_param",
                        "type": "object"
                      }
                    ],
                    "description": "This hash contains details about the Mandate to create"
                  },
                  "payment_method": {
                    "description": "ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "payment_method_options": {
                    "description": "Payment-method-specific configuration for this SetupIntent.",
                    "properties": {
                      "card": {
                        "properties": {
                          "request_three_d_secure": {
                            "enum": ["any", "automatic"],
                            "maxLength": 5000,
                            "type": "string",
                            "x-stripeBypassValidation": true
                          }
                        },
                        "title": "setup_intent_param",
                        "type": "object"
                      }
                    },
                    "title": "payment_method_options_param",
                    "type": "object"
                  },
                  "return_url": {
                    "description": "The URL to redirect your customer back to after they authenticate on the payment method's app or site.\nIf you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.\nThis parameter is only used for cards and other redirect-based payment methods.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/setup_intent"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sigma/scheduled_query_runs": {
      "get": {
        "description": "<p>Returns a list of scheduled query runs.</p>",
        "operationId": "GetSigmaScheduledQueryRuns",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/scheduled_query_run"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/sigma/scheduled_query_runs",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sigma/scheduled_query_runs/{scheduled_query_run}": {
      "get": {
        "description": "<p>Retrieves the details of an scheduled query run.</p>",
        "operationId": "GetSigmaScheduledQueryRunsScheduledQueryRun",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Unique identifier for the object.",
            "in": "path",
            "name": "scheduled_query_run",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduled_query_run"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/skus": {
      "get": {
        "description": "<p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>",
        "operationId": "GetSkus",
        "parameters": [
          {
            "description": "Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products).",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `[\"color\", \"size\"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`.",
            "explode": true,
            "in": "query",
            "name": "attributes",
            "required": false,
            "schema": {
              "additionalProperties": {
                "maxLength": 500,
                "type": "string"
              },
              "type": "object"
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return SKUs with the given IDs.",
            "explode": true,
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.",
            "in": "query",
            "name": "in_stock",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The ID of the product whose SKUs will be retrieved. Must be a product with type `good`.",
            "in": "query",
            "name": "product",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/sku"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/skus",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new SKU associated with a product.</p>",
        "operationId": "PostSkus",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "attributes": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "inventory": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "package_dimensions": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Whether the SKU is available for purchase. Default to `true`.",
                    "type": "boolean"
                  },
                  "attributes": {
                    "additionalProperties": {
                      "maxLength": 500,
                      "type": "string"
                    },
                    "description": "A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `[\"size\", \"gender\"]`, a valid SKU has the following dictionary of attributes: `{\"size\": \"Medium\", \"gender\": \"Unisex\"}`.",
                    "type": "object"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.",
                    "type": "string"
                  },
                  "image": {
                    "description": "The URL of an image for this SKU, meant to be displayable to the customer.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "inventory": {
                    "description": "Description of the SKU's inventory.",
                    "properties": {
                      "quantity": {
                        "type": "integer"
                      },
                      "type": {
                        "enum": ["bucket", "finite", "infinite"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "value": {
                        "enum": ["", "in_stock", "limited", "out_of_stock"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "inventory_specs",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.",
                    "type": "object"
                  },
                  "package_dimensions": {
                    "description": "The dimensions of this SKU for shipping purposes.",
                    "properties": {
                      "height": {
                        "type": "number"
                      },
                      "length": {
                        "type": "number"
                      },
                      "weight": {
                        "type": "number"
                      },
                      "width": {
                        "type": "number"
                      }
                    },
                    "required": ["height", "length", "weight", "width"],
                    "title": "package_dimensions_specs",
                    "type": "object"
                  },
                  "price": {
                    "description": "The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).",
                    "type": "integer"
                  },
                  "product": {
                    "description": "The ID of the product this SKU is associated with. Must be a product with type `good`.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["currency", "inventory", "price", "product"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sku"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/skus/{id}": {
      "delete": {
        "description": "<p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>",
        "operationId": "DeleteSkusId",
        "parameters": [
          {
            "description": "The identifier of the SKU to be deleted.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_sku"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>",
        "operationId": "GetSkusId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the SKU to be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/sku"
                    },
                    {
                      "$ref": "#/components/schemas/deleted_sku"
                    }
                  ]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>\n\n<p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>",
        "operationId": "PostSkusId",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "attributes": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "inventory": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "package_dimensions": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Whether this SKU is available for purchase.",
                    "type": "boolean"
                  },
                  "attributes": {
                    "additionalProperties": {
                      "maxLength": 500,
                      "type": "string"
                    },
                    "description": "A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product.",
                    "type": "object"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "image": {
                    "description": "The URL of an image for this SKU, meant to be displayable to the customer.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "inventory": {
                    "description": "Description of the SKU's inventory.",
                    "properties": {
                      "quantity": {
                        "type": "integer"
                      },
                      "type": {
                        "enum": ["bucket", "finite", "infinite"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "value": {
                        "enum": ["", "in_stock", "limited", "out_of_stock"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "inventory_update_specs",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.",
                    "type": "object"
                  },
                  "package_dimensions": {
                    "anyOf": [
                      {
                        "properties": {
                          "height": {
                            "type": "number"
                          },
                          "length": {
                            "type": "number"
                          },
                          "weight": {
                            "type": "number"
                          },
                          "width": {
                            "type": "number"
                          }
                        },
                        "required": ["height", "length", "weight", "width"],
                        "title": "package_dimensions_specs",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The dimensions of this SKU for shipping purposes."
                  },
                  "price": {
                    "description": "The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).",
                    "type": "integer"
                  },
                  "product": {
                    "description": "The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sku"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sources": {
      "post": {
        "description": "<p>Creates a new source object.</p>",
        "operationId": "PostSources",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "mandate": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "owner": {
                  "explode": true,
                  "style": "deepObject"
                },
                "receiver": {
                  "explode": true,
                  "style": "deepObject"
                },
                "redirect": {
                  "explode": true,
                  "style": "deepObject"
                },
                "source_order": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.",
                    "type": "string"
                  },
                  "customer": {
                    "description": "The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).",
                    "maxLength": 500,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "flow": {
                    "description": "The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.",
                    "enum": [
                      "code_verification",
                      "none",
                      "receiver",
                      "redirect"
                    ],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "mandate": {
                    "description": "Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.",
                    "properties": {
                      "acceptance": {
                        "properties": {
                          "date": {
                            "format": "unix-time",
                            "type": "integer"
                          },
                          "ip": {
                            "type": "string"
                          },
                          "offline": {
                            "properties": {
                              "contact_email": {
                                "type": "string"
                              }
                            },
                            "required": ["contact_email"],
                            "title": "mandate_offline_acceptance_params",
                            "type": "object"
                          },
                          "online": {
                            "properties": {
                              "date": {
                                "format": "unix-time",
                                "type": "integer"
                              },
                              "ip": {
                                "type": "string"
                              },
                              "user_agent": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "mandate_online_acceptance_params",
                            "type": "object"
                          },
                          "status": {
                            "enum": [
                              "accepted",
                              "pending",
                              "refused",
                              "revoked"
                            ],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "type": {
                            "enum": ["offline", "online"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "user_agent": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["status"],
                        "title": "mandate_acceptance_params",
                        "type": "object"
                      },
                      "amount": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "currency": {
                        "type": "string"
                      },
                      "interval": {
                        "enum": ["one_time", "scheduled", "variable"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "notification_method": {
                        "enum": [
                          "deprecated_none",
                          "email",
                          "manual",
                          "none",
                          "stripe_email"
                        ],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "mandate_params",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a source object. It can be useful for storing additional information about the source in a structured format.",
                    "type": "object"
                  },
                  "original_source": {
                    "description": "The source to share.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "owner": {
                    "description": "Information about the owner of the payment instrument that may be used or required by particular source types.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "source_address",
                        "type": "object"
                      },
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "owner",
                    "type": "object"
                  },
                  "receiver": {
                    "description": "Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).",
                    "properties": {
                      "refund_attributes_method": {
                        "enum": ["email", "manual", "none"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "receiver_params",
                    "type": "object"
                  },
                  "redirect": {
                    "description": "Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).",
                    "properties": {
                      "return_url": {
                        "type": "string"
                      }
                    },
                    "required": ["return_url"],
                    "title": "redirect_params",
                    "type": "object"
                  },
                  "source_order": {
                    "description": "Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.",
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer"
                            },
                            "currency": {
                              "type": "string"
                            },
                            "description": {
                              "maxLength": 1000,
                              "type": "string"
                            },
                            "parent": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "quantity": {
                              "type": "integer"
                            },
                            "type": {
                              "enum": ["discount", "shipping", "sku", "tax"],
                              "maxLength": 5000,
                              "type": "string"
                            }
                          },
                          "title": "order_item_specs",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "shipping": {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["line1"],
                            "title": "address",
                            "type": "object"
                          },
                          "carrier": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "tracking_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["address"],
                        "title": "order_shipping",
                        "type": "object"
                      }
                    },
                    "title": "shallow_order_specs",
                    "type": "object"
                  },
                  "statement_descriptor": {
                    "description": "An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "token": {
                    "description": "An optional token used to create the source. When passed, token properties will override source parameters.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "type": {
                    "description": "The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "usage": {
                    "enum": ["reusable", "single_use"],
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sources/{source}": {
      "get": {
        "description": "<p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>",
        "operationId": "GetSourcesSource",
        "parameters": [
          {
            "description": "The client secret of the source. Required if a publishable key is used to retrieve the source.",
            "in": "query",
            "name": "client_secret",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the source to be retrieved.",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>\n\n<p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href=\"/docs/sources\">payment method guides</a> for more detail.</p>",
        "operationId": "PostSourcesSource",
        "parameters": [
          {
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "mandate": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "owner": {
                  "explode": true,
                  "style": "deepObject"
                },
                "source_order": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Amount associated with the source.",
                    "type": "integer"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "mandate": {
                    "description": "Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.",
                    "properties": {
                      "acceptance": {
                        "properties": {
                          "date": {
                            "format": "unix-time",
                            "type": "integer"
                          },
                          "ip": {
                            "type": "string"
                          },
                          "offline": {
                            "properties": {
                              "contact_email": {
                                "type": "string"
                              }
                            },
                            "required": ["contact_email"],
                            "title": "mandate_offline_acceptance_params",
                            "type": "object"
                          },
                          "online": {
                            "properties": {
                              "date": {
                                "format": "unix-time",
                                "type": "integer"
                              },
                              "ip": {
                                "type": "string"
                              },
                              "user_agent": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "mandate_online_acceptance_params",
                            "type": "object"
                          },
                          "status": {
                            "enum": [
                              "accepted",
                              "pending",
                              "refused",
                              "revoked"
                            ],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "type": {
                            "enum": ["offline", "online"],
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "user_agent": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["status"],
                        "title": "mandate_acceptance_params",
                        "type": "object"
                      },
                      "amount": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "currency": {
                        "type": "string"
                      },
                      "interval": {
                        "enum": ["one_time", "scheduled", "variable"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "notification_method": {
                        "enum": [
                          "deprecated_none",
                          "email",
                          "manual",
                          "none",
                          "stripe_email"
                        ],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "mandate_params",
                    "type": "object"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a source object. It can be useful for storing additional information about the source in a structured format.",
                    "type": "object"
                  },
                  "owner": {
                    "description": "Information about the owner of the payment instrument that may be used or required by particular source types.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "source_address",
                        "type": "object"
                      },
                      "email": {
                        "type": "string"
                      },
                      "name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "phone": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "owner",
                    "type": "object"
                  },
                  "source_order": {
                    "description": "Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.",
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "amount": {
                              "type": "integer"
                            },
                            "currency": {
                              "type": "string"
                            },
                            "description": {
                              "maxLength": 1000,
                              "type": "string"
                            },
                            "parent": {
                              "maxLength": 5000,
                              "type": "string"
                            },
                            "quantity": {
                              "type": "integer"
                            },
                            "type": {
                              "enum": ["discount", "shipping", "sku", "tax"],
                              "maxLength": 5000,
                              "type": "string"
                            }
                          },
                          "title": "order_item_specs",
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "shipping": {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "required": ["line1"],
                            "title": "address",
                            "type": "object"
                          },
                          "carrier": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "tracking_number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["address"],
                        "title": "order_shipping",
                        "type": "object"
                      }
                    },
                    "title": "order_params",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sources/{source}/mandate_notifications/{mandate_notification}": {
      "get": {
        "description": "<p>Retrieves a new Source MandateNotification.</p>",
        "operationId": "GetSourcesSourceMandateNotificationsMandateNotification",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the Source MandateNotification.",
            "in": "path",
            "name": "mandate_notification",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the Source that received a ManateNotification.",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/source_mandate_notification"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sources/{source}/source_transactions": {
      "get": {
        "description": "<p>List source transactions for a given source.</p>",
        "operationId": "GetSourcesSourceSourceTransactions",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The ID of the source whose source transactions will be retrieved.",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/source_transaction"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "ApmsSourcesSourceTransactionList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sources/{source}/source_transactions/{source_transaction}": {
      "get": {
        "description": "<p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>",
        "operationId": "GetSourcesSourceSourceTransactionsSourceTransaction",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the source whose source transaction will be retrieved.",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The ID of the source transaction that will be retrieved.",
            "in": "path",
            "name": "source_transaction",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/source_transaction"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/sources/{source}/verify": {
      "post": {
        "description": "<p>Verify a given source.</p>",
        "operationId": "PostSourcesSourceVerify",
        "parameters": [
          {
            "description": "The ID of the desired source.",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "values": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "values": {
                    "description": "The values needed to verify the source.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": ["values"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/source"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_items": {
      "get": {
        "description": "<p>Returns a list of your subscription items for a given subscription.</p>",
        "operationId": "GetSubscriptionItems",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The ID of the subscription whose items will be retrieved.",
            "in": "query",
            "name": "subscription",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/subscription_item"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/subscription_items",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>",
        "operationId": "PostSubscriptionItems",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_thresholds": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "usage_gte": {
                            "type": "integer"
                          }
                        },
                        "required": ["usage_gte"],
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds."
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "payment_behavior": {
                    "description": "Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n\nUse `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.",
                    "enum": [
                      "allow_incomplete",
                      "error_if_incomplete",
                      "pending_if_incomplete"
                    ],
                    "type": "string"
                  },
                  "plan": {
                    "description": "The identifier of the plan to add to the subscription.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "prorate": {
                    "description": "Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.",
                    "type": "boolean"
                  },
                  "proration_date": {
                    "description": "If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "quantity": {
                    "description": "The quantity you'd like to apply to the subscription item you're creating.",
                    "type": "integer"
                  },
                  "subscription": {
                    "description": "The identifier of the subscription to modify.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates."
                  }
                },
                "required": ["plan", "subscription"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_item"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_items/{item}": {
      "delete": {
        "description": "<p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>",
        "operationId": "DeleteSubscriptionItemsItem",
        "parameters": [
          {
            "description": "The identifier of the subscription item to delete.",
            "in": "path",
            "name": "item",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "clear_usage": {
                    "description": "Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`.",
                    "type": "boolean"
                  },
                  "prorate": {
                    "description": "Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.",
                    "type": "boolean"
                  },
                  "proration_date": {
                    "description": "If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.",
                    "format": "unix-time",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_subscription_item"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the invoice item with the given ID.</p>",
        "operationId": "GetSubscriptionItemsItem",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the subscription item to retrieve.",
            "in": "path",
            "name": "item",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_item"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the plan or quantity of an item on a current subscription.</p>",
        "operationId": "PostSubscriptionItemsItem",
        "parameters": [
          {
            "description": "The identifier of the subscription item to modify.",
            "in": "path",
            "name": "item",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_thresholds": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "usage_gte": {
                            "type": "integer"
                          }
                        },
                        "required": ["usage_gte"],
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds."
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "off_session": {
                    "type": "boolean"
                  },
                  "payment_behavior": {
                    "description": "Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n\nUse `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.",
                    "enum": [
                      "allow_incomplete",
                      "error_if_incomplete",
                      "pending_if_incomplete"
                    ],
                    "type": "string"
                  },
                  "plan": {
                    "description": "The identifier of the new plan for this subscription item.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "prorate": {
                    "description": "Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.",
                    "type": "boolean"
                  },
                  "proration_date": {
                    "description": "If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "quantity": {
                    "description": "The quantity you'd like to apply to the subscription item you're creating.",
                    "type": "integer"
                  },
                  "tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_item"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_items/{subscription_item}/usage_record_summaries": {
      "get": {
        "description": "<p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the billing plan’s month of September).</p>\n\n<p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>",
        "operationId": "GetSubscriptionItemsSubscriptionItemUsageRecordSummaries",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only summary items for the given subscription item.",
            "in": "path",
            "name": "subscription_item",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/usage_record_summary"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_items/{subscription_item}/usage_records": {
      "post": {
        "description": "<p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>\n\n<p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href=\"https://stripe.com/docs/billing/subscriptions/metered-billing\">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>\n\n<p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href=\"https://stripe.com/docs/api/plans/create#create_plan-aggregate_usage\">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>\n\n<p>The default pricing model for metered billing is <a href=\"https://stripe.com/docs/api/plans/object#plan_object-billing_scheme\">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href=\"https://stripe.com/docs/billing/subscriptions/tiers\">tiered pricing</a> model.</p>",
        "operationId": "PostSubscriptionItemsSubscriptionItemUsageRecords",
        "parameters": [
          {
            "description": "The ID of the subscription item for this usage record.",
            "in": "path",
            "name": "subscription_item",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "action": {
                    "description": "Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.",
                    "enum": ["increment", "set"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "quantity": {
                    "description": "The usage quantity for the specified timestamp.",
                    "type": "integer"
                  },
                  "timestamp": {
                    "description": "The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`.",
                    "type": "integer"
                  }
                },
                "required": ["quantity", "timestamp"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usage_record"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_schedules": {
      "get": {
        "description": "<p>Retrieves the list of your subscription schedules.</p>",
        "operationId": "GetSubscriptionSchedules",
        "parameters": [
          {
            "description": "Only return subscription schedules that were created canceled the given date interval.",
            "explode": true,
            "in": "query",
            "name": "canceled_at",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return subscription schedules that completed during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "completed_at",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return subscription schedules that were created during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return subscription schedules for the given customer.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Only return subscription schedules that were released during the given date interval.",
            "explode": true,
            "in": "query",
            "name": "released_at",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return subscription schedules that have not started yet.",
            "in": "query",
            "name": "scheduled",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/subscription_schedule"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/subscription_schedules",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new subscription schedule object.</p>",
        "operationId": "PostSubscriptionSchedules",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "default_settings": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "phases": {
                  "explode": true,
                  "style": "deepObject"
                },
                "start_date": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "customer": {
                    "description": "The identifier of the customer to create the subscription schedule for.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_settings": {
                    "description": "Object representing the subscription schedule's default settings.",
                    "properties": {
                      "billing_thresholds": {
                        "anyOf": [
                          {
                            "properties": {
                              "amount_gte": {
                                "type": "integer"
                              },
                              "reset_billing_cycle_anchor": {
                                "type": "boolean"
                              }
                            },
                            "title": "billing_thresholds_param",
                            "type": "object"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "collection_method": {
                        "enum": ["charge_automatically", "send_invoice"],
                        "type": "string"
                      },
                      "default_payment_method": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "invoice_settings": {
                        "properties": {
                          "days_until_due": {
                            "type": "integer"
                          }
                        },
                        "title": "subscription_schedules_param",
                        "type": "object"
                      }
                    },
                    "title": "default_settings_params",
                    "type": "object"
                  },
                  "end_behavior": {
                    "description": "Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.",
                    "enum": ["cancel", "none", "release", "renew"],
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "from_subscription": {
                    "description": "Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's plan(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "phases": {
                    "description": "List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.",
                    "items": {
                      "properties": {
                        "application_fee_percent": {
                          "type": "number"
                        },
                        "billing_thresholds": {
                          "anyOf": [
                            {
                              "properties": {
                                "amount_gte": {
                                  "type": "integer"
                                },
                                "reset_billing_cycle_anchor": {
                                  "type": "boolean"
                                }
                              },
                              "title": "billing_thresholds_param",
                              "type": "object"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "collection_method": {
                          "enum": ["charge_automatically", "send_invoice"],
                          "type": "string"
                        },
                        "coupon": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "default_payment_method": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "default_tax_rates": {
                          "anyOf": [
                            {
                              "items": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "end_date": {
                          "format": "unix-time",
                          "type": "integer"
                        },
                        "invoice_settings": {
                          "properties": {
                            "days_until_due": {
                              "type": "integer"
                            }
                          },
                          "title": "subscription_schedules_param",
                          "type": "object"
                        },
                        "iterations": {
                          "type": "integer"
                        },
                        "plans": {
                          "items": {
                            "properties": {
                              "billing_thresholds": {
                                "anyOf": [
                                  {
                                    "properties": {
                                      "usage_gte": {
                                        "type": "integer"
                                      }
                                    },
                                    "required": ["usage_gte"],
                                    "title": "billing_thresholds_param",
                                    "type": "object"
                                  },
                                  {
                                    "enum": [""],
                                    "type": "string"
                                  }
                                ]
                              },
                              "plan": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "quantity": {
                                "type": "integer"
                              },
                              "tax_rates": {
                                "anyOf": [
                                  {
                                    "items": {
                                      "maxLength": 5000,
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "enum": [""],
                                    "type": "string"
                                  }
                                ]
                              }
                            },
                            "required": ["plan"],
                            "title": "configuration_item_params",
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "tax_percent": {
                          "type": "number"
                        },
                        "trial": {
                          "type": "boolean"
                        },
                        "trial_end": {
                          "format": "unix-time",
                          "type": "integer"
                        }
                      },
                      "required": ["plans"],
                      "title": "phase_configuration_params",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "start_date": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "enum": ["now"],
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "description": "When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on. When you backdate, the `billing_cycle_anchor` of the subscription is equivalent to the `start_date`."
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_schedule"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_schedules/{schedule}": {
      "get": {
        "description": "<p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>",
        "operationId": "GetSubscriptionSchedulesSchedule",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the subscription schedule to be retrieved.",
            "in": "path",
            "name": "schedule",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_schedule"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing subscription schedule.</p>",
        "operationId": "PostSubscriptionSchedulesSchedule",
        "parameters": [
          {
            "in": "path",
            "name": "schedule",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "default_settings": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "phases": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "default_settings": {
                    "description": "Object representing the subscription schedule's default settings.",
                    "properties": {
                      "billing_thresholds": {
                        "anyOf": [
                          {
                            "properties": {
                              "amount_gte": {
                                "type": "integer"
                              },
                              "reset_billing_cycle_anchor": {
                                "type": "boolean"
                              }
                            },
                            "title": "billing_thresholds_param",
                            "type": "object"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "collection_method": {
                        "enum": ["charge_automatically", "send_invoice"],
                        "type": "string"
                      },
                      "default_payment_method": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "invoice_settings": {
                        "properties": {
                          "days_until_due": {
                            "type": "integer"
                          }
                        },
                        "title": "subscription_schedules_param",
                        "type": "object"
                      }
                    },
                    "title": "default_settings_params",
                    "type": "object"
                  },
                  "end_behavior": {
                    "description": "Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.",
                    "enum": ["cancel", "none", "release", "renew"],
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "phases": {
                    "description": "List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.",
                    "items": {
                      "properties": {
                        "application_fee_percent": {
                          "type": "number"
                        },
                        "billing_thresholds": {
                          "anyOf": [
                            {
                              "properties": {
                                "amount_gte": {
                                  "type": "integer"
                                },
                                "reset_billing_cycle_anchor": {
                                  "type": "boolean"
                                }
                              },
                              "title": "billing_thresholds_param",
                              "type": "object"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "collection_method": {
                          "enum": ["charge_automatically", "send_invoice"],
                          "type": "string"
                        },
                        "coupon": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "default_payment_method": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "default_tax_rates": {
                          "anyOf": [
                            {
                              "items": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "end_date": {
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "enum": ["now"],
                              "maxLength": 5000,
                              "type": "string"
                            }
                          ]
                        },
                        "invoice_settings": {
                          "properties": {
                            "days_until_due": {
                              "type": "integer"
                            }
                          },
                          "title": "subscription_schedules_param",
                          "type": "object"
                        },
                        "iterations": {
                          "type": "integer"
                        },
                        "plans": {
                          "items": {
                            "properties": {
                              "billing_thresholds": {
                                "anyOf": [
                                  {
                                    "properties": {
                                      "usage_gte": {
                                        "type": "integer"
                                      }
                                    },
                                    "required": ["usage_gte"],
                                    "title": "billing_thresholds_param",
                                    "type": "object"
                                  },
                                  {
                                    "enum": [""],
                                    "type": "string"
                                  }
                                ]
                              },
                              "plan": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "quantity": {
                                "type": "integer"
                              },
                              "tax_rates": {
                                "anyOf": [
                                  {
                                    "items": {
                                      "maxLength": 5000,
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "enum": [""],
                                    "type": "string"
                                  }
                                ]
                              }
                            },
                            "required": ["plan"],
                            "title": "configuration_item_params",
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "start_date": {
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "enum": ["now"],
                              "maxLength": 5000,
                              "type": "string"
                            }
                          ]
                        },
                        "tax_percent": {
                          "type": "number"
                        },
                        "trial": {
                          "type": "boolean"
                        },
                        "trial_end": {
                          "anyOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "enum": ["now"],
                              "maxLength": 5000,
                              "type": "string"
                            }
                          ]
                        }
                      },
                      "required": ["plans"],
                      "title": "phase_configuration_params",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "prorate": {
                    "description": "If the update changes the current phase, indicates if the changes should be prorated. Defaults to `true`.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_schedule"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_schedules/{schedule}/cancel": {
      "post": {
        "description": "<p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>",
        "operationId": "PostSubscriptionSchedulesScheduleCancel",
        "parameters": [
          {
            "description": "The identifier of the subscription schedule to be canceled.",
            "in": "path",
            "name": "schedule",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "invoice_now": {
                    "description": "If the subscription schedule is `active`, indicates whether or not to generate a final invoice that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.",
                    "type": "boolean"
                  },
                  "prorate": {
                    "description": "If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_schedule"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscription_schedules/{schedule}/release": {
      "post": {
        "description": "<p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>",
        "operationId": "PostSubscriptionSchedulesScheduleRelease",
        "parameters": [
          {
            "description": "The identifier of the subscription schedule to be released.",
            "in": "path",
            "name": "schedule",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "preserve_cancel_date": {
                    "description": "Keep any cancellation on the subscription that the schedule has set",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_schedule"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscriptions": {
      "get": {
        "description": "<p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>",
        "operationId": "GetSubscriptions",
        "parameters": [
          {
            "description": "The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.",
            "in": "query",
            "name": "collection_method",
            "required": false,
            "schema": {
              "enum": ["charge_automatically", "send_invoice"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "explode": true,
            "in": "query",
            "name": "current_period_end",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "explode": true,
            "in": "query",
            "name": "current_period_start",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the customer whose subscriptions will be retrieved.",
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The ID of the plan whose subscriptions will be retrieved.",
            "in": "query",
            "name": "plan",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The status of the subscriptions to retrieve. One of: `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `unpaid`, `canceled`, or `all`. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Passing in a value of `all` will return subscriptions of all statuses.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "all",
                "canceled",
                "ended",
                "incomplete",
                "incomplete_expired",
                "past_due",
                "trialing",
                "unpaid"
              ],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/subscription"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/subscriptions",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new subscription on an existing customer.</p>",
        "operationId": "PostSubscriptions",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_thresholds": {
                  "explode": true,
                  "style": "deepObject"
                },
                "default_tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "pending_invoice_item_interval": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_percent": {
                  "explode": true,
                  "style": "deepObject"
                },
                "trial_end": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "application_fee_percent": {
                    "description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).",
                    "type": "number"
                  },
                  "backdate_start_date": {
                    "description": "For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "billing_cycle_anchor": {
                    "description": "A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.",
                    "format": "unix-time",
                    "type": "integer",
                    "x-stripeBypassValidation": true
                  },
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "amount_gte": {
                            "type": "integer"
                          },
                          "reset_billing_cycle_anchor": {
                            "type": "boolean"
                          }
                        },
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."
                  },
                  "cancel_at": {
                    "description": "A timestamp at which the subscription should cancel. If set to a date before the current period ends this will cause a proration if `prorate=true`.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "cancel_at_period_end": {
                    "description": "Boolean indicating whether this subscription should cancel at the end of the current period.",
                    "type": "boolean"
                  },
                  "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.",
                    "enum": ["charge_automatically", "send_invoice"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "coupon": {
                    "description": "The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "customer": {
                    "description": "The identifier of the customer to subscribe.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "days_until_due": {
                    "description": "Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.",
                    "type": "integer"
                  },
                  "default_payment_method": {
                    "description": "ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_source": {
                    "description": "ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription."
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "description": "List of subscription items, each with an attached plan.",
                    "items": {
                      "properties": {
                        "billing_thresholds": {
                          "anyOf": [
                            {
                              "properties": {
                                "usage_gte": {
                                  "type": "integer"
                                }
                              },
                              "required": ["usage_gte"],
                              "title": "billing_thresholds_param",
                              "type": "object"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "metadata": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        },
                        "plan": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "tax_rates": {
                          "anyOf": [
                            {
                              "items": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        }
                      },
                      "required": ["plan"],
                      "title": "subscription_item_create_params",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a `Subscription` object. It can be useful for storing additional information about the subscription in a structured format.",
                    "type": "object"
                  },
                  "off_session": {
                    "description": "Indicates if a customer is on or off-session while an invoice payment is attempted.",
                    "type": "boolean"
                  },
                  "payment_behavior": {
                    "description": "Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n\nUse `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.",
                    "enum": [
                      "allow_incomplete",
                      "error_if_incomplete",
                      "pending_if_incomplete"
                    ],
                    "type": "string"
                  },
                  "pending_invoice_item_interval": {
                    "anyOf": [
                      {
                        "properties": {
                          "interval": {
                            "enum": ["day", "month", "week", "year"],
                            "type": "string"
                          },
                          "interval_count": {
                            "type": "integer"
                          }
                        },
                        "required": ["interval"],
                        "title": "pending_invoice_item_interval_params",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."
                  },
                  "prorate": {
                    "description": "Boolean (defaults to `true`) telling us whether to [credit for unused time](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g. when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. If `false`, the anchor period will be free (similar to a trial) and no proration adjustments will be created.",
                    "type": "boolean"
                  },
                  "tax_percent": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`."
                  },
                  "trial_end": {
                    "anyOf": [
                      {
                        "enum": ["now"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    ],
                    "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."
                  },
                  "trial_from_plan": {
                    "description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed.",
                    "type": "boolean"
                  },
                  "trial_period_days": {
                    "description": "Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan.",
                    "type": "integer"
                  }
                },
                "required": ["customer"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscriptions/{subscription_exposed_id}": {
      "delete": {
        "description": "<p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>\n\n<p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href=\"#delete_invoiceitem\">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>\n\n<p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>",
        "operationId": "DeleteSubscriptionsSubscriptionExposedId",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "invoice_now": {
                    "description": "Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items.",
                    "type": "boolean"
                  },
                  "prorate": {
                    "description": "Will generate a proration invoice item that credits remaining unused time until the subscription period end.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the subscription with the given ID.</p>",
        "operationId": "GetSubscriptionsSubscriptionExposedId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href=\"#upcoming_invoice\">upcoming invoice</a> endpoint.</p>",
        "operationId": "PostSubscriptionsSubscriptionExposedId",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "billing_thresholds": {
                  "explode": true,
                  "style": "deepObject"
                },
                "cancel_at": {
                  "explode": true,
                  "style": "deepObject"
                },
                "default_tax_rates": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "items": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                },
                "pending_invoice_item_interval": {
                  "explode": true,
                  "style": "deepObject"
                },
                "tax_percent": {
                  "explode": true,
                  "style": "deepObject"
                },
                "trial_end": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "application_fee_percent": {
                    "description": "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).",
                    "type": "number"
                  },
                  "billing_cycle_anchor": {
                    "description": "Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).",
                    "enum": ["now", "unchanged"],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "billing_thresholds": {
                    "anyOf": [
                      {
                        "properties": {
                          "amount_gte": {
                            "type": "integer"
                          },
                          "reset_billing_cycle_anchor": {
                            "type": "boolean"
                          }
                        },
                        "title": "billing_thresholds_param",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."
                  },
                  "cancel_at": {
                    "anyOf": [
                      {
                        "format": "unix-time",
                        "type": "integer"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A timestamp at which the subscription should cancel. If set to a date before the current period ends this will cause a proration if `prorate=true`."
                  },
                  "cancel_at_period_end": {
                    "description": "Boolean indicating whether this subscription should cancel at the end of the current period.",
                    "type": "boolean"
                  },
                  "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.",
                    "enum": ["charge_automatically", "send_invoice"],
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "coupon": {
                    "description": "The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "days_until_due": {
                    "description": "Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.",
                    "type": "integer"
                  },
                  "default_payment_method": {
                    "description": "ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_source": {
                    "description": "ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "default_tax_rates": {
                    "anyOf": [
                      {
                        "items": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates."
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "items": {
                    "description": "List of subscription items, each with an attached plan.",
                    "items": {
                      "properties": {
                        "billing_thresholds": {
                          "anyOf": [
                            {
                              "properties": {
                                "usage_gte": {
                                  "type": "integer"
                                }
                              },
                              "required": ["usage_gte"],
                              "title": "billing_thresholds_param",
                              "type": "object"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        },
                        "clear_usage": {
                          "type": "boolean"
                        },
                        "deleted": {
                          "type": "boolean"
                        },
                        "id": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "metadata": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        },
                        "plan": {
                          "maxLength": 5000,
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "tax_rates": {
                          "anyOf": [
                            {
                              "items": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "enum": [""],
                              "type": "string"
                            }
                          ]
                        }
                      },
                      "title": "subscription_item_update_params",
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "A set of key-value pairs that you can attach to a subscription object. This can be useful for storing additional information about the subscription in a structured format.",
                    "type": "object"
                  },
                  "off_session": {
                    "description": "Indicates if a customer is on or off-session while an invoice payment is attempted.",
                    "type": "boolean"
                  },
                  "payment_behavior": {
                    "description": "Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n\nUse `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.",
                    "enum": [
                      "allow_incomplete",
                      "error_if_incomplete",
                      "pending_if_incomplete"
                    ],
                    "type": "string"
                  },
                  "pending_invoice_item_interval": {
                    "anyOf": [
                      {
                        "properties": {
                          "interval": {
                            "enum": ["day", "month", "week", "year"],
                            "type": "string"
                          },
                          "interval_count": {
                            "type": "integer"
                          }
                        },
                        "required": ["interval"],
                        "title": "pending_invoice_item_interval_params",
                        "type": "object"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."
                  },
                  "prorate": {
                    "description": "Boolean (defaults to `true`) telling us whether to [credit for unused time](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g. when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. If `false`, the anchor period will be free (similar to a trial) and no proration adjustments will be created.",
                    "type": "boolean"
                  },
                  "proration_date": {
                    "description": "If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.",
                    "format": "unix-time",
                    "type": "integer"
                  },
                  "tax_percent": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "enum": [""],
                        "type": "string"
                      }
                    ],
                    "description": "A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`."
                  },
                  "trial_end": {
                    "anyOf": [
                      {
                        "enum": ["now"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      {
                        "format": "unix-time",
                        "type": "integer"
                      }
                    ],
                    "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."
                  },
                  "trial_from_plan": {
                    "description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/subscriptions/{subscription_exposed_id}/discount": {
      "delete": {
        "description": "<p>Removes the currently applied discount on a subscription.</p>",
        "operationId": "DeleteSubscriptionsSubscriptionExposedIdDiscount",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_exposed_id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_discount"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/tax_rates": {
      "get": {
        "description": "<p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>",
        "operationId": "GetTaxRates",
        "parameters": [
          {
            "description": "Optional flag to filter by tax rates that are either active or not active (archived)",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Optional range for filtering created date",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "Optional flag to filter by tax rates that are inclusive (or those that are not inclusive)",
            "in": "query",
            "name": "inclusive",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/tax_rate"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/tax_rates",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new tax rate.</p>",
        "operationId": "PostTaxRates",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Flag determining whether the tax rate is active or inactive. Inactive tax rates continue to work where they are currently applied however they cannot be used for new applications.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the tax rate, which will be shown to users.",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "inclusive": {
                    "description": "This specifies if the tax rate is inclusive or exclusive.",
                    "type": "boolean"
                  },
                  "jurisdiction": {
                    "description": "The jurisdiction for the tax rate.",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "percentage": {
                    "description": "This represents the tax rate percent out of 100.",
                    "type": "number"
                  }
                },
                "required": ["display_name", "inclusive", "percentage"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_rate"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/tax_rates/{tax_rate}": {
      "get": {
        "description": "<p>Retrieves a tax rate with the given ID</p>",
        "operationId": "GetTaxRatesTaxRate",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the desired tax rate.",
            "in": "path",
            "name": "tax_rate",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_rate"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates an existing tax rate.</p>",
        "operationId": "PostTaxRatesTaxRate",
        "parameters": [
          {
            "description": "ID of the tax rate to update.",
            "in": "path",
            "name": "tax_rate",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "active": {
                    "description": "Flag determining whether the tax rate is active or inactive. Inactive tax rates continue to work where they are currently applied however they cannot be used for new applications.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "display_name": {
                    "description": "The display name of the tax rate, which will be shown to users.",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "jurisdiction": {
                    "description": "The jurisdiction for the tax rate.",
                    "maxLength": 50,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_rate"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/terminal/connection_tokens": {
      "post": {
        "description": "<p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>",
        "operationId": "PostTerminalConnectionTokens",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "location": {
                    "description": "The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terminal.connection_token"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/terminal/locations": {
      "get": {
        "description": "<p>Returns a list of <code>Location</code> objects.</p>",
        "operationId": "GetTerminalLocations",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/terminal.location"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/terminal/locations",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "TerminalLocationLocationList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new <code>Location</code> object.</p>",
        "operationId": "PostTerminalLocations",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "The full address of the location.",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["country"],
                    "title": "required_country_address",
                    "type": "object"
                  },
                  "display_name": {
                    "description": "A name for the location.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  }
                },
                "required": ["address", "display_name"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terminal.location"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/terminal/locations/{location}": {
      "delete": {
        "description": "<p>Deletes a <code>Location</code> object.</p>",
        "operationId": "DeleteTerminalLocationsLocation",
        "parameters": [
          {
            "description": "The identifier of the location to be deleted.",
            "in": "path",
            "name": "location",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_terminal.location"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves a <code>Location</code> object.</p>",
        "operationId": "GetTerminalLocationsLocation",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the location to be retrieved.",
            "in": "path",
            "name": "location",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terminal.location"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostTerminalLocationsLocation",
        "parameters": [
          {
            "description": "The identifier of the location to be updated.",
            "in": "path",
            "name": "location",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "address": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "description": "The full address of the location.",
                    "properties": {
                      "city": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line1": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "line2": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "postal_code": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "state": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["country"],
                    "title": "required_country_address",
                    "type": "object"
                  },
                  "display_name": {
                    "description": "A name for the location.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terminal.location"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/terminal/readers": {
      "get": {
        "description": "<p>Returns a list of <code>Reader</code> objects.</p>",
        "operationId": "GetTerminalReaders",
        "parameters": [
          {
            "description": "Filters readers by device type",
            "explode": true,
            "in": "query",
            "name": "device_type",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": ["bbpos_chipper2x", "verifone_P400"],
                  "type": "string"
                },
                {
                  "maxLength": 5000,
                  "type": "string"
                }
              ],
              "x-stripeBypassValidation": true
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A location ID to filter the response list to only readers at the specific location",
            "in": "query",
            "name": "location",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A status filter to filter readers to only offline or online readers",
            "explode": true,
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": ["offline", "online"],
                  "type": "string"
                },
                {
                  "maxLength": 5000,
                  "type": "string"
                }
              ]
            },
            "style": "deepObject"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "A list of readers",
                      "items": {
                        "$ref": "#/components/schemas/terminal.reader"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "TerminalReaderRetrieveReader",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Creates a new <code>Reader</code> object.</p>",
        "operationId": "PostTerminalReaders",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "label": {
                    "description": "Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "location": {
                    "description": "The location to assign the reader to. If no location is specified, the reader will be assigned to the account's default location.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "registration_code": {
                    "description": "A code generated by the reader used for registering to an account.",
                    "maxLength": 5000,
                    "type": "string"
                  }
                },
                "required": ["registration_code"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terminal.reader"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/terminal/readers/{reader}": {
      "delete": {
        "description": "<p>Deletes a <code>Reader</code> object.</p>",
        "operationId": "DeleteTerminalReadersReader",
        "parameters": [
          {
            "description": "The identifier of the reader to be deleted.",
            "in": "path",
            "name": "reader",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_terminal.reader"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves a <code>Reader</code> object.</p>",
        "operationId": "GetTerminalReadersReader",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the reader to be retrieved.",
            "in": "path",
            "name": "reader",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terminal.reader"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>",
        "operationId": "PostTerminalReadersReader",
        "parameters": [
          {
            "description": "The identifier of the reader to be updated.",
            "in": "path",
            "name": "reader",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "label": {
                    "description": "The new label of the reader.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/terminal.reader"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/tokens": {
      "post": {
        "description": "<p>Creates a single-use token that represents a bank account’s details.\nThis token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href=\"#accounts\">Custom account</a>.</p>",
        "operationId": "PostTokens",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "bank_account": {
                  "explode": true,
                  "style": "deepObject"
                },
                "card": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "person": {
                  "explode": true,
                  "style": "deepObject"
                },
                "pii": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "account": {
                    "description": "Information for the account this token will represent.",
                    "properties": {
                      "business_type": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "company": {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 100,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 200,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 200,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "address_specs",
                            "type": "object"
                          },
                          "address_kana": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "town": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "japan_address_kana_specs",
                            "type": "object"
                          },
                          "address_kanji": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "town": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "japan_address_kanji_specs",
                            "type": "object"
                          },
                          "directors_provided": {
                            "type": "boolean"
                          },
                          "executives_provided": {
                            "type": "boolean"
                          },
                          "name": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "name_kana": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "name_kanji": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "owners_provided": {
                            "type": "boolean"
                          },
                          "phone": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "tax_id": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "tax_id_registrar": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "vat_id": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "verification": {
                            "properties": {
                              "document": {
                                "properties": {
                                  "back": {
                                    "maxLength": 500,
                                    "type": "string"
                                  },
                                  "front": {
                                    "maxLength": 500,
                                    "type": "string"
                                  }
                                },
                                "title": "verification_document_specs",
                                "type": "object"
                              }
                            },
                            "title": "verification_specs",
                            "type": "object"
                          }
                        },
                        "title": "company_specs",
                        "type": "object"
                      },
                      "individual": {
                        "properties": {
                          "address": {
                            "properties": {
                              "city": {
                                "maxLength": 100,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 200,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 200,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "address_specs",
                            "type": "object"
                          },
                          "address_kana": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "town": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "japan_address_kana_specs",
                            "type": "object"
                          },
                          "address_kanji": {
                            "properties": {
                              "city": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "country": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line1": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "line2": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "postal_code": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "state": {
                                "maxLength": 5000,
                                "type": "string"
                              },
                              "town": {
                                "maxLength": 5000,
                                "type": "string"
                              }
                            },
                            "title": "japan_address_kanji_specs",
                            "type": "object"
                          },
                          "dob": {
                            "anyOf": [
                              {
                                "properties": {
                                  "day": {
                                    "type": "integer"
                                  },
                                  "month": {
                                    "type": "integer"
                                  },
                                  "year": {
                                    "type": "integer"
                                  }
                                },
                                "required": ["day", "month", "year"],
                                "title": "date_of_birth_specs",
                                "type": "object"
                              },
                              {
                                "enum": [""],
                                "type": "string"
                              }
                            ]
                          },
                          "email": {
                            "type": "string"
                          },
                          "first_name": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "first_name_kana": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "first_name_kanji": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "gender": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "id_number": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "last_name": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "last_name_kana": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "last_name_kanji": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "maiden_name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "ssn_last_4": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "verification": {
                            "properties": {
                              "additional_document": {
                                "properties": {
                                  "back": {
                                    "maxLength": 500,
                                    "type": "string"
                                  },
                                  "front": {
                                    "maxLength": 500,
                                    "type": "string"
                                  }
                                },
                                "title": "person_verification_document_specs",
                                "type": "object"
                              },
                              "document": {
                                "properties": {
                                  "back": {
                                    "maxLength": 500,
                                    "type": "string"
                                  },
                                  "front": {
                                    "maxLength": 500,
                                    "type": "string"
                                  }
                                },
                                "title": "person_verification_document_specs",
                                "type": "object"
                              }
                            },
                            "title": "person_verification_specs",
                            "type": "object"
                          }
                        },
                        "title": "individual_specs",
                        "type": "object"
                      },
                      "tos_shown_and_accepted": {
                        "type": "boolean"
                      }
                    },
                    "title": "connect_js_account_token_specs",
                    "type": "object"
                  },
                  "bank_account": {
                    "description": "The bank account this token will represent.",
                    "properties": {
                      "account_holder_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "account_holder_type": {
                        "enum": ["company", "individual"],
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "account_number": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "country": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      },
                      "routing_number": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "required": ["account_number", "country"],
                    "title": "token_create_bank_account",
                    "type": "object",
                    "x-stripeBypassValidation": true
                  },
                  "card": {
                    "anyOf": [
                      {
                        "properties": {
                          "address_city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "address_zip": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "currency": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "cvc": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_month": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "exp_year": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "name": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "number": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "required": ["exp_month", "exp_year", "number"],
                        "title": "credit_card_specs",
                        "type": "object"
                      },
                      {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    ],
                    "x-stripeBypassValidation": true
                  },
                  "customer": {
                    "description": "The customer (owned by the application's account) for which to create a token. For use only with [Stripe Connect](https://stripe.com/docs/connect). Also, this can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "person": {
                    "description": "Information for the person this token will represent.",
                    "properties": {
                      "address": {
                        "properties": {
                          "city": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 200,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "address_specs",
                        "type": "object"
                      },
                      "address_kana": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kana_specs",
                        "type": "object"
                      },
                      "address_kanji": {
                        "properties": {
                          "city": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "country": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line1": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "line2": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "postal_code": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "state": {
                            "maxLength": 5000,
                            "type": "string"
                          },
                          "town": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "japan_address_kanji_specs",
                        "type": "object"
                      },
                      "dob": {
                        "anyOf": [
                          {
                            "properties": {
                              "day": {
                                "type": "integer"
                              },
                              "month": {
                                "type": "integer"
                              },
                              "year": {
                                "type": "integer"
                              }
                            },
                            "required": ["day", "month", "year"],
                            "title": "date_of_birth_specs",
                            "type": "object"
                          },
                          {
                            "enum": [""],
                            "type": "string"
                          }
                        ]
                      },
                      "email": {
                        "type": "string"
                      },
                      "first_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "first_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "first_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "gender": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "id_number": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name_kana": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "last_name_kanji": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "maiden_name": {
                        "maxLength": 5000,
                        "type": "string"
                      },
                      "metadata": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "relationship": {
                        "properties": {
                          "director": {
                            "type": "boolean"
                          },
                          "executive": {
                            "type": "boolean"
                          },
                          "owner": {
                            "type": "boolean"
                          },
                          "percent_ownership": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "enum": [""],
                                "type": "string"
                              }
                            ]
                          },
                          "representative": {
                            "type": "boolean"
                          },
                          "title": {
                            "maxLength": 5000,
                            "type": "string"
                          }
                        },
                        "title": "relationship_specs",
                        "type": "object"
                      },
                      "ssn_last_4": {
                        "type": "string"
                      },
                      "verification": {
                        "properties": {
                          "additional_document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          },
                          "document": {
                            "properties": {
                              "back": {
                                "maxLength": 500,
                                "type": "string"
                              },
                              "front": {
                                "maxLength": 500,
                                "type": "string"
                              }
                            },
                            "title": "person_verification_document_specs",
                            "type": "object"
                          }
                        },
                        "title": "person_verification_specs",
                        "type": "object"
                      }
                    },
                    "title": "person_token_specs",
                    "type": "object"
                  },
                  "pii": {
                    "description": "The PII this token will represent.",
                    "properties": {
                      "id_number": {
                        "maxLength": 5000,
                        "type": "string"
                      }
                    },
                    "title": "pii_token_specs",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/tokens/{token}": {
      "get": {
        "description": "<p>Retrieves the token with the given ID.</p>",
        "operationId": "GetTokensToken",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the desired token.",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/topups": {
      "get": {
        "description": "<p>Returns a list of top-ups.</p>",
        "operationId": "GetTopups",
        "parameters": [
          {
            "description": "A positive integer representing how much to transfer.",
            "explode": true,
            "in": "query",
            "name": "amount",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.",
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": ["canceled", "failed", "pending", "succeeded"],
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/topup"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/topups",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "TopupList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Top up the balance of an account</p>",
        "operationId": "PostTopups",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "A positive integer representing how much to transfer.",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  },
                  "source": {
                    "description": "The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)).",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "statement_descriptor": {
                    "description": "Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters.",
                    "maxLength": 15,
                    "type": "string"
                  },
                  "transfer_group": {
                    "description": "A string that identifies this top-up as part of a group.",
                    "type": "string"
                  }
                },
                "required": ["amount", "currency"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topup"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/topups/{topup}": {
      "get": {
        "description": "<p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>",
        "operationId": "GetTopupsTopup",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the top-up to retrieve.",
            "in": "path",
            "name": "topup",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topup"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>",
        "operationId": "PostTopupsTopup",
        "parameters": [
          {
            "description": "The ID of the top-up to retrieve.",
            "in": "path",
            "name": "topup",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topup"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/topups/{topup}/cancel": {
      "post": {
        "description": "<p>Cancels a top-up. Only pending top-ups can be canceled.</p>",
        "operationId": "PostTopupsTopupCancel",
        "parameters": [
          {
            "description": "The ID of the top-up to cancel.",
            "in": "path",
            "name": "topup",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topup"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/transfers": {
      "get": {
        "description": "<p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>",
        "operationId": "GetTransfers",
        "parameters": [
          {
            "explode": true,
            "in": "query",
            "name": "created",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "properties": {
                    "gt": {
                      "type": "integer"
                    },
                    "gte": {
                      "type": "integer"
                    },
                    "lt": {
                      "type": "integer"
                    },
                    "lte": {
                      "type": "integer"
                    }
                  },
                  "title": "range_query_specs",
                  "type": "object"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "style": "deepObject"
          },
          {
            "description": "Only return transfers for the destination specified by this account ID.",
            "in": "query",
            "name": "destination",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only return transfers with the specified transfer group.",
            "in": "query",
            "name": "transfer_group",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/transfer"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/transfers",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "TransferList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href=\"#balance\">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>",
        "operationId": "PostTransfers",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "A positive integer in %s representing how much to transfer.",
                    "type": "integer"
                  },
                  "currency": {
                    "description": "3-letter [ISO code for currency](https://stripe.com/docs/payouts).",
                    "type": "string"
                  },
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "destination": {
                    "description": "The ID of a connected Stripe account. <a href=\"/docs/connect/charges-transfers\">See the Connect documentation</a> for details.",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "source_transaction": {
                    "description": "You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-availability) for details.",
                    "type": "string"
                  },
                  "source_type": {
                    "description": "The source balance to use for this transfer. One of `bank_account` or `card`. For most users, this will default to `card`.",
                    "enum": ["bank_account", "card"],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "transfer_group": {
                    "description": "A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#grouping-transactions) for details.",
                    "type": "string"
                  }
                },
                "required": ["currency", "destination"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/transfers/{id}/reversals": {
      "get": {
        "description": "<p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>",
        "operationId": "GetTransfersIdReversals",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the transfer whose reversals will be retrieved.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/transfer_reversal"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "title": "TransferReversalList",
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>When you create a new reversal, you must specify a transfer to create it on.</p>\n\n<p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>\n\n<p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>",
        "operationId": "PostTransfersIdReversals",
        "parameters": [
          {
            "description": "The ID of the transfer to be reversed.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "A positive integer in %s representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount.",
                    "type": "integer"
                  },
                  "description": {
                    "description": "An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  },
                  "refund_application_fee": {
                    "description": "Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_reversal"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/transfers/{transfer}": {
      "get": {
        "description": "<p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>",
        "operationId": "GetTransfersTransfer",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The identifier of the transfer to be retrieved.",
            "in": "path",
            "name": "transfer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>\n\n<p>This request accepts only metadata as an argument.</p>",
        "operationId": "PostTransfersTransfer",
        "parameters": [
          {
            "description": "The ID of the transfer to be updated.",
            "in": "path",
            "name": "transfer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "maxLength": 5000,
                    "type": "string"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/transfers/{transfer}/reversals/{id}": {
      "get": {
        "description": "<p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>",
        "operationId": "GetTransfersTransferReversalsId",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "ID of reversal to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "ID of the transfer reversed.",
            "in": "path",
            "name": "transfer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_reversal"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>\n\n<p>This request only accepts metadata and description as arguments.</p>",
        "operationId": "PostTransfersTransferReversalsId",
        "parameters": [
          {
            "description": "ID of reversal to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "ID of the transfer reversed.",
            "in": "path",
            "name": "transfer",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                },
                "metadata": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transfer_reversal"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/webhook_endpoints": {
      "get": {
        "description": "<p>Returns a list of your webhook endpoints.</p>",
        "operationId": "GetWebhookEndpoints",
        "parameters": [
          {
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.",
            "in": "query",
            "name": "ending_before",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.",
            "in": "query",
            "name": "starting_after",
            "required": false,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/webhook_endpoint"
                      },
                      "type": "array"
                    },
                    "has_more": {
                      "description": "True if this list has another page of items after this one that can be fetched.",
                      "type": "boolean"
                    },
                    "object": {
                      "description": "String representing the object's type. Objects of the same type share the same value. Always has the value `list`.",
                      "enum": ["list"],
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL where this list can be accessed.",
                      "maxLength": 5000,
                      "pattern": "^/v1/webhook_endpoints",
                      "type": "string"
                    }
                  },
                  "required": ["data", "has_more", "object", "url"],
                  "type": "object",
                  "x-expandableFields": ["data"]
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href=\"https://dashboard.stripe.com/account/webhooks\">webhooks settings</a> section of the Dashboard.</p>",
        "operationId": "PostWebhookEndpoints",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "enabled_events": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "api_version": {
                    "description": "Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version.",
                    "enum": [
                      "2011-01-01",
                      "2011-06-21",
                      "2011-06-28",
                      "2011-08-01",
                      "2011-09-15",
                      "2011-11-17",
                      "2012-02-23",
                      "2012-03-25",
                      "2012-06-18",
                      "2012-06-28",
                      "2012-07-09",
                      "2012-09-24",
                      "2012-10-26",
                      "2012-11-07",
                      "2013-02-11",
                      "2013-02-13",
                      "2013-07-05",
                      "2013-08-12",
                      "2013-08-13",
                      "2013-10-29",
                      "2013-12-03",
                      "2014-01-31",
                      "2014-03-13",
                      "2014-03-28",
                      "2014-05-19",
                      "2014-06-13",
                      "2014-06-17",
                      "2014-07-22",
                      "2014-07-26",
                      "2014-08-04",
                      "2014-08-20",
                      "2014-09-08",
                      "2014-10-07",
                      "2014-11-05",
                      "2014-11-20",
                      "2014-12-08",
                      "2014-12-17",
                      "2014-12-22",
                      "2015-01-11",
                      "2015-01-26",
                      "2015-02-10",
                      "2015-02-16",
                      "2015-02-18",
                      "2015-03-24",
                      "2015-04-07",
                      "2015-06-15",
                      "2015-07-07",
                      "2015-07-13",
                      "2015-07-28",
                      "2015-08-07",
                      "2015-08-19",
                      "2015-09-03",
                      "2015-09-08",
                      "2015-09-23",
                      "2015-10-01",
                      "2015-10-12",
                      "2015-10-16",
                      "2016-02-03",
                      "2016-02-19",
                      "2016-02-22",
                      "2016-02-23",
                      "2016-02-29",
                      "2016-03-07",
                      "2016-06-15",
                      "2016-07-06",
                      "2016-10-19",
                      "2017-01-27",
                      "2017-02-14",
                      "2017-04-06",
                      "2017-05-25",
                      "2017-06-05",
                      "2017-08-15",
                      "2017-12-14",
                      "2018-01-23",
                      "2018-02-05",
                      "2018-02-06",
                      "2018-02-28",
                      "2018-05-21",
                      "2018-07-27",
                      "2018-08-23",
                      "2018-09-06",
                      "2018-09-24",
                      "2018-10-31",
                      "2018-11-08",
                      "2019-02-11",
                      "2019-02-19",
                      "2019-03-14",
                      "2019-05-16",
                      "2019-08-14",
                      "2019-09-09",
                      "2019-10-08",
                      "2019-10-17",
                      "2019-11-05",
                      "2019-12-03"
                    ],
                    "maxLength": 5000,
                    "type": "string",
                    "x-stripeBypassValidation": true
                  },
                  "connect": {
                    "description": "Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`.",
                    "type": "boolean"
                  },
                  "enabled_events": {
                    "description": "The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.",
                    "items": {
                      "enum": [
                        "*",
                        "account.application.authorized",
                        "account.application.deauthorized",
                        "account.external_account.created",
                        "account.external_account.deleted",
                        "account.external_account.updated",
                        "account.updated",
                        "application_fee.created",
                        "application_fee.refund.updated",
                        "application_fee.refunded",
                        "balance.available",
                        "capability.updated",
                        "charge.captured",
                        "charge.dispute.closed",
                        "charge.dispute.created",
                        "charge.dispute.funds_reinstated",
                        "charge.dispute.funds_withdrawn",
                        "charge.dispute.updated",
                        "charge.expired",
                        "charge.failed",
                        "charge.pending",
                        "charge.refund.updated",
                        "charge.refunded",
                        "charge.succeeded",
                        "charge.updated",
                        "checkout.session.completed",
                        "coupon.created",
                        "coupon.deleted",
                        "coupon.updated",
                        "credit_note.created",
                        "credit_note.updated",
                        "credit_note.voided",
                        "customer.created",
                        "customer.deleted",
                        "customer.discount.created",
                        "customer.discount.deleted",
                        "customer.discount.updated",
                        "customer.source.created",
                        "customer.source.deleted",
                        "customer.source.expiring",
                        "customer.source.updated",
                        "customer.subscription.created",
                        "customer.subscription.deleted",
                        "customer.subscription.trial_will_end",
                        "customer.subscription.updated",
                        "customer.tax_id.created",
                        "customer.tax_id.deleted",
                        "customer.tax_id.updated",
                        "customer.updated",
                        "file.created",
                        "invoice.created",
                        "invoice.deleted",
                        "invoice.finalized",
                        "invoice.marked_uncollectible",
                        "invoice.payment_action_required",
                        "invoice.payment_failed",
                        "invoice.payment_succeeded",
                        "invoice.sent",
                        "invoice.upcoming",
                        "invoice.updated",
                        "invoice.voided",
                        "invoiceitem.created",
                        "invoiceitem.deleted",
                        "invoiceitem.updated",
                        "issuing_authorization.created",
                        "issuing_authorization.request",
                        "issuing_authorization.updated",
                        "issuing_card.created",
                        "issuing_card.updated",
                        "issuing_cardholder.created",
                        "issuing_cardholder.updated",
                        "issuing_dispute.created",
                        "issuing_dispute.updated",
                        "issuing_settlement.created",
                        "issuing_settlement.updated",
                        "issuing_transaction.created",
                        "issuing_transaction.updated",
                        "mandate.updated",
                        "order.created",
                        "order.payment_failed",
                        "order.payment_succeeded",
                        "order.updated",
                        "order_return.created",
                        "payment_intent.amount_capturable_updated",
                        "payment_intent.canceled",
                        "payment_intent.created",
                        "payment_intent.payment_failed",
                        "payment_intent.succeeded",
                        "payment_method.attached",
                        "payment_method.card_automatically_updated",
                        "payment_method.detached",
                        "payment_method.updated",
                        "payout.canceled",
                        "payout.created",
                        "payout.failed",
                        "payout.paid",
                        "payout.updated",
                        "person.created",
                        "person.deleted",
                        "person.updated",
                        "plan.created",
                        "plan.deleted",
                        "plan.updated",
                        "product.created",
                        "product.deleted",
                        "product.updated",
                        "radar.early_fraud_warning.created",
                        "radar.early_fraud_warning.updated",
                        "recipient.created",
                        "recipient.deleted",
                        "recipient.updated",
                        "reporting.report_run.failed",
                        "reporting.report_run.succeeded",
                        "reporting.report_type.updated",
                        "review.closed",
                        "review.opened",
                        "setup_intent.canceled",
                        "setup_intent.created",
                        "setup_intent.setup_failed",
                        "setup_intent.succeeded",
                        "sigma.scheduled_query_run.created",
                        "sku.created",
                        "sku.deleted",
                        "sku.updated",
                        "source.canceled",
                        "source.chargeable",
                        "source.failed",
                        "source.mandate_notification",
                        "source.refund_attributes_required",
                        "source.transaction.created",
                        "source.transaction.updated",
                        "subscription_schedule.aborted",
                        "subscription_schedule.canceled",
                        "subscription_schedule.completed",
                        "subscription_schedule.created",
                        "subscription_schedule.expiring",
                        "subscription_schedule.released",
                        "subscription_schedule.updated",
                        "tax_rate.created",
                        "tax_rate.updated",
                        "topup.canceled",
                        "topup.created",
                        "topup.failed",
                        "topup.reversed",
                        "topup.succeeded",
                        "transfer.created",
                        "transfer.failed",
                        "transfer.paid",
                        "transfer.reversed",
                        "transfer.updated"
                      ],
                      "type": "string",
                      "x-stripeBypassValidation": true
                    },
                    "type": "array"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "url": {
                    "description": "The URL of the webhook endpoint.",
                    "type": "string"
                  }
                },
                "required": ["enabled_events", "url"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_endpoint"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    },
    "/v1/webhook_endpoints/{webhook_endpoint}": {
      "delete": {
        "description": "<p>You can also delete webhook endpoints via the <a href=\"https://dashboard.stripe.com/account/webhooks\">webhook endpoint management</a> page of the Stripe dashboard.</p>",
        "operationId": "DeleteWebhookEndpointsWebhookEndpoint",
        "parameters": [
          {
            "description": "The ID of the webhook endpoint to delete.",
            "in": "path",
            "name": "webhook_endpoint",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_webhook_endpoint"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "get": {
        "description": "<p>Retrieves the webhook endpoint with the given ID.</p>",
        "operationId": "GetWebhookEndpointsWebhookEndpoint",
        "parameters": [
          {
            "description": "Specifies which fields in the response should be expanded.",
            "explode": true,
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "maxLength": 5000,
                "type": "string"
              },
              "type": "array"
            },
            "style": "deepObject"
          },
          {
            "description": "The ID of the desired webhook endpoint.",
            "in": "path",
            "name": "webhook_endpoint",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "additionalProperties": false,
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_endpoint"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      },
      "post": {
        "description": "<p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>",
        "operationId": "PostWebhookEndpointsWebhookEndpoint",
        "parameters": [
          {
            "description": "The ID of the desired webhook endpoint.",
            "in": "path",
            "name": "webhook_endpoint",
            "required": true,
            "schema": {
              "maxLength": 5000,
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {
                "enabled_events": {
                  "explode": true,
                  "style": "deepObject"
                },
                "expand": {
                  "explode": true,
                  "style": "deepObject"
                }
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "disabled": {
                    "description": "Disable the webhook endpoint if set to true.",
                    "type": "boolean"
                  },
                  "enabled_events": {
                    "description": "The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.",
                    "items": {
                      "enum": [
                        "*",
                        "account.application.authorized",
                        "account.application.deauthorized",
                        "account.external_account.created",
                        "account.external_account.deleted",
                        "account.external_account.updated",
                        "account.updated",
                        "application_fee.created",
                        "application_fee.refund.updated",
                        "application_fee.refunded",
                        "balance.available",
                        "capability.updated",
                        "charge.captured",
                        "charge.dispute.closed",
                        "charge.dispute.created",
                        "charge.dispute.funds_reinstated",
                        "charge.dispute.funds_withdrawn",
                        "charge.dispute.updated",
                        "charge.expired",
                        "charge.failed",
                        "charge.pending",
                        "charge.refund.updated",
                        "charge.refunded",
                        "charge.succeeded",
                        "charge.updated",
                        "checkout.session.completed",
                        "coupon.created",
                        "coupon.deleted",
                        "coupon.updated",
                        "credit_note.created",
                        "credit_note.updated",
                        "credit_note.voided",
                        "customer.created",
                        "customer.deleted",
                        "customer.discount.created",
                        "customer.discount.deleted",
                        "customer.discount.updated",
                        "customer.source.created",
                        "customer.source.deleted",
                        "customer.source.expiring",
                        "customer.source.updated",
                        "customer.subscription.created",
                        "customer.subscription.deleted",
                        "customer.subscription.trial_will_end",
                        "customer.subscription.updated",
                        "customer.tax_id.created",
                        "customer.tax_id.deleted",
                        "customer.tax_id.updated",
                        "customer.updated",
                        "file.created",
                        "invoice.created",
                        "invoice.deleted",
                        "invoice.finalized",
                        "invoice.marked_uncollectible",
                        "invoice.payment_action_required",
                        "invoice.payment_failed",
                        "invoice.payment_succeeded",
                        "invoice.sent",
                        "invoice.upcoming",
                        "invoice.updated",
                        "invoice.voided",
                        "invoiceitem.created",
                        "invoiceitem.deleted",
                        "invoiceitem.updated",
                        "issuing_authorization.created",
                        "issuing_authorization.request",
                        "issuing_authorization.updated",
                        "issuing_card.created",
                        "issuing_card.updated",
                        "issuing_cardholder.created",
                        "issuing_cardholder.updated",
                        "issuing_dispute.created",
                        "issuing_dispute.updated",
                        "issuing_settlement.created",
                        "issuing_settlement.updated",
                        "issuing_transaction.created",
                        "issuing_transaction.updated",
                        "mandate.updated",
                        "order.created",
                        "order.payment_failed",
                        "order.payment_succeeded",
                        "order.updated",
                        "order_return.created",
                        "payment_intent.amount_capturable_updated",
                        "payment_intent.canceled",
                        "payment_intent.created",
                        "payment_intent.payment_failed",
                        "payment_intent.succeeded",
                        "payment_method.attached",
                        "payment_method.card_automatically_updated",
                        "payment_method.detached",
                        "payment_method.updated",
                        "payout.canceled",
                        "payout.created",
                        "payout.failed",
                        "payout.paid",
                        "payout.updated",
                        "person.created",
                        "person.deleted",
                        "person.updated",
                        "plan.created",
                        "plan.deleted",
                        "plan.updated",
                        "product.created",
                        "product.deleted",
                        "product.updated",
                        "radar.early_fraud_warning.created",
                        "radar.early_fraud_warning.updated",
                        "recipient.created",
                        "recipient.deleted",
                        "recipient.updated",
                        "reporting.report_run.failed",
                        "reporting.report_run.succeeded",
                        "reporting.report_type.updated",
                        "review.closed",
                        "review.opened",
                        "setup_intent.canceled",
                        "setup_intent.created",
                        "setup_intent.setup_failed",
                        "setup_intent.succeeded",
                        "sigma.scheduled_query_run.created",
                        "sku.created",
                        "sku.deleted",
                        "sku.updated",
                        "source.canceled",
                        "source.chargeable",
                        "source.failed",
                        "source.mandate_notification",
                        "source.refund_attributes_required",
                        "source.transaction.created",
                        "source.transaction.updated",
                        "subscription_schedule.aborted",
                        "subscription_schedule.canceled",
                        "subscription_schedule.completed",
                        "subscription_schedule.created",
                        "subscription_schedule.expiring",
                        "subscription_schedule.released",
                        "subscription_schedule.updated",
                        "tax_rate.created",
                        "tax_rate.updated",
                        "topup.canceled",
                        "topup.created",
                        "topup.failed",
                        "topup.reversed",
                        "topup.succeeded",
                        "transfer.created",
                        "transfer.failed",
                        "transfer.paid",
                        "transfer.reversed",
                        "transfer.updated"
                      ],
                      "type": "string",
                      "x-stripeBypassValidation": true
                    },
                    "type": "array"
                  },
                  "expand": {
                    "description": "Specifies which fields in the response should be expanded.",
                    "items": {
                      "maxLength": 5000,
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "url": {
                    "description": "The URL of the webhook endpoint.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook_endpoint"
                }
              }
            },
            "description": "Successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            },
            "description": "Error response."
          }
        }
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    },
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.stripe.com/"
    }
  ]
}
