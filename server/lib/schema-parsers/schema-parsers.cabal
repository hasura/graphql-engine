cabal-version:  3.6

name:           schema-parsers
version:        1.0.0
description:    Parsers built from GraphQL schemas.
homepage:       https://github.com/hasura/github-engine#readme
bug-reports:    https://github.com/hasura/github-engine/issues
author:         Hasura, Inc.
maintainer:     Hasura, Inc.
build-type:     Simple
extra-source-files:
    ../../../LICENSE

source-repository head
  type: git
  location: https://github.com/hasura/github-engine

flag optimize-hasura
  description: Compile hasura code with appropriate optimizations
  manual: False
  default: True

flag profiling
  description: Configures the project to be profiling-compatible
  manual: True
  default: False

common common-all
  default-language: Haskell2010
  ghc-options:
    -Werror
    -foptimal-applicative-do
    -- Taken from https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
    -Weverything
    -Wno-missing-exported-signatures
    -Wno-missing-import-lists
    -Wno-missed-specialisations
    -Wno-all-missed-specialisations
    -Wno-unsafe
    -Wno-safe
    -Wno-missing-local-signatures
    -Wno-monomorphism-restriction
    -Wno-missing-kind-signatures
    -Wno-missing-safe-haskell-mode
    -- We want these warnings, but the code doesn't satisfy them yet:
    -Wno-missing-deriving-strategies
    -Wno-unused-packages
    -Wno-implicit-prelude

library
  import: common-all
  exposed-modules:
      Data.GADT.Compare.Extended
      Hasura.GraphQL.Parser
      Hasura.GraphQL.Parser.Class
      Hasura.GraphQL.Parser.Collect
      Hasura.GraphQL.Parser.DirectiveName
      Hasura.GraphQL.Parser.Directives
      Hasura.GraphQL.Parser.ErrorCode
      Hasura.GraphQL.Parser.Internal.Convert
      Hasura.GraphQL.Parser.Internal.Input
      Hasura.GraphQL.Parser.Internal.Parser
      Hasura.GraphQL.Parser.Internal.Scalars
      Hasura.GraphQL.Parser.Internal.TypeChecking
      Hasura.GraphQL.Parser.Internal.Types
      Hasura.GraphQL.Parser.Monad
      Hasura.GraphQL.Parser.Name
      Hasura.GraphQL.Parser.Name.Introspection
      Hasura.GraphQL.Parser.Name.TypeSystem
      Hasura.GraphQL.Parser.Names
      Hasura.GraphQL.Parser.Schema
      Hasura.GraphQL.Parser.Schema.Collect
      Hasura.GraphQL.Parser.Schema.Convert
      Hasura.GraphQL.Parser.Schema.Definition
      Hasura.GraphQL.Parser.Variable
  other-modules:
      Paths_schema_parsers
  hs-source-dirs:
      src
  default-extensions:
      AllowAmbiguousTypes
      ApplicativeDo
      BangPatterns
      BlockArguments
      DataKinds
      DeriveFoldable
      DeriveFunctor
      DeriveLift
      DeriveGeneric
      DeriveTraversable
      DerivingStrategies
      ExplicitNamespaces
      FlexibleContexts
      FlexibleInstances
      FunctionalDependencies
      GADTs
      GeneralizedNewtypeDeriving
      ImportQualifiedPost
      KindSignatures
      LambdaCase
      MultiWayIf
      MultiParamTypeClasses
      NamedFieldPuns
      OverloadedStrings
      RankNTypes
      RecordWildCards
      ScopedTypeVariables
      StandaloneDeriving
      StrictData
      TupleSections
      TypeApplications
      TypeFamilies
      TypeOperators
  build-depends:
      aeson
    , base
    , dependent-map
    , dependent-sum
    , graphql-parser
    , hashable
    , hasura-error-message
    , hasura-prelude
    , insert-ordered-containers
    , lens
    , mtl
    , scientific
    , some
    , template-haskell
    , text
    , th-lift
    , unordered-containers
    , uuid
    , vector
    , witherable
  if flag(profiling)
    cpp-options: -DPROFILING
  if flag(optimize-hasura)
    ghc-options: -fexpose-all-unfoldings -O2
  else
    ghc-options: -O0

test-suite schema-parsers-tests
  import: common-all
  type: exitcode-stdio-1.0
  main-is: Main.hs
  other-modules:
      Hasura.GraphQL.Parser.DirectivesSpec
      Hasura.GraphQL.Parser.MonadParseSpec
      Hasura.GraphQL.Parser.TestInstances
      Hasura.GraphQL.Parser.TestUtils
      Paths_schema_parsers
  hs-source-dirs:
      test
  default-extensions:
      AllowAmbiguousTypes
      ApplicativeDo
      BangPatterns
      BlockArguments
      DataKinds
      DeriveFoldable
      DeriveFunctor
      DeriveLift
      DeriveGeneric
      DeriveTraversable
      DerivingStrategies
      ExplicitNamespaces
      FlexibleContexts
      FlexibleInstances
      FunctionalDependencies
      GADTs
      GeneralizedNewtypeDeriving
      ImportQualifiedPost
      KindSignatures
      LambdaCase
      MultiWayIf
      MultiParamTypeClasses
      NamedFieldPuns
      OverloadedStrings
      RankNTypes
      RecordWildCards
      ScopedTypeVariables
      StandaloneDeriving
      StrictData
      TupleSections
      TypeApplications
      TypeFamilies
      TypeOperators
  build-tool-depends: hspec-discover:hspec-discover
  build-depends:
      schema-parsers
    , hspec
  if flag(profiling)
    cpp-options: -DPROFILING
  if flag(optimize-hasura)
    ghc-options: -fexpose-all-unfoldings -O2
  else
    ghc-options: -O0
  if true
    build-depends:
        aeson
      , base
      , dependent-map
      , dependent-sum
      , hasura-error-message
      , graphql-parser
      , hashable
      , insert-ordered-containers
      , lens
      , mtl
      , scientific
      , some
      , template-haskell
      , text
      , th-lift
      , unordered-containers
      , uuid
      , vector
      , witherable
  default-language: Haskell2010
