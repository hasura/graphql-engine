---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/models/all_args_are_set_including_connector_link_presets/metadata.json
---
(
    Metadata {
        object_types: {
            Qualified {
                subgraph: SubgraphName(
                    "default",
                ),
                name: CustomTypeName(
                    Identifier(
                        "RowType",
                    ),
                ),
            }: ObjectTypeWithRelationships {
                object_type: ObjectTypeRepresentation {
                    fields: {
                        FieldName(
                            Identifier(
                                "test",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                    },
                    global_id_fields: [],
                    apollo_federation_config: None,
                    graphql_output_type_name: None,
                    graphql_input_type_name: None,
                    description: None,
                },
                type_output_permissions: {},
                type_input_permissions: {},
                relationship_fields: {},
                type_mappings: DataConnectorTypeMappingsForObject {
                    mappings: {
                        Qualified {
                            subgraph: SubgraphName(
                                "default",
                            ),
                            name: DataConnectorName(
                                Identifier(
                                    "myconnector",
                                ),
                            ),
                        }: {
                            DataConnectorObjectType(
                                "row_type",
                            ): Object {
                                ndc_object_type_name: DataConnectorObjectType(
                                    "row_type",
                                ),
                                field_mappings: {
                                    FieldName(
                                        Identifier(
                                            "test",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "test",
                                        ),
                                        column_type: Named {
                                            name: TypeName(
                                                "String",
                                            ),
                                        },
                                        column_type_representation: Some(
                                            String,
                                        ),
                                        comparison_operators: Some(
                                            ComparisonOperators {
                                                equality_operators: [],
                                                in_operators: [],
                                                other_operators: [],
                                            },
                                        ),
                                        argument_mappings: {},
                                    },
                                },
                            },
                        },
                    },
                    scalar_representations: {
                        FieldName(
                            Identifier(
                                "test",
                            ),
                        ): {
                            String,
                        },
                    },
                },
            },
        },
        scalar_types: {
            Qualified {
                subgraph: SubgraphName(
                    "default",
                ),
                name: CustomTypeName(
                    Identifier(
                        "Headers",
                    ),
                ),
            }: ScalarTypeRepresentation {
                graphql_type_name: Some(
                    TypeName(
                        Name(
                            "Headers",
                        ),
                    ),
                ),
                description: Some(
                    "Headers map",
                ),
            },
        },
        models: {
            Qualified {
                subgraph: SubgraphName(
                    "default",
                ),
                name: ModelName(
                    Identifier(
                        "collection_with_args",
                    ),
                ),
            }: ModelWithPermissions {
                model: Model {
                    name: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: ModelName(
                            Identifier(
                                "collection_with_args",
                            ),
                        ),
                    },
                    data_type: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "RowType",
                            ),
                        ),
                    },
                    type_fields: {
                        FieldName(
                            Identifier(
                                "test",
                            ),
                        ): FieldDefinition {
                            field_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: false,
                            },
                            description: None,
                            deprecated: None,
                            field_arguments: {},
                        },
                    },
                    global_id_fields: [],
                    arguments: {
                        ArgumentName(
                            Identifier(
                                "argA",
                            ),
                        ): ArgumentInfo {
                            argument_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            argument_kind: Other,
                        },
                        ArgumentName(
                            Identifier(
                                "argB",
                            ),
                        ): ArgumentInfo {
                            argument_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        Int,
                                    ),
                                ),
                                nullable: true,
                            },
                            description: None,
                            argument_kind: Other,
                        },
                    },
                    source: Some(
                        ModelSource {
                            data_connector: DataConnectorLink {
                                name: Qualified {
                                    subgraph: SubgraphName(
                                        "default",
                                    ),
                                    name: DataConnectorName(
                                        Identifier(
                                            "myconnector",
                                        ),
                                    ),
                                },
                                url: ReadWriteUrls(
                                    ResolvedReadWriteUrls {
                                        read: SerializableUrl(
                                            Url {
                                                scheme: "http",
                                                cannot_be_a_base: false,
                                                username: "",
                                                password: None,
                                                host: Some(
                                                    Domain(
                                                        "local-dev.hasura.me",
                                                    ),
                                                ),
                                                port: Some(
                                                    8080,
                                                ),
                                                path: "/",
                                                query: None,
                                                fragment: None,
                                            },
                                        ),
                                        write: SerializableUrl(
                                            Url {
                                                scheme: "http",
                                                cannot_be_a_base: false,
                                                username: "",
                                                password: None,
                                                host: Some(
                                                    Domain(
                                                        "local-dev.hasura.me",
                                                    ),
                                                ),
                                                port: Some(
                                                    8080,
                                                ),
                                                path: "/",
                                                query: None,
                                                fragment: None,
                                            },
                                        ),
                                    },
                                ),
                                headers: SerializableHeaderMap(
                                    {},
                                ),
                                response_config: None,
                                capabilities: DataConnectorCapabilities {
                                    supported_ndc_version: V01,
                                    supports_explaining_queries: true,
                                    supports_explaining_mutations: true,
                                    supports_nested_object_filtering: false,
                                    supports_nested_object_aggregations: false,
                                },
                            },
                            collection: CollectionName(
                                "collection_with_args",
                            ),
                            collection_type: DataConnectorObjectType(
                                "row_type",
                            ),
                            type_mappings: {
                                Qualified {
                                    subgraph: SubgraphName(
                                        "default",
                                    ),
                                    name: CustomTypeName(
                                        Identifier(
                                            "RowType",
                                        ),
                                    ),
                                }: Object {
                                    ndc_object_type_name: DataConnectorObjectType(
                                        "row_type",
                                    ),
                                    field_mappings: {
                                        FieldName(
                                            Identifier(
                                                "test",
                                            ),
                                        ): FieldMapping {
                                            column: DataConnectorColumnName(
                                                "test",
                                            ),
                                            column_type: Named {
                                                name: TypeName(
                                                    "String",
                                                ),
                                            },
                                            column_type_representation: Some(
                                                String,
                                            ),
                                            comparison_operators: Some(
                                                ComparisonOperators {
                                                    equality_operators: [],
                                                    in_operators: [],
                                                    other_operators: [],
                                                },
                                            ),
                                            argument_mappings: {},
                                        },
                                    },
                                },
                            },
                            argument_mappings: {
                                ArgumentName(
                                    Identifier(
                                        "argA",
                                    ),
                                ): DataConnectorArgumentName(
                                    "arg1",
                                ),
                                ArgumentName(
                                    Identifier(
                                        "argB",
                                    ),
                                ): DataConnectorArgumentName(
                                    "arg2",
                                ),
                            },
                            data_connector_link_argument_presets: {
                                DataConnectorArgumentName(
                                    "headers",
                                ): ArgumentPresetValue {
                                    http_headers: HttpHeadersPreset {
                                        forward: [
                                            SerializableHeaderName(
                                                "x-myheader",
                                            ),
                                        ],
                                        additional: {
                                            SerializableHeaderName(
                                                "x-whatever",
                                            ): Literal(
                                                String("wow"),
                                            ),
                                        },
                                    },
                                },
                            },
                            source_arguments: {
                                DataConnectorArgumentName(
                                    "arg1",
                                ): Named {
                                    name: TypeName(
                                        "String",
                                    ),
                                },
                                DataConnectorArgumentName(
                                    "arg2",
                                ): Named {
                                    name: TypeName(
                                        "Int",
                                    ),
                                },
                                DataConnectorArgumentName(
                                    "headers",
                                ): Named {
                                    name: TypeName(
                                        "Headers",
                                    ),
                                },
                            },
                        },
                    ),
                    global_id_source: None,
                    apollo_federation_key_source: None,
                    order_by_expression: Some(
                        Qualified {
                            subgraph: SubgraphName(
                                "default",
                            ),
                            name: FromModel(
                                ModelName(
                                    Identifier(
                                        "collection_with_args",
                                    ),
                                ),
                            ),
                        },
                    ),
                    aggregate_expression: None,
                    raw: ModelRaw {
                        filter_expression_type: None,
                        graphql: Some(
                            ModelGraphQlDefinitionV2 {
                                select_uniques: [],
                                select_many: Some(
                                    SelectManyGraphQlDefinition {
                                        query_root_field: GraphQlFieldName(
                                            "collection_with_args",
                                        ),
                                        description: None,
                                        deprecated: None,
                                        subscription: None,
                                    },
                                ),
                                arguments_input_type: Some(
                                    GraphQlTypeName(
                                        "collection_with_args_input_args",
                                    ),
                                ),
                                apollo_federation: None,
                                filter_input_type_name: None,
                                aggregate: None,
                            },
                        ),
                        description: None,
                    },
                },
                select_permissions: {},
                filter_expression_type: None,
                graphql_api: ModelGraphQlApi {
                    arguments_input_config: Some(
                        ModelGraphqlApiArgumentsConfig {
                            field_name: Name(
                                "args",
                            ),
                            type_name: TypeName(
                                Name(
                                    "collection_with_args_input_args",
                                ),
                            ),
                        },
                    ),
                    select_uniques: [],
                    select_many: Some(
                        SelectManyGraphQlDefinition {
                            query_root_field: Name(
                                "collection_with_args",
                            ),
                            description: None,
                            deprecated: None,
                            subscription: None,
                        },
                    ),
                    select_aggregate: None,
                    order_by_expression: Some(
                        ModelOrderByExpression {
                            data_connector_name: Qualified {
                                subgraph: SubgraphName(
                                    "default",
                                ),
                                name: DataConnectorName(
                                    Identifier(
                                        "myconnector",
                                    ),
                                ),
                            },
                            order_by_type_name: TypeName(
                                Name(
                                    "collection_with_args_order_by",
                                ),
                            ),
                            order_by_field_name: Name(
                                "order_by",
                            ),
                            order_by_expression_identifier: Qualified {
                                subgraph: SubgraphName(
                                    "default",
                                ),
                                name: FromModel(
                                    ModelName(
                                        Identifier(
                                            "collection_with_args",
                                        ),
                                    ),
                                ),
                            },
                        },
                    ),
                    limit_field: Some(
                        LimitFieldGraphqlConfig {
                            field_name: Name(
                                "limit",
                            ),
                        },
                    ),
                    offset_field: Some(
                        OffsetFieldGraphqlConfig {
                            field_name: Name(
                                "offset",
                            ),
                        },
                    ),
                    filter_input_type_name: None,
                },
            },
        },
        commands: {},
        object_boolean_expression_types: {},
        boolean_expression_types: BooleanExpressionTypes {
            objects: {},
            scalars: {},
        },
        order_by_expressions: OrderByExpressions(
            {
                Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: FromModel(
                        ModelName(
                            Identifier(
                                "collection_with_args",
                            ),
                        ),
                    ),
                }: OrderByExpression {
                    identifier: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: FromModel(
                            ModelName(
                                Identifier(
                                    "collection_with_args",
                                ),
                            ),
                        ),
                    },
                    ordered_type: Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "RowType",
                            ),
                        ),
                    },
                    orderable_fields: {
                        FieldName(
                            Identifier(
                                "test",
                            ),
                        ): Scalar(
                            OrderableScalarField {
                                enable_order_by_directions: EnableAll(
                                    true,
                                ),
                            },
                        ),
                    },
                    orderable_relationships: ModelV1AllowAll,
                    graphql: Some(
                        OrderByExpressionGraphqlConfig {
                            expression_type_name: TypeName(
                                Name(
                                    "collection_with_args_order_by",
                                ),
                            ),
                        },
                    ),
                    description: Some(
                        "OrderByExpression for Model collection_with_args (in subgraph default)",
                    ),
                },
            },
        ),
        aggregate_expressions: {},
        graphql_config: GlobalGraphqlConfig {
            query_root_type_name: TypeName(
                Name(
                    "Query",
                ),
            ),
            mutation_root_type_name: TypeName(
                Name(
                    "Mutation",
                ),
            ),
            subscription_root_type_name: None,
            order_by_input: Some(
                OrderByInputGraphqlConfig {
                    asc_direction_field_value: Name(
                        "Asc",
                    ),
                    desc_direction_field_value: Name(
                        "Desc",
                    ),
                    enum_type_name: TypeName(
                        Name(
                            "order_by",
                        ),
                    ),
                },
            ),
            enable_apollo_federation_fields: false,
            bypass_relation_comparisons_ndc_capability: false,
        },
        pre_parse_plugins: [],
        roles: [],
    },
    [],
)
