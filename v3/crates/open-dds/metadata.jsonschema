{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OpenDdMetadata",
  "description": "All of the metadata required to run Hasura v3 engine.",
  "anyOf": [
    {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OpenDdSubgraphObject"
      }
    },
    {
      "$ref": "#/definitions/OpenDdMetadataWithVersion"
    }
  ],
  "definitions": {
    "AdditionalHttpHeaders": {
      "$id": "https://hasura.io/jsonschemas/metadata/AdditionalHttpHeaders",
      "title": "AdditionalHttpHeaders",
      "description": "Key value map of HTTP headers to be forwarded in the headers argument of a data connector request.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ValueExpression"
      }
    },
    "AggregatableFieldDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregatableFieldDefinition",
      "title": "AggregatableFieldDefinition",
      "description": "Definition of an aggregatable field on an object type",
      "type": "object",
      "required": [
        "aggregateExpression",
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "description": "The name of the field on the operand aggregated type that is aggregatable",
          "allOf": [
            {
              "$ref": "#/definitions/FieldName"
            }
          ]
        },
        "description": {
          "description": "A description of the aggregatable field. Gets added to the description of the field in the GraphQL schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "aggregateExpression": {
          "description": "The aggregate expression used to aggregate the type of the field",
          "allOf": [
            {
              "$ref": "#/definitions/AggregateExpressionName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AggregateCountDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregateCountDefinition",
      "title": "AggregateCountDefinition",
      "description": "Definition of a count aggregation function",
      "type": "object",
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "description": "Whether or not the aggregate function is available for use or not",
          "type": "boolean"
        },
        "description": {
          "description": "A description of the aggregation function. Gets added to the description of the field in the GraphQL schema.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "AggregateExpressionGraphQlDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregateExpressionGraphQlDefinition",
      "title": "AggregateExpressionGraphQlDefinition",
      "description": "The definition of how an aggregate expression should appear in the GraphQL API.",
      "examples": [
        {
          "selectTypeName": "Invoice_aggregate_fields"
        }
      ],
      "type": "object",
      "required": [
        "selectTypeName"
      ],
      "properties": {
        "selectTypeName": {
          "description": "The type name to use for the aggregate selection type",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            }
          ]
        },
        "deprecated": {
          "description": "Whether this command root field is deprecated. If set, this will be added to the graphql schema as a deprecated field.",
          "anyOf": [
            {
              "$ref": "#/definitions/Deprecated"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AggregateExpressionName": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregateExpressionName",
      "title": "AggregateExpressionName",
      "description": "The name of an aggregate expression.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "AggregateExpressionV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregateExpressionV1",
      "title": "AggregateExpressionV1",
      "description": "Definition of how to aggregate over a particular operand type",
      "type": "object",
      "required": [
        "name",
        "operand"
      ],
      "properties": {
        "name": {
          "description": "The name of the aggregate expression.",
          "allOf": [
            {
              "$ref": "#/definitions/AggregateExpressionName"
            }
          ]
        },
        "operand": {
          "description": "The type this aggregation expression aggregates over, and its associated configuration",
          "allOf": [
            {
              "$ref": "#/definitions/AggregateOperand"
            }
          ]
        },
        "count": {
          "description": "Configuration for the count aggregate function used over the operand",
          "anyOf": [
            {
              "$ref": "#/definitions/AggregateCountDefinition"
            },
            {
              "type": "null"
            }
          ]
        },
        "countDistinct": {
          "description": "Configuration for the count distinct aggregate function used over the operand",
          "anyOf": [
            {
              "$ref": "#/definitions/AggregateCountDefinition"
            },
            {
              "type": "null"
            }
          ]
        },
        "graphql": {
          "description": "Configuration for how this command should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/AggregateExpressionGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "The description of the aggregate expression. Gets added to the description of the command's root field in the GraphQL schema.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "AggregateFunctionMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregateFunctionMapping",
      "title": "AggregateFunctionMapping",
      "description": "Definition of how to map the aggregation function to a function in the data connector",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the aggregation function in the data connector",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorAggregationFunctionName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AggregateGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregateGraphqlConfig",
      "title": "AggregateGraphqlConfig",
      "description": "Configuration for the GraphQL schema for aggregates.",
      "type": "object",
      "required": [
        "countDistinctFieldName",
        "countFieldName",
        "filterInputFieldName"
      ],
      "properties": {
        "filterInputFieldName": {
          "description": "The name of the filter input parameter of aggregate fields and field name in predicates",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "countFieldName": {
          "description": "The name of the _count field used for the count aggregate function",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "countDistinctFieldName": {
          "description": "The name of the _count_distinct field used for the count distinct aggregate function",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AggregateOperand": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregateOperand",
      "title": "AggregateOperand",
      "description": "Definition of an aggregate expression's operand",
      "oneOf": [
        {
          "title": "Object",
          "description": "If the operand is an object type",
          "type": "object",
          "required": [
            "object"
          ],
          "properties": {
            "object": {
              "$ref": "#/definitions/ObjectAggregateOperand"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Scalar",
          "description": "If the operand is a scalar type",
          "type": "object",
          "required": [
            "scalar"
          ],
          "properties": {
            "scalar": {
              "$ref": "#/definitions/ScalarAggregateOperand"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AggregationFunctionDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregationFunctionDefinition",
      "title": "AggregationFunctionDefinition",
      "description": "Definition of an aggregation function",
      "type": "object",
      "required": [
        "name",
        "returnType"
      ],
      "properties": {
        "name": {
          "description": "The name of the aggregation function",
          "allOf": [
            {
              "$ref": "#/definitions/AggregationFunctionName"
            }
          ]
        },
        "description": {
          "description": "A description of the aggregation function. Gets added to the description of the field in the GraphQL schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "returnType": {
          "$ref": "#/definitions/TypeReference"
        }
      },
      "additionalProperties": false
    },
    "AggregationFunctionMappings": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregationFunctionMappings",
      "title": "AggregationFunctionMappings",
      "description": "Mapping of aggregation functions to their matching aggregation functions in the data connector.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AggregateFunctionMapping"
      }
    },
    "AggregationFunctionName": {
      "$id": "https://hasura.io/jsonschemas/metadata/AggregationFunctionName",
      "title": "AggregationFunctionName",
      "description": "The name of an aggregation function.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "ApolloFederationObjectKey": {
      "$id": "https://hasura.io/jsonschemas/metadata/ApolloFederationObjectKey",
      "title": "ApolloFederationObjectKey",
      "description": "The definition of a key for an apollo federation object.",
      "type": "object",
      "required": [
        "fields"
      ],
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldName"
          }
        }
      },
      "additionalProperties": false
    },
    "ArgumentDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/ArgumentDefinition",
      "title": "ArgumentDefinition",
      "description": "The definition of an argument for a field, command, or model.",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/ArgumentName"
        },
        "type": {
          "$ref": "#/definitions/TypeReference"
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ArgumentMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/ArgumentMapping",
      "title": "ArgumentMapping",
      "description": "Mapping of a comand or model argument name to the corresponding argument name used in the data connector. The key of this object is the argument name used in the command or model and the value is the argument name used in the data connector.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/DataConnectorArgumentName"
      }
    },
    "ArgumentMappingTarget": {
      "$id": "https://hasura.io/jsonschemas/metadata/ArgumentMappingTarget",
      "title": "ArgumentMappingTarget",
      "description": "An argument target for a relationship mapping.",
      "type": "object",
      "required": [
        "argumentName"
      ],
      "properties": {
        "argumentName": {
          "$ref": "#/definitions/ArgumentName"
        }
      },
      "additionalProperties": false
    },
    "ArgumentName": {
      "$id": "https://hasura.io/jsonschemas/metadata/ArgumentName",
      "title": "ArgumentName",
      "description": "The name of an argument.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "ArgumentPreset": {
      "$id": "https://hasura.io/jsonschemas/metadata/ArgumentPreset",
      "title": "ArgumentPreset",
      "description": "Preset value for an argument",
      "type": "object",
      "required": [
        "argument",
        "value"
      ],
      "properties": {
        "argument": {
          "description": "Argument name for preset",
          "allOf": [
            {
              "$ref": "#/definitions/ArgumentName"
            }
          ]
        },
        "value": {
          "description": "Value for preset",
          "allOf": [
            {
              "$ref": "#/definitions/ValueExpressionOrPredicate"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ArgumentsInputGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/ArgumentsInputGraphqlConfig",
      "title": "ArgumentsInputGraphqlConfig",
      "description": "Configuration for the arguments input.",
      "type": "object",
      "required": [
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "description": "The name of arguments passing field. Usually `args`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionComparableField": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionComparableField",
      "title": "BooleanExpressionComparableField",
      "description": "Comparison configuration definition for a field that can be used for a comparison",
      "type": "object",
      "required": [
        "booleanExpressionType",
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/FieldName"
        },
        "booleanExpressionType": {
          "$ref": "#/definitions/CustomTypeName"
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionComparableRelationship": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionComparableRelationship",
      "title": "BooleanExpressionComparableRelationship",
      "description": "Definition of a relationship that can be used for a comparison",
      "type": "object",
      "required": [
        "relationshipName"
      ],
      "properties": {
        "relationshipName": {
          "description": "The name of the relationship to use for comparison",
          "allOf": [
            {
              "$ref": "#/definitions/RelationshipName"
            }
          ]
        },
        "booleanExpressionType": {
          "description": "The boolean expression type to use for comparison. This is optional for relationships to models, and defaults to the filterExpressionType of the model",
          "anyOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionIsNull": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionIsNull",
      "title": "BooleanExpressionIsNull",
      "description": "Configuration for is_null in boolean expressions",
      "type": "object",
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionLogicalOperators": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionLogicalOperators",
      "title": "BooleanExpressionLogicalOperators",
      "description": "Configuration for logical operators in boolean expressions",
      "type": "object",
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionObjectOperand": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionObjectOperand",
      "title": "BooleanExpressionObjectOperand",
      "description": "Definition of an object type representing a boolean expression on an OpenDD object type.",
      "type": "object",
      "required": [
        "comparableFields",
        "comparableRelationships",
        "type"
      ],
      "properties": {
        "type": {
          "description": "The name of the object type that this boolean expression applies to.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "comparableFields": {
          "description": "The list of fields of the object type that can be used for comparison when evaluating this boolean expression.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BooleanExpressionComparableField"
          }
        },
        "comparableRelationships": {
          "description": "The list of relationships of the object type that can be used for comparison when evaluating this boolean expression.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BooleanExpressionComparableRelationship"
          }
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionOperand": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionOperand",
      "title": "BooleanExpressionOperand",
      "description": "Configuration for object or scalar boolean expression",
      "oneOf": [
        {
          "title": "Object",
          "description": "Definition of a boolean expression on an OpenDD object type",
          "type": "object",
          "required": [
            "object"
          ],
          "properties": {
            "object": {
              "$ref": "#/definitions/BooleanExpressionObjectOperand"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Scalar",
          "description": "Definition of a boolean expression on a scalar tyoe",
          "type": "object",
          "required": [
            "scalar"
          ],
          "properties": {
            "scalar": {
              "$ref": "#/definitions/BooleanExpressionScalarOperand"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BooleanExpressionScalarOperand": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionScalarOperand",
      "title": "BooleanExpressionScalarOperand",
      "description": "Definition of a scalar type representing a boolean expression on an OpenDD object type.",
      "type": "object",
      "required": [
        "comparisonOperators",
        "dataConnectorOperatorMapping",
        "type"
      ],
      "properties": {
        "type": {
          "description": "The OpenDD type name of the scalar type that this boolean expression applies to.",
          "allOf": [
            {
              "$ref": "#/definitions/TypeName"
            }
          ]
        },
        "comparisonOperators": {
          "description": "The list of comparison operators that can used on this scalar type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComparisonOperator"
          }
        },
        "dataConnectorOperatorMapping": {
          "description": "The list of mappings between OpenDD operator names and the names used in the data connector schema",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataConnectorOperatorMapping"
          }
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionTypeGraphQlConfiguration": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionTypeGraphQlConfiguration",
      "title": "BooleanExpressionTypeGraphQlConfiguration",
      "description": "GraphQL configuration of an OpenDD boolean expression type.",
      "type": "object",
      "required": [
        "typeName"
      ],
      "properties": {
        "typeName": {
          "description": "The name to use for the GraphQL type representation of this boolean expression type.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "BooleanExpressionTypeV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionTypeV1",
      "title": "BooleanExpressionTypeV1",
      "description": "Definition of a type representing a boolean expression on an OpenDD object type.",
      "type": "object",
      "required": [
        "isNull",
        "logicalOperators",
        "name",
        "operand"
      ],
      "properties": {
        "name": {
          "description": "The name to give this boolean expression type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "operand": {
          "description": "The type that this boolean expression applies to.",
          "allOf": [
            {
              "$ref": "#/definitions/BooleanExpressionOperand"
            }
          ]
        },
        "logicalOperators": {
          "description": "Whether to enable _and / _or / _not",
          "allOf": [
            {
              "$ref": "#/definitions/BooleanExpressionLogicalOperators"
            }
          ]
        },
        "isNull": {
          "description": "Whether to enable _is_null",
          "allOf": [
            {
              "$ref": "#/definitions/BooleanExpressionIsNull"
            }
          ]
        },
        "graphql": {
          "description": "Configuration for how this object type should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/BooleanExpressionTypeGraphQlConfiguration"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CollectionName": {
      "$id": "https://hasura.io/jsonschemas/metadata/CollectionName",
      "title": "CollectionName",
      "description": "The name of a collection in a data connector.",
      "type": "string"
    },
    "ColumnFieldMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/ColumnFieldMapping",
      "title": "ColumnFieldMapping",
      "description": "The target column in a data connector object that a source field maps to.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the target column",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorColumnName"
            }
          ]
        },
        "argumentMapping": {
          "description": "Arguments to the column field",
          "anyOf": [
            {
              "$ref": "#/definitions/ArgumentMapping"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CommandGraphQlDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/CommandGraphQlDefinition",
      "title": "CommandGraphQlDefinition",
      "description": "The definition of how a command should appear in the GraphQL API.",
      "examples": [
        {
          "rootFieldName": "getLatestArticle",
          "rootFieldKind": "Query"
        }
      ],
      "type": "object",
      "required": [
        "rootFieldKind",
        "rootFieldName"
      ],
      "properties": {
        "rootFieldName": {
          "description": "The name of the graphql root field to use for this command.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "rootFieldKind": {
          "description": "Whether to put this command in the Query or Mutation root of the GraphQL API.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlRootFieldKind"
            }
          ]
        },
        "deprecated": {
          "description": "Whether this command root field is deprecated. If set, this will be added to the graphql schema as a deprecated field.",
          "anyOf": [
            {
              "$ref": "#/definitions/Deprecated"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CommandName": {
      "$id": "https://hasura.io/jsonschemas/metadata/CommandName",
      "title": "CommandName",
      "description": "The name of a command.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "CommandPermission": {
      "$id": "https://hasura.io/jsonschemas/metadata/CommandPermission",
      "title": "CommandPermission",
      "description": "Defines the permissions for a role for a command.",
      "examples": [
        {
          "role": "user",
          "allowExecution": true,
          "argumentPresets": [
            {
              "argument": "user_id",
              "value": {
                "session_variable": "x-hasura-user_id"
              }
            }
          ]
        }
      ],
      "type": "object",
      "required": [
        "allowExecution",
        "role"
      ],
      "properties": {
        "role": {
          "description": "The role for which permissions are being defined.",
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            }
          ]
        },
        "allowExecution": {
          "description": "Whether the command is executable by the role.",
          "type": "boolean"
        },
        "argumentPresets": {
          "description": "Preset values for arguments for this role",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgumentPreset"
          }
        }
      },
      "additionalProperties": false
    },
    "CommandPermissionsV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/CommandPermissionsV1",
      "title": "CommandPermissionsV1",
      "description": "Definition of permissions for an OpenDD command.",
      "type": "object",
      "required": [
        "commandName",
        "permissions"
      ],
      "properties": {
        "commandName": {
          "description": "The name of the command for which permissions are being defined.",
          "allOf": [
            {
              "$ref": "#/definitions/CommandName"
            }
          ]
        },
        "permissions": {
          "description": "A list of command permissions, one for each role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandPermission"
          }
        }
      },
      "additionalProperties": false
    },
    "CommandRelationshipTarget": {
      "$id": "https://hasura.io/jsonschemas/metadata/CommandRelationshipTarget",
      "title": "CommandRelationshipTarget",
      "description": "The target command for a relationship.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the command.",
          "allOf": [
            {
              "$ref": "#/definitions/CommandName"
            }
          ]
        },
        "subgraph": {
          "description": "The subgraph of the target command. Defaults to the current subgraph.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!__)[_a-zA-Z][_a-zA-Z0-9]*$"
        }
      },
      "additionalProperties": false
    },
    "CommandSource": {
      "$id": "https://hasura.io/jsonschemas/metadata/CommandSource",
      "title": "CommandSource",
      "description": "Description of how a command maps to a particular data connector",
      "examples": [
        {
          "dataConnectorName": "data_connector",
          "dataConnectorCommand": {
            "function": "latest_article"
          },
          "argumentMapping": {}
        }
      ],
      "type": "object",
      "required": [
        "dataConnectorCommand",
        "dataConnectorName"
      ],
      "properties": {
        "dataConnectorName": {
          "description": "The name of the data connector backing this command.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "dataConnectorCommand": {
          "description": "The function/procedure in the data connector that backs this command.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorCommand"
            }
          ]
        },
        "argumentMapping": {
          "description": "Mapping from command argument names to data connector function or procedure argument names.",
          "default": {},
          "allOf": [
            {
              "$ref": "#/definitions/ArgumentMapping"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CommandV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/CommandV1",
      "title": "CommandV1",
      "description": "Definition of an OpenDD Command, which is a custom operation that can take arguments and returns an output. The semantics of a command are opaque to OpenDD.",
      "type": "object",
      "required": [
        "name",
        "outputType"
      ],
      "properties": {
        "name": {
          "description": "The name of the command.",
          "allOf": [
            {
              "$ref": "#/definitions/CommandName"
            }
          ]
        },
        "outputType": {
          "description": "The return type of the command.",
          "allOf": [
            {
              "$ref": "#/definitions/TypeReference"
            }
          ]
        },
        "arguments": {
          "description": "The list of arguments accepted by this command. Defaults to no arguments.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgumentDefinition"
          }
        },
        "source": {
          "description": "The source configuration for this command.",
          "anyOf": [
            {
              "$ref": "#/definitions/CommandSource"
            },
            {
              "type": "null"
            }
          ]
        },
        "graphql": {
          "description": "Configuration for how this command should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/CommandGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "The description of the command. Gets added to the description of the command's root field in the GraphQL schema.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ComparableField": {
      "$id": "https://hasura.io/jsonschemas/metadata/ComparableField",
      "title": "ComparableField",
      "description": "A field of an object type that can be used for comparison when evaluating a boolean expression.",
      "type": "object",
      "required": [
        "fieldName",
        "operators"
      ],
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/FieldName"
        },
        "operators": {
          "$ref": "#/definitions/EnableAllOrSpecific_for_OperatorName"
        }
      },
      "additionalProperties": false
    },
    "ComparisonOperator": {
      "$id": "https://hasura.io/jsonschemas/metadata/ComparisonOperator",
      "title": "ComparisonOperator",
      "description": "Definition of a comparison operator for a scalar type",
      "type": "object",
      "required": [
        "argumentType",
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name you want to give the operator in OpenDD / GraphQL",
          "allOf": [
            {
              "$ref": "#/definitions/OperatorName"
            }
          ]
        },
        "argumentType": {
          "description": "An OpenDD type",
          "allOf": [
            {
              "$ref": "#/definitions/TypeReference"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CustomTypeName": {
      "$id": "https://hasura.io/jsonschemas/metadata/CustomTypeName",
      "title": "CustomTypeName",
      "description": "The name of a user-defined type.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "DataConnectorAggregationFunctionMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorAggregationFunctionMapping",
      "title": "DataConnectorAggregationFunctionMapping",
      "description": "Definition of how to map an aggregate expression's aggregation functions to data connector aggregation functions.",
      "type": "object",
      "required": [
        "dataConnectorName",
        "dataConnectorScalarType",
        "functionMapping"
      ],
      "properties": {
        "dataConnectorName": {
          "description": "The data connector being mapped to",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "dataConnectorScalarType": {
          "description": "The matching scalar type in the data connector for the operand scalar type",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorScalarType"
            }
          ]
        },
        "functionMapping": {
          "description": "Mapping from Open DD aggregation function to data connector aggregation function",
          "allOf": [
            {
              "$ref": "#/definitions/AggregationFunctionMappings"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DataConnectorAggregationFunctionName": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorAggregationFunctionName",
      "title": "DataConnectorAggregationFunctionName",
      "description": "The name of an aggregation function in a data connector",
      "type": "string"
    },
    "DataConnectorArgumentName": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorArgumentName",
      "title": "DataConnectorArgumentName",
      "description": "The name of an argument as defined by a data connector.",
      "type": "string"
    },
    "DataConnectorArgumentPreset": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorArgumentPreset",
      "title": "DataConnectorArgumentPreset",
      "description": "An argument preset that can be applied to all functions/procedures of a connector",
      "type": "object",
      "required": [
        "argument",
        "value"
      ],
      "properties": {
        "argument": {
          "$ref": "#/definitions/DataConnectorArgumentName"
        },
        "value": {
          "$ref": "#/definitions/DataConnectorArgumentPresetValue"
        }
      },
      "additionalProperties": false
    },
    "DataConnectorArgumentPresetValue": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorArgumentPresetValue",
      "title": "DataConnectorArgumentPresetValue",
      "description": "The value of a data connector argument preset.",
      "type": "object",
      "required": [
        "httpHeaders"
      ],
      "properties": {
        "httpHeaders": {
          "description": "HTTP headers that can be preset from request",
          "allOf": [
            {
              "$ref": "#/definitions/HttpHeadersPreset"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DataConnectorColumnName": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorColumnName",
      "title": "DataConnectorColumnName",
      "description": "The name of a column in a data connector.",
      "type": "string"
    },
    "DataConnectorCommand": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorCommand",
      "title": "DataConnectorCommand",
      "oneOf": [
        {
          "title": "Function",
          "description": "A function as data connector command.",
          "type": "object",
          "required": [
            "function"
          ],
          "properties": {
            "function": {
              "$ref": "#/definitions/FunctionName"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Procedure",
          "description": "A procedure as data connector command.",
          "type": "object",
          "required": [
            "procedure"
          ],
          "properties": {
            "procedure": {
              "$ref": "#/definitions/ProcedureName"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DataConnectorLinkV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorLinkV1",
      "title": "DataConnectorLinkV1",
      "description": "Definition of a data connector - version 1.",
      "type": "object",
      "required": [
        "name",
        "schema",
        "url"
      ],
      "properties": {
        "name": {
          "description": "The name of the data connector.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "url": {
          "description": "The url(s) to access the data connector.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorUrlV1"
            }
          ]
        },
        "headers": {
          "description": "Key value map of HTTP headers to be sent with each request to the data connector. This is meant for protocol level use between engine and the data connector.",
          "default": {},
          "allOf": [
            {
              "$ref": "#/definitions/HttpHeaders"
            }
          ]
        },
        "schema": {
          "description": "The schema of the data connector. This schema is used as the source of truth when serving requests and the live schema of the data connector is not looked up.",
          "allOf": [
            {
              "$ref": "#/definitions/VersionedSchemaAndCapabilities"
            }
          ]
        },
        "argumentPresets": {
          "description": "Argument presets that applies to all functions and procedures of this data connector. Defaults to no argument presets.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataConnectorArgumentPreset"
          }
        },
        "responseHeaders": {
          "description": "HTTP response headers configuration that is forwarded from a data connector to the client.",
          "anyOf": [
            {
              "$ref": "#/definitions/ResponseHeaders"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DataConnectorName": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorName",
      "title": "DataConnectorName",
      "description": "The name of a data connector.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "DataConnectorObjectType": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorObjectType",
      "title": "DataConnectorObjectType",
      "description": "The name of an object type in a data connector.",
      "type": "string"
    },
    "DataConnectorOperatorMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorOperatorMapping",
      "title": "DataConnectorOperatorMapping",
      "description": "Mapping between OpenDD operator names and the names used in the data connector schema",
      "type": "object",
      "required": [
        "dataConnectorName",
        "dataConnectorScalarType",
        "operatorMapping"
      ],
      "properties": {
        "dataConnectorName": {
          "description": "Name of the data connector this mapping applies to",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "dataConnectorScalarType": {
          "description": "Name of the scalar type according to the data connector's schema",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorScalarType"
            }
          ]
        },
        "operatorMapping": {
          "title": "operator_mapping",
          "description": "Mapping between OpenDD operator names and the data connector's operator names Defaults to the same operator name (e.g. \"_eq: _eq\") if no explicit mapping is present.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataConnectorOperatorName"
          }
        }
      },
      "additionalProperties": false
    },
    "DataConnectorOperatorName": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorOperatorName",
      "title": "DataConnectorOperatorName",
      "description": "The name of an operator in a data connector.",
      "type": "string"
    },
    "DataConnectorScalarGraphQLConfiguration": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorScalarGraphQLConfiguration",
      "title": "DataConnectorScalarGraphQLConfiguration",
      "description": "GraphQL configuration of a data connector scalar",
      "type": "object",
      "properties": {
        "comparisonExpressionTypeName": {
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DataConnectorScalarRepresentationV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorScalarRepresentationV1",
      "title": "DataConnectorScalarRepresentationV1",
      "description": "The representation of a data connector scalar in terms of Open DD types. Deprecated in favour of `BooleanExpressionType`.",
      "examples": [
        {
          "dataConnectorName": "data_connector",
          "dataConnectorScalarType": "varchar",
          "representation": "String",
          "graphql": {
            "comparisonExpressionTypeName": "String_Comparison_Exp"
          }
        }
      ],
      "type": "object",
      "required": [
        "dataConnectorName",
        "dataConnectorScalarType",
        "representation"
      ],
      "properties": {
        "dataConnectorName": {
          "description": "The name of the data connector that this scalar type comes from.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "dataConnectorScalarType": {
          "description": "The name of the scalar type coming from the data connector.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorScalarType"
            }
          ]
        },
        "representation": {
          "description": "The name of the Open DD type that this data connector scalar type should be represented as.",
          "allOf": [
            {
              "$ref": "#/definitions/TypeName"
            }
          ]
        },
        "graphql": {
          "description": "Configuration for how this scalar's operators should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/DataConnectorScalarGraphQLConfiguration"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DataConnectorScalarType": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorScalarType",
      "title": "DataConnectorScalarType",
      "description": "The name of a scalar type in a data connector.",
      "type": "string"
    },
    "DataConnectorTypeMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorTypeMapping",
      "title": "DataConnectorTypeMapping",
      "description": "This defines the mapping of the fields of an object type to the corresponding columns of an object type in a data connector.",
      "type": "object",
      "required": [
        "dataConnectorName",
        "dataConnectorObjectType"
      ],
      "properties": {
        "dataConnectorName": {
          "$ref": "#/definitions/DataConnectorName"
        },
        "dataConnectorObjectType": {
          "$ref": "#/definitions/DataConnectorObjectType"
        },
        "fieldMapping": {
          "default": {},
          "allOf": [
            {
              "$ref": "#/definitions/FieldMappings"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "DataConnectorUrlV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorUrlV1",
      "title": "DataConnectorUrlV1",
      "description": "A URL to access a data connector. This can be a single URL or a pair of read and write URLs.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "singleUrl"
          ],
          "properties": {
            "singleUrl": {
              "$ref": "#/definitions/EnvironmentValue"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "readWriteUrls"
          ],
          "properties": {
            "readWriteUrls": {
              "$ref": "#/definitions/ReadWriteUrls"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Deprecated": {
      "$id": "https://hasura.io/jsonschemas/metadata/Deprecated",
      "title": "Deprecated",
      "description": "OpenDd configuration to indicate whether an object type field, relationship, model root field or command root field is deprecated.",
      "type": "object",
      "properties": {
        "reason": {
          "description": "The reason for deprecation.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "EnableAllOrSpecific_for_OperatorName": {
      "$id": "https://hasura.io/jsonschemas/metadata/EnableAllOrSpecific_for_OperatorName",
      "title": "EnableAllOrSpecific",
      "description": "Enable all or specific values.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "enableAll"
          ],
          "properties": {
            "enableAll": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "enableSpecific"
          ],
          "properties": {
            "enableSpecific": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperatorName"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "EnableAllOrSpecific_for_OrderByDirection": {
      "$id": "https://hasura.io/jsonschemas/metadata/EnableAllOrSpecific_for_OrderByDirection",
      "title": "EnableAllOrSpecific",
      "description": "Enable all or specific values.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "enableAll"
          ],
          "properties": {
            "enableAll": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "enableSpecific"
          ],
          "properties": {
            "enableSpecific": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderByDirection2"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "EnvironmentValue": {
      "$id": "https://hasura.io/jsonschemas/EnvironmentValue",
      "title": "EnvironmentValue",
      "description": "Either a literal string or a reference to a Hasura secret",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "valueFromEnv"
          ],
          "properties": {
            "valueFromEnv": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FieldAccess": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldAccess",
      "title": "RelationshipSourceFieldAccess",
      "description": "A field access in a relationship mapping.",
      "type": "object",
      "required": [
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/FieldName"
        }
      },
      "additionalProperties": false
    },
    "FieldArgumentDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldArgumentDefinition",
      "title": "FieldArgumentDefinition",
      "description": "The definition of an argument for a field in a user-defined object type.",
      "type": "object",
      "required": [
        "argumentType",
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/ArgumentName"
        },
        "argumentType": {
          "$ref": "#/definitions/TypeReference"
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "FieldComparisonPredicate": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldComparisonPredicate",
      "title": "FieldComparisonPredicate",
      "description": "Field comparison predicate filters objects based on a field value.",
      "type": "object",
      "required": [
        "field",
        "operator",
        "value"
      ],
      "properties": {
        "field": {
          "description": "The field name of the object type of the model to compare.",
          "allOf": [
            {
              "$ref": "#/definitions/FieldName"
            }
          ]
        },
        "operator": {
          "description": "The name of the operator to use for comparison.",
          "allOf": [
            {
              "$ref": "#/definitions/OperatorName"
            }
          ]
        },
        "value": {
          "description": "The value expression to compare against.",
          "allOf": [
            {
              "$ref": "#/definitions/ValueExpression"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FieldDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldDefinition",
      "title": "ObjectFieldDefinition",
      "description": "The definition of a field in a user-defined object type.",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "description": "The name of the field. This name is used both when referring to the field elsewhere in the metadata and when creating the corresponding GraphQl type.",
          "allOf": [
            {
              "$ref": "#/definitions/FieldName"
            }
          ]
        },
        "type": {
          "description": "The type of this field. This uses the GraphQL syntax to represent field types and must refer to one of the inbuilt OpenDd types or another user-defined type.",
          "allOf": [
            {
              "$ref": "#/definitions/TypeReference"
            }
          ]
        },
        "description": {
          "description": "The description of this field. Gets added to the description of the field's definition in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "deprecated": {
          "description": "Whether this field is deprecated. If set, the deprecation status is added to the field's graphql schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/Deprecated"
            },
            {
              "type": "null"
            }
          ]
        },
        "arguments": {
          "description": "The arguments for the field",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldArgumentDefinition"
          }
        }
      },
      "additionalProperties": false
    },
    "FieldIsNullPredicate": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldIsNullPredicate",
      "title": "FieldIsNullPredicate",
      "description": "Predicate to check if the given field is null.",
      "type": "object",
      "required": [
        "field"
      ],
      "properties": {
        "field": {
          "description": "The name of the field that should be checked for a null value.",
          "allOf": [
            {
              "$ref": "#/definitions/FieldName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FieldMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldMapping",
      "title": "FieldMapping",
      "oneOf": [
        {
          "description": "Source field directly maps to some column in the data connector.",
          "type": "object",
          "required": [
            "column"
          ],
          "properties": {
            "column": {
              "$ref": "#/definitions/ColumnFieldMapping"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FieldMappings": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldMappings",
      "title": "FieldMappings",
      "description": "Mapping of object fields to their source columns in the data connector.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/FieldMapping"
      }
    },
    "FieldName": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldName",
      "title": "FieldName",
      "description": "The name of a field in a user-defined object type.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "FieldPreset": {
      "$id": "https://hasura.io/jsonschemas/metadata/FieldPreset",
      "title": "FieldPreset",
      "description": "Preset value for a field",
      "type": "object",
      "required": [
        "field",
        "value"
      ],
      "properties": {
        "field": {
          "description": "Field name for preset",
          "allOf": [
            {
              "$ref": "#/definitions/FieldName"
            }
          ]
        },
        "value": {
          "description": "Value for preset",
          "allOf": [
            {
              "$ref": "#/definitions/ValueExpression"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FilterInputGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/FilterInputGraphqlConfig",
      "title": "FilterInputGraphqlConfig",
      "description": "Configuration for the filter operation.",
      "type": "object",
      "required": [
        "fieldName",
        "operatorNames"
      ],
      "properties": {
        "fieldName": {
          "description": "The name of the filter operation field. Usually `where`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "operatorNames": {
          "description": "The names of built-in filter operators.",
          "allOf": [
            {
              "$ref": "#/definitions/FilterInputOperatorNames"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FilterInputOperatorNames": {
      "$id": "https://hasura.io/jsonschemas/metadata/FilterInputOperatorNames",
      "title": "FilterInputOperatorNames",
      "description": "The names of built-in filter operators.",
      "type": "object",
      "required": [
        "and",
        "isNull",
        "not",
        "or"
      ],
      "properties": {
        "and": {
          "description": "The name of the `and` operator. Usually `_and`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "or": {
          "description": "The name of the `or` operator. Usually `_or`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "not": {
          "description": "The name of the `not` operator. Usually `_not`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "isNull": {
          "description": "The name of the `is null` operator. Usually `_is_null`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FunctionName": {
      "$id": "https://hasura.io/jsonschemas/metadata/FunctionName",
      "title": "FunctionName",
      "description": "The name of a function backing the command.",
      "type": "string"
    },
    "GraphQlFieldName": {
      "$id": "https://hasura.io/jsonschemas/metadata/GraphQlFieldName",
      "title": "GraphQlFieldName",
      "description": "The name of a GraphQL object field.",
      "type": "string"
    },
    "GraphQlRootFieldKind": {
      "$id": "https://hasura.io/jsonschemas/metadata/GraphQlRootFieldKind",
      "title": "GraphQlRootFieldKind",
      "type": "string",
      "enum": [
        "Query",
        "Mutation"
      ]
    },
    "GraphQlTypeName": {
      "$id": "https://hasura.io/jsonschemas/metadata/GraphQlTypeName",
      "title": "GraphQlTypeName",
      "description": "The name of a GraphQL type.",
      "type": "string"
    },
    "GraphqlApolloFederationConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/GraphqlApolloFederationConfig",
      "title": "GraphqlApolloFederationConfig",
      "description": "Configuration for the GraphQL schema of Hasura features for Apollo Federation.",
      "type": "object",
      "required": [
        "enableRootFields"
      ],
      "properties": {
        "enableRootFields": {
          "description": "Adds the `_entities` and `_services` root fields required for Apollo Federation.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "GraphqlConfigV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/GraphqlConfigV1",
      "title": "GraphqlConfigV1",
      "description": "GraphqlConfig object tells us two things:\n\n1. How the Graphql schema should look like for the features (`where`, `order_by` etc) Hasura provides 2. What features should be enabled/disabled across the subgraphs",
      "type": "object",
      "required": [
        "mutation",
        "query"
      ],
      "properties": {
        "query": {
          "$ref": "#/definitions/QueryGraphqlConfig"
        },
        "mutation": {
          "$ref": "#/definitions/MutationGraphqlConfig"
        },
        "apolloFederation": {
          "anyOf": [
            {
              "$ref": "#/definitions/GraphqlApolloFederationConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "HttpHeaders": {
      "$id": "https://hasura.io/jsonschemas/metadata/HttpHeaders",
      "title": "HttpHeaders",
      "description": "Key value map of HTTP headers to be sent with an HTTP request. The key is the header name and the value is a potential reference to an environment variable.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/EnvironmentValue"
      }
    },
    "HttpHeadersPreset": {
      "$id": "https://hasura.io/jsonschemas/metadata/HttpHeadersPreset",
      "title": "HttpHeadersPreset",
      "description": "Configuration of what HTTP request headers should be forwarded to a data connector.",
      "type": "object",
      "required": [
        "additional",
        "forward"
      ],
      "properties": {
        "forward": {
          "description": "List of HTTP headers that should be forwarded from HTTP requests",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "additional": {
          "description": "Additional headers that should be forwarded, from other contexts",
          "allOf": [
            {
              "$ref": "#/definitions/AdditionalHttpHeaders"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "InbuiltType": {
      "$id": "https://hasura.io/jsonschemas/metadata/InbuiltType",
      "title": "InbuiltType",
      "description": "An inbuilt primitive OpenDD type.",
      "type": "string",
      "enum": [
        "ID",
        "Int",
        "Float",
        "Boolean",
        "String"
      ]
    },
    "LeafConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/LeafConfig",
      "title": "LeafConfig",
      "description": "Leaf Configuration.",
      "type": "object",
      "additionalProperties": false
    },
    "LifecyclePluginHookConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/LifecyclePluginHookConfig",
      "title": "LifecyclePluginHookConfig",
      "description": "Configuration for a lifecycle plugin hook.",
      "type": "object",
      "required": [
        "request"
      ],
      "properties": {
        "request": {
          "description": "Configuration for the request to the lifecycle plugin hook.",
          "allOf": [
            {
              "$ref": "#/definitions/LifecyclePluginHookConfigRequest"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "LifecyclePluginHookConfigRequest": {
      "$id": "https://hasura.io/jsonschemas/metadata/LifecyclePluginHookConfigRequest",
      "title": "LifecyclePluginHookConfigRequest",
      "description": "Configuration for a lifecycle plugin hook request.",
      "type": "object",
      "required": [
        "rawRequest"
      ],
      "properties": {
        "headers": {
          "description": "Configuration for the headers.",
          "anyOf": [
            {
              "$ref": "#/definitions/LifecyclePluginHookHeadersConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "session": {
          "description": "Configuration for the session (includes roles and session variables).",
          "anyOf": [
            {
              "$ref": "#/definitions/LeafConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "rawRequest": {
          "description": "Configuration for the raw request.",
          "allOf": [
            {
              "$ref": "#/definitions/RawRequestConfig"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "LifecyclePluginHookHeadersConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/LifecyclePluginHookHeadersConfig",
      "title": "LifecyclePluginHookHeadersConfig",
      "description": "Configuration for a lifecycle plugin hook headers.",
      "type": "object",
      "properties": {
        "additional": {
          "description": "Additional headers to be sent with the request.",
          "anyOf": [
            {
              "$ref": "#/definitions/HttpHeaders"
            },
            {
              "type": "null"
            }
          ]
        },
        "forward": {
          "description": "Headers to be forwarded from the incoming request.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "LifecyclePluginHookV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/LifecyclePluginHookV1",
      "title": "LifecyclePluginHookV1",
      "description": "Definition of a lifecycle plugin hook - version 1.",
      "oneOf": [
        {
          "title": "LifecyclePluginHookPreParse",
          "description": "Definition of a lifecycle plugin hook for the pre-parse stage.",
          "type": "object",
          "required": [
            "config",
            "name",
            "pre",
            "url"
          ],
          "properties": {
            "pre": {
              "type": "string",
              "enum": [
                "parse"
              ]
            },
            "name": {
              "description": "The name of the lifecycle plugin hook.",
              "type": "string"
            },
            "url": {
              "description": "The URL to access the lifecycle plugin hook.",
              "allOf": [
                {
                  "$ref": "#/definitions/EnvironmentValue"
                }
              ]
            },
            "config": {
              "description": "Configuration for the lifecycle plugin hook.",
              "allOf": [
                {
                  "$ref": "#/definitions/LifecyclePluginHookConfig"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LimitInputGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/LimitInputGraphqlConfig",
      "title": "LimitInputGraphqlConfig",
      "description": "Configuration for the limit operation.",
      "type": "object",
      "required": [
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "description": "The name of the limit operation field. Usually `limit`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelAggregateGraphQlDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelAggregateGraphQlDefinition",
      "title": "ModelAggregateGraphQlDefinition",
      "description": "The definition of the GraphQL API for aggregating over a model.",
      "type": "object",
      "required": [
        "queryRootField"
      ],
      "properties": {
        "queryRootField": {
          "description": "The name of the query root field for this API.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "description": {
          "description": "The description of the aggregate graphql definition of the model. Gets added to the description of the aggregate root field of the model in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "deprecated": {
          "description": "Whether this aggregate query field is deprecated. If set, the deprecation status is added to the aggregate root field's graphql schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/Deprecated"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelApolloFederationConfiguration": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelApolloFederationConfiguration",
      "title": "ModelApolloFederationConfiguration",
      "description": "Apollo Federation configuration for a model.",
      "type": "object",
      "required": [
        "entitySource"
      ],
      "properties": {
        "entitySource": {
          "description": "Whether this model should be used as the source for fetching _entity for object of its type.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ModelGraphQlDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelGraphQlDefinition",
      "title": "ModelGraphQlDefinition",
      "description": "The definition of how a model appears in the GraphQL API.",
      "examples": [
        {
          "selectUniques": [
            {
              "queryRootField": "ArticleByID",
              "uniqueIdentifier": [
                "article_id"
              ],
              "description": "Description for the select unique ArticleByID"
            }
          ],
          "selectMany": {
            "queryRootField": "ArticleMany",
            "description": "Description for the select many ArticleMany"
          },
          "orderByExpressionType": "Article_Order_By",
          "aggregate": {
            "queryRootField": "ArticleAggregate",
            "description": "Aggregate over Articles"
          }
        }
      ],
      "type": "object",
      "required": [
        "selectUniques"
      ],
      "properties": {
        "selectUniques": {
          "description": "For each select unique defined here, a query root field is added to the GraphQL API that can be used to select a unique object from the model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectUniqueGraphQlDefinition"
          }
        },
        "selectMany": {
          "description": "Select many configuration for a model adds a query root field to the GraphQl API that can be used to retrieve multiple objects from the model.",
          "anyOf": [
            {
              "$ref": "#/definitions/SelectManyGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        },
        "argumentsInputType": {
          "description": "The type name of the input type used to hold the arguments of the model.",
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "orderByExpressionType": {
          "description": "The type name of the order by expression input type.",
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "apolloFederation": {
          "description": "Apollo Federation configuration",
          "anyOf": [
            {
              "$ref": "#/definitions/ModelApolloFederationConfiguration"
            },
            {
              "type": "null"
            }
          ]
        },
        "filterInputTypeName": {
          "description": "The type name of the input type used to hold the filtering settings used by aggregates (etc) to filter their input before processing",
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "aggregate": {
          "description": "Configures the query root field added to the GraphQL API that can be used to aggregate over the model",
          "anyOf": [
            {
              "$ref": "#/definitions/ModelAggregateGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelName": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelName",
      "title": "ModelName",
      "description": "The name of data model.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "ModelPermission": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelPermission",
      "title": "ModelPermission",
      "description": "Defines the permissions for an OpenDD model.",
      "examples": [
        {
          "role": "user",
          "select": {
            "filter": {
              "fieldComparison": {
                "field": "author_id",
                "operator": "_eq",
                "value": {
                  "sessionVariable": "x-hasura-user-id"
                }
              }
            },
            "argument_presets": [
              {
                "field": "likes_dogs",
                "value": {
                  "literal": true
                }
              }
            ]
          }
        }
      ],
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "description": "The role for which permissions are being defined.",
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            }
          ]
        },
        "select": {
          "description": "The permissions for selecting from this model for this role. If this is null, the role is not allowed to query the model.",
          "anyOf": [
            {
              "$ref": "#/definitions/SelectPermission"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelPermissionsV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelPermissionsV1",
      "title": "ModelPermissionsV1",
      "description": "Definition of permissions for an OpenDD model.",
      "type": "object",
      "required": [
        "modelName",
        "permissions"
      ],
      "properties": {
        "modelName": {
          "description": "The name of the model for which permissions are being defined.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelName"
            }
          ]
        },
        "permissions": {
          "description": "A list of model permissions, one for each role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelPermission"
          }
        }
      },
      "additionalProperties": false
    },
    "ModelPredicate": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelPredicate",
      "title": "ModelPredicate",
      "description": "A predicate that can be used to restrict the objects returned when querying a model.",
      "examples": [
        {
          "fieldComparison": {
            "field": "author_id",
            "operator": "_eq",
            "value": {
              "sessionVariable": "x-hasura-user-id"
            }
          }
        }
      ],
      "oneOf": [
        {
          "description": "Filters objects based on a field value.",
          "type": "object",
          "required": [
            "fieldComparison"
          ],
          "properties": {
            "fieldComparison": {
              "$ref": "#/definitions/FieldComparisonPredicate"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "fieldIsNull"
          ],
          "properties": {
            "fieldIsNull": {
              "$ref": "#/definitions/FieldIsNullPredicate"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Filters objects based on the relationship of a model.",
          "type": "object",
          "required": [
            "relationship"
          ],
          "properties": {
            "relationship": {
              "$ref": "#/definitions/RelationshipPredicate"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "And",
          "description": "Evaluates to true if all sub-predicates evaluate to true.",
          "type": "object",
          "required": [
            "and"
          ],
          "properties": {
            "and": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPredicate"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Or",
          "description": "Evaluates to true if any of the sub-predicates evaluate to true.",
          "type": "object",
          "required": [
            "or"
          ],
          "properties": {
            "or": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPredicate"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Not",
          "description": "Evaluates to true if the sub-predicate evaluates to false.",
          "type": "object",
          "required": [
            "not"
          ],
          "properties": {
            "not": {
              "$ref": "#/definitions/ModelPredicate"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ModelRelationshipTarget": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelRelationshipTarget",
      "title": "ModelRelationshipTarget",
      "description": "The target model for a relationship.",
      "type": "object",
      "required": [
        "name",
        "relationshipType"
      ],
      "properties": {
        "name": {
          "description": "The name of the data model.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelName"
            }
          ]
        },
        "subgraph": {
          "description": "The subgraph of the target model. Defaults to the current subgraph.",
          "type": [
            "string",
            "null"
          ],
          "pattern": "^(?!__)[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "relationshipType": {
          "description": "Type of the relationship - object or array.",
          "allOf": [
            {
              "$ref": "#/definitions/RelationshipType"
            }
          ]
        },
        "aggregate": {
          "description": "How to aggregate over the relationship. Only valid for array relationships",
          "anyOf": [
            {
              "$ref": "#/definitions/ModelRelationshipTargetAggregate"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelRelationshipTargetAggregate": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelRelationshipTargetAggregate",
      "title": "ModelRelationshipTargetAggregate",
      "description": "Which aggregate expression to use to aggregate the array relationship.",
      "type": "object",
      "required": [
        "aggregateExpression"
      ],
      "properties": {
        "aggregateExpression": {
          "description": "The name of the aggregate expression that defines how to aggregate across the relationship.",
          "allOf": [
            {
              "$ref": "#/definitions/AggregateExpressionName"
            }
          ]
        },
        "description": {
          "description": "The description of the relationship aggregate. Gets added to the description of the aggregate field in the GraphQL schema",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelSource": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelSource",
      "title": "ModelSource",
      "description": "Description of how a model maps to a particular data connector",
      "examples": [
        {
          "dataConnectorName": "data_connector",
          "collection": "articles"
        }
      ],
      "type": "object",
      "required": [
        "collection",
        "dataConnectorName"
      ],
      "properties": {
        "dataConnectorName": {
          "description": "The name of the data connector backing this model.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "collection": {
          "description": "The collection in the data connector that backs this model.",
          "allOf": [
            {
              "$ref": "#/definitions/CollectionName"
            }
          ]
        },
        "argumentMapping": {
          "description": "Mapping from model argument names to data connector collection argument names.",
          "default": {},
          "allOf": [
            {
              "$ref": "#/definitions/ArgumentMapping"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModelV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/ModelV1",
      "title": "ModelV1",
      "description": "The definition of a data model. A data model is a collection of objects of a particular type. Models can support one or more CRUD operations.",
      "type": "object",
      "required": [
        "name",
        "objectType",
        "orderableFields"
      ],
      "properties": {
        "name": {
          "description": "The name of the data model.",
          "allOf": [
            {
              "$ref": "#/definitions/ModelName"
            }
          ]
        },
        "objectType": {
          "description": "The type of the objects of which this model is a collection.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "globalIdSource": {
          "description": "Whether this model should be used as the global ID source for all objects of its type.",
          "default": false,
          "type": "boolean"
        },
        "arguments": {
          "description": "A list of arguments accepted by this model. Defaults to no arguments.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgumentDefinition"
          }
        },
        "source": {
          "description": "The source configuration for this model.",
          "anyOf": [
            {
              "$ref": "#/definitions/ModelSource"
            },
            {
              "type": "null"
            }
          ]
        },
        "filterExpressionType": {
          "description": "The boolean expression type that should be used to perform filtering on this model.",
          "anyOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "orderableFields": {
          "description": "A list of fields that can be used to order the objects in this model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderableField"
          }
        },
        "aggregateExpression": {
          "description": "The name of the AggregateExpression that defines how to aggregate over this model",
          "anyOf": [
            {
              "$ref": "#/definitions/AggregateExpressionName"
            },
            {
              "type": "null"
            }
          ]
        },
        "graphql": {
          "description": "Configuration for how this model should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/ModelGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "The description of the model. Gets added to the description of the model in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "MutationGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/MutationGraphqlConfig",
      "title": "MutationGraphqlConfig",
      "description": "Configuration for the GraphQL schema of Hasura features for mutations.",
      "type": "object",
      "required": [
        "rootOperationTypeName"
      ],
      "properties": {
        "rootOperationTypeName": {
          "description": "The name of the root operation type name for mutations. Usually `mutation`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "NamespacedObjects": {
      "$id": "https://hasura.io/jsonschemas/metadata/NamespacedObjects",
      "title": "NamespacedObjects",
      "description": "A collection of objects that are related to each other.",
      "type": "object",
      "required": [
        "name",
        "objects"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenDdSubgraphObject"
          }
        }
      },
      "additionalProperties": false
    },
    "NullableModelPredicate": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "$ref": "#/definitions/ModelPredicate"
        }
      ]
    },
    "ObjectAggregateOperand": {
      "$id": "https://hasura.io/jsonschemas/metadata/ObjectAggregateOperand",
      "title": "ObjectAggregateOperand",
      "description": "Definition of an aggregate over an object-typed operand",
      "type": "object",
      "required": [
        "aggregatableFields",
        "aggregatedType"
      ],
      "properties": {
        "aggregatedType": {
          "description": "The name of the object type the aggregate expression is aggregating",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "aggregatableFields": {
          "description": "The fields on the object that are aggregatable",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregatableFieldDefinition"
          }
        }
      },
      "additionalProperties": false
    },
    "ObjectApolloFederationConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/ObjectApolloFederationConfig",
      "title": "ObjectApolloFederationConfig",
      "description": "Configuration for apollo federation related types and directives.",
      "type": "object",
      "required": [
        "keys"
      ],
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApolloFederationObjectKey"
          }
        }
      },
      "additionalProperties": false
    },
    "ObjectBooleanExpressionTypeGraphQlConfiguration": {
      "$id": "https://hasura.io/jsonschemas/metadata/ObjectBooleanExpressionTypeGraphQlConfiguration",
      "title": "ObjectBooleanExpressionTypeGraphQlConfiguration",
      "description": "GraphQL configuration of an Open DD boolean expression type.",
      "type": "object",
      "required": [
        "typeName"
      ],
      "properties": {
        "typeName": {
          "description": "The name to use for the GraphQL type representation of this boolean expression type.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ObjectBooleanExpressionTypeV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/ObjectBooleanExpressionTypeV1",
      "title": "ObjectBooleanExpressionTypeV1",
      "description": "Definition of a type representing a boolean expression on an Open DD object type. Deprecated in favour of `BooleanExpressionType`.",
      "type": "object",
      "required": [
        "comparableFields",
        "dataConnectorName",
        "dataConnectorObjectType",
        "name",
        "objectType"
      ],
      "properties": {
        "name": {
          "description": "The name to give this object boolean expression type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "objectType": {
          "description": "The name of the object type that this boolean expression applies to.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "dataConnectorName": {
          "description": "The data connector this boolean expression type is based on.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "dataConnectorObjectType": {
          "description": "The object type in the data connector's schema this boolean expression type is based on.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorObjectType"
            }
          ]
        },
        "comparableFields": {
          "description": "The list of fields of the object type that can be used for comparison when evaluating this boolean expression.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComparableField"
          }
        },
        "graphql": {
          "description": "Configuration for how this object type should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/ObjectBooleanExpressionTypeGraphQlConfiguration"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ObjectTypeGraphQLConfiguration": {
      "$id": "https://hasura.io/jsonschemas/metadata/ObjectTypeGraphQLConfiguration",
      "title": "ObjectTypeGraphQLConfiguration",
      "description": "GraphQL configuration of an Open DD object type.",
      "type": "object",
      "properties": {
        "typeName": {
          "description": "The name to use for the GraphQL type representation of this object type when used in an output context.",
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "inputTypeName": {
          "description": "The name to use for the GraphQL type representation of this object type when used in an input context.",
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "apolloFederation": {
          "description": "Configuration for exposing apollo federation related types and directives.",
          "anyOf": [
            {
              "$ref": "#/definitions/ObjectApolloFederationConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ObjectTypeV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/ObjectTypeV1",
      "title": "ObjectTypeV1",
      "description": "Definition of a user-defined Open DD object type.",
      "type": "object",
      "required": [
        "fields",
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name to give this object type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "fields": {
          "description": "The list of fields defined for this object type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldDefinition"
          }
        },
        "globalIdFields": {
          "description": "The subset of fields that uniquely identify this object in the domain. Setting this property will automatically implement the GraphQL Relay Node interface for this object type and add an `id` global ID field. If setting this property, there must not be a field named `id` already present.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/FieldName"
          }
        },
        "graphql": {
          "description": "Configuration for how this object type should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/ObjectTypeGraphQLConfiguration"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "The description of the object. Gets added to the description of the object's definition in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "dataConnectorTypeMapping": {
          "description": "Mapping of this object type to corresponding object types in various data connectors.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataConnectorTypeMapping"
          }
        }
      },
      "additionalProperties": false
    },
    "OffsetInputGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/OffsetInputGraphqlConfig",
      "title": "OffsetInputGraphqlConfig",
      "description": "Configuration for the offset operation.",
      "type": "object",
      "required": [
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "description": "The name of the offset operation field. Usually `offset`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "OpenDdFlags": {
      "$id": "https://hasura.io/jsonschemas/metadata/OpenDdFlags",
      "title": "OpenDdFlags",
      "description": "Flags to configure the OpenDD metadata build.",
      "type": "object",
      "properties": {
        "require_graphql_config": {
          "default": false,
          "type": "boolean"
        },
        "require_valid_ndc_v01_version": {
          "default": false,
          "type": "boolean"
        },
        "bypass_relation_comparisons_ndc_capability": {
          "default": false,
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "OpenDdMetadataWithVersion": {
      "$id": "https://hasura.io/jsonschemas/metadata/OpenDdMetadataWithVersion",
      "title": "OpenDdMetadataWithVersion",
      "description": "Metadata with versioning.",
      "oneOf": [
        {
          "$id": "https://hasura.io/jsonschemas/metadata/OpenDdMetadataV1",
          "title": "OpenDdMetadataV1",
          "description": "The v1 metadata.",
          "type": "object",
          "required": [
            "namespaces",
            "version"
          ],
          "properties": {
            "version": {
              "type": "string",
              "enum": [
                "v1"
              ]
            },
            "namespaces": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NamespacedObjects"
              }
            },
            "flags": {
              "default": {
                "require_graphql_config": false,
                "require_valid_ndc_v01_version": false,
                "bypass_relation_comparisons_ndc_capability": false
              },
              "allOf": [
                {
                  "$ref": "#/definitions/OpenDdFlags"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/OpenDdMetadataV2",
          "title": "OpenDdMetadataV2",
          "description": "The v2 metadata.",
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "type": "string",
              "enum": [
                "v2"
              ]
            },
            "supergraph": {
              "default": {
                "objects": []
              },
              "allOf": [
                {
                  "$ref": "#/definitions/OpenDdSupergraph"
                }
              ]
            },
            "subgraphs": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenDdSubgraph"
              }
            },
            "flags": {
              "default": {
                "require_graphql_config": false,
                "require_valid_ndc_v01_version": false,
                "bypass_relation_comparisons_ndc_capability": false
              },
              "allOf": [
                {
                  "$ref": "#/definitions/OpenDdFlags"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/OpenDdMetadataV3",
          "title": "OpenDdMetadataV3",
          "description": "The v3 metadata.",
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "type": "string",
              "enum": [
                "v3"
              ]
            },
            "subgraphs": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpenDdSubgraph"
              }
            },
            "flags": {
              "default": {
                "require_graphql_config": false,
                "require_valid_ndc_v01_version": false,
                "bypass_relation_comparisons_ndc_capability": false
              },
              "allOf": [
                {
                  "$ref": "#/definitions/OpenDdFlags"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OpenDdSessionVariable": {
      "description": "Used to represent the name of a session variable, like \"x-hasura-role\".",
      "type": "string"
    },
    "OpenDdSubgraph": {
      "$id": "https://hasura.io/jsonschemas/metadata/OpenDdSubgraph",
      "title": "OpenDdSubgraph",
      "description": "A subgraph is a collection of objects that belong to the same data domain.",
      "type": "object",
      "required": [
        "name",
        "objects"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^(?!__)[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenDdSubgraphObject"
          }
        }
      },
      "additionalProperties": false
    },
    "OpenDdSubgraphObject": {
      "$id": "https://hasura.io/jsonschemas/metadata/OpenDdSubgraphObject",
      "title": "OpenDdSubgraphObject",
      "oneOf": [
        {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorLink",
          "title": "DataConnectorLink",
          "description": "Definition of a data connector, used to bring in sources of data and connect them to OpenDD models and commands.",
          "examples": [
            {
              "kind": "DataConnectorLink",
              "version": "v1",
              "definition": {
                "name": "data_connector",
                "url": {
                  "singleUrl": {
                    "value": "http://data_connector:8100"
                  }
                },
                "headers": {},
                "schema": {
                  "version": "v0.1",
                  "schema": {
                    "scalar_types": {},
                    "object_types": {},
                    "collections": [],
                    "functions": [],
                    "procedures": []
                  },
                  "capabilities": {
                    "version": "0.1.3",
                    "capabilities": {
                      "query": {
                        "nested_fields": {},
                        "variables": {}
                      },
                      "mutation": {}
                    }
                  }
                }
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "DataConnectorLink"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/DataConnectorLinkV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/GraphqlConfig",
          "title": "GraphqlConfig",
          "description": "GraphqlConfig object tells us two things:\n\n1. How the Graphql schema should look like for the features (`where`, `order_by` etc) Hasura provides 2. What features should be enabled/disabled across the subgraphs",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "GraphqlConfig"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/GraphqlConfigV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/ObjectType",
          "title": "ObjectType",
          "description": "Definition of a user-defined Open DD object type.",
          "examples": [
            {
              "kind": "ObjectType",
              "version": "v1",
              "definition": {
                "name": "Author",
                "fields": [
                  {
                    "name": "author_id",
                    "type": "Int!",
                    "description": "The id of the author"
                  },
                  {
                    "name": "first_name",
                    "type": "String",
                    "description": "The first name of the author"
                  },
                  {
                    "name": "last_name",
                    "type": "String",
                    "description": "The last name of the author"
                  },
                  {
                    "name": "biography",
                    "type": "String",
                    "description": "AI generated biography for the author",
                    "arguments": [
                      {
                        "name": "ai_model",
                        "argumentType": "String!",
                        "description": "The AI model to use for generating the biography"
                      }
                    ]
                  }
                ],
                "description": "An author of a book",
                "globalIdFields": [
                  "author_id"
                ],
                "graphql": {
                  "typeName": "Author"
                },
                "dataConnectorTypeMapping": [
                  {
                    "dataConnectorName": "my_db",
                    "dataConnectorObjectType": "author",
                    "fieldMapping": {
                      "author_id": {
                        "column": {
                          "name": "id"
                        }
                      }
                    }
                  },
                  {
                    "dataConnectorName": "my_vector_db",
                    "dataConnectorObjectType": "author",
                    "fieldMapping": {
                      "biography": {
                        "column": {
                          "name": "biography",
                          "argumentMapping": {
                            "ai_model": "model"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "ObjectType"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ObjectTypeV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/ScalarType",
          "title": "ScalarType",
          "description": "Definition of a user-defined scalar type that that has opaque semantics.",
          "examples": [
            {
              "kind": "ScalarType",
              "version": "v1",
              "name": "CustomString",
              "graphql": {
                "typeName": "CustomString"
              },
              "description": "A custom string type"
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "ScalarType"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ScalarTypeV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/ObjectBooleanExpressionType",
          "title": "ObjectBooleanExpressionType",
          "description": "Definition of a type representing a boolean expression on an Open DD object type.",
          "examples": [
            {
              "kind": "ObjectBooleanExpressionType",
              "version": "v1",
              "definition": {
                "name": "AuthorBoolExp",
                "objectType": "Author",
                "dataConnectorName": "my_db",
                "dataConnectorObjectType": "author",
                "comparableFields": [
                  {
                    "fieldName": "article_id",
                    "operators": {
                      "enableAll": true
                    }
                  },
                  {
                    "fieldName": "title",
                    "operators": {
                      "enableAll": true
                    }
                  },
                  {
                    "fieldName": "author_id",
                    "operators": {
                      "enableAll": true
                    }
                  }
                ],
                "graphql": {
                  "typeName": "Author_bool_exp"
                }
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "ObjectBooleanExpressionType"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ObjectBooleanExpressionTypeV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/BooleanExpressionType",
          "title": "BooleanExpressionType",
          "description": "Definition of a type representing a boolean expression on an OpenDD type.",
          "examples": [
            {
              "kind": "BooleanExpressionType",
              "version": "v1",
              "definition": {
                "name": "Album_bool_exp",
                "operand": {
                  "object": {
                    "type": "Album",
                    "comparableFields": [
                      {
                        "fieldName": "AlbumId",
                        "booleanExpressionType": "pg_Int_Comparison_exp"
                      },
                      {
                        "fieldName": "ArtistId",
                        "booleanExpressionType": "pg_Int_Comparison_exp_with_is_null"
                      },
                      {
                        "fieldName": "Address",
                        "booleanExpressionType": "Address_bool_exp"
                      }
                    ],
                    "comparableRelationships": [
                      {
                        "relationshipName": "artist",
                        "booleanExpressionType": "Artist_bool_exp"
                      }
                    ]
                  }
                },
                "logicalOperators": {
                  "enable": true
                },
                "isNull": {
                  "enable": true
                },
                "graphql": {
                  "typeName": "App_Album_bool_exp"
                }
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "BooleanExpressionType"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/BooleanExpressionTypeV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorScalarRepresentation",
          "title": "DataConnectorScalarRepresentation",
          "description": "The representation of a data connector scalar in terms of Open DD types",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "DataConnectorScalarRepresentation"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/DataConnectorScalarRepresentationV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/AggregateExpression",
          "title": "AggregateExpression",
          "description": "Definition of an aggregate expression on an OpenDD type.",
          "examples": [
            {
              "kind": "AggregateExpression",
              "version": "v1",
              "definition": {
                "name": "Invoice_aggregate_exp",
                "operand": {
                  "object": {
                    "aggregatedType": "Invoice",
                    "aggregatableFields": [
                      {
                        "fieldName": "Total",
                        "aggregateExpression": "Float_aggregate_exp"
                      }
                    ]
                  }
                },
                "graphql": {
                  "selectTypeName": "Invoice_aggregate_fields"
                },
                "description": "Aggregate over Invoices"
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "AggregateExpression"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/AggregateExpressionV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/Model",
          "title": "Model",
          "description": "The definition of a data model. A data model is a collection of objects of a particular type. Models can support one or more CRUD operations.",
          "examples": [
            {
              "kind": "Model",
              "version": "v1",
              "definition": {
                "name": "Articles",
                "objectType": "article",
                "globalIdSource": true,
                "arguments": [],
                "source": {
                  "dataConnectorName": "data_connector",
                  "collection": "articles",
                  "argumentMapping": {}
                },
                "filterExpressionType": "Article_bool_exp",
                "orderableFields": [
                  {
                    "fieldName": "article_id",
                    "orderByDirections": {
                      "enableAll": true
                    }
                  },
                  {
                    "fieldName": "title",
                    "orderByDirections": {
                      "enableAll": true
                    }
                  },
                  {
                    "fieldName": "author_id",
                    "orderByDirections": {
                      "enableAll": true
                    }
                  }
                ],
                "graphql": {
                  "selectUniques": [
                    {
                      "queryRootField": "ArticleByID",
                      "uniqueIdentifier": [
                        "article_id"
                      ],
                      "description": "Description for the select unique ArticleByID"
                    }
                  ],
                  "selectMany": {
                    "queryRootField": "ArticleMany",
                    "description": "Description for the select many ArticleMany"
                  },
                  "orderByExpressionType": "Article_Order_By",
                  "apolloFederation": {
                    "entitySource": true
                  }
                },
                "description": "Description for the model Articles"
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "Model"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ModelV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/Command",
          "title": "Command",
          "description": "The definition of a command. A command is a user-defined operation which can take arguments and returns an output. The semantics of a command are opaque to the Open DD specification.",
          "examples": [
            {
              "kind": "Command",
              "version": "v1",
              "definition": {
                "name": "get_latest_article",
                "outputType": "commandArticle",
                "arguments": [],
                "source": {
                  "dataConnectorName": "data_connector",
                  "dataConnectorCommand": {
                    "function": "latest_article"
                  },
                  "argumentMapping": {}
                },
                "graphql": {
                  "rootFieldName": "getLatestArticle",
                  "rootFieldKind": "Query"
                },
                "description": "Get the latest article"
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "Command"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/CommandV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/Relationship",
          "title": "Relationship",
          "description": "Definition of a relationship on an OpenDD type which allows it to be extended with related models or commands.",
          "examples": [
            {
              "kind": "Relationship",
              "version": "v1",
              "definition": {
                "name": "Articles",
                "source": "author",
                "target": {
                  "model": {
                    "name": "Articles",
                    "subgraph": null,
                    "relationshipType": "Array"
                  }
                },
                "mapping": [
                  {
                    "source": {
                      "fieldPath": [
                        {
                          "fieldName": "author_id"
                        }
                      ]
                    },
                    "target": {
                      "modelField": [
                        {
                          "fieldName": "author_id"
                        }
                      ]
                    }
                  }
                ],
                "description": "Articles written by an author"
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "Relationship"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/RelationshipV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/TypePermissions",
          "title": "TypePermissions",
          "description": "Definition of permissions for an OpenDD type.",
          "examples": [
            {
              "kind": "TypePermissions",
              "version": "v1",
              "definition": {
                "typeName": "article",
                "permissions": [
                  {
                    "role": "admin",
                    "output": {
                      "allowedFields": [
                        "article_id",
                        "author_id",
                        "title"
                      ]
                    }
                  },
                  {
                    "role": "user",
                    "output": {
                      "allowedFields": [
                        "article_id",
                        "author_id"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "TypePermissions"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/TypePermissionsV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelPermissions",
          "title": "ModelPermissions",
          "description": "Definition of permissions for an OpenDD model.",
          "examples": [
            {
              "kind": "ModelPermissions",
              "version": "v1",
              "definition": {
                "modelName": "Articles",
                "permissions": [
                  {
                    "role": "admin",
                    "select": {
                      "filter": null
                    }
                  },
                  {
                    "role": "user",
                    "select": {
                      "filter": {
                        "fieldComparison": {
                          "field": "author_id",
                          "operator": "_eq",
                          "value": {
                            "sessionVariable": "x-hasura-user-id"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "ModelPermissions"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ModelPermissionsV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandPermissions",
          "title": "CommandPermissions",
          "description": "Definition of permissions for an OpenDD command.",
          "examples": [
            {
              "kind": "CommandPermissions",
              "version": "v1",
              "definition": {
                "commandName": "get_article_by_id",
                "permissions": [
                  {
                    "role": "admin",
                    "allowExecution": true
                  },
                  {
                    "role": "user",
                    "allowExecution": true
                  }
                ]
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "CommandPermissions"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/CommandPermissionsV1"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "$id": "https://hasura.io/jsonschemas/metadata/LifecyclePluginHook",
          "title": "LifecyclePluginHook",
          "description": "Definition of a lifecycle plugin hook.",
          "examples": [
            {
              "kind": "LifecyclePluginHook",
              "version": "v1",
              "definition": {
                "pre": "parse",
                "name": "test",
                "url": {
                  "value": "http://localhost:8080"
                },
                "config": {
                  "request": {
                    "headers": {
                      "additional": {
                        "hasura-m-auth": {
                          "value": "zZkhKqFjqXR4g5MZCsJUZCnhCcoPyZ"
                        }
                      }
                    },
                    "session": {},
                    "rawRequest": {
                      "query": {},
                      "variables": {}
                    }
                  }
                }
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "LifecyclePluginHook"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/LifecyclePluginHookV1"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ]
    },
    "OpenDdSupergraph": {
      "$id": "https://hasura.io/jsonschemas/metadata/OpenDdSupergraph",
      "title": "OpenDdSupergraph",
      "description": "A collection of objects that apply to the entire supergraph.",
      "type": "object",
      "properties": {
        "objects": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenDdSupergraphObject"
          }
        }
      },
      "additionalProperties": false
    },
    "OpenDdSupergraphObject": {
      "$id": "https://hasura.io/jsonschemas/metadata/OpenDdSupergraphObject",
      "title": "OpenDdSupergraphObject",
      "oneOf": [
        {
          "$id": "https://hasura.io/jsonschemas/metadata/GraphqlConfig",
          "title": "GraphqlConfig",
          "description": "GraphqlConfig object tells us two things:\n\n1. How the Graphql schema should look like for the features (`where`, `order_by` etc) Hasura provides 2. What features should be enabled/disabled across the subgraphs",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "GraphqlConfig"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/GraphqlConfigV1"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ]
    },
    "OperatorName": {
      "$id": "https://hasura.io/jsonschemas/metadata/OperatorName",
      "title": "OperatorName",
      "description": "The name of an operator",
      "type": "string"
    },
    "OrderByDirection": {
      "$id": "https://hasura.io/jsonschemas/metadata/OrderByDirection",
      "title": "OrderByDirection",
      "description": "Sort direction.",
      "oneOf": [
        {
          "description": "Ascending.",
          "type": "string",
          "enum": [
            "Asc"
          ]
        },
        {
          "description": "Descending.",
          "type": "string",
          "enum": [
            "Desc"
          ]
        }
      ]
    },
    "OrderByDirection2": {
      "$id": "https://hasura.io/jsonschemas/metadata/OrderByDirection2",
      "title": "OrderByDirection",
      "type": "string",
      "enum": [
        "Asc",
        "Desc"
      ]
    },
    "OrderByDirectionValues": {
      "$id": "https://hasura.io/jsonschemas/metadata/OrderByDirectionValues",
      "title": "OrderByDirectionValues",
      "description": "The names of the direction parameters.",
      "type": "object",
      "required": [
        "asc",
        "desc"
      ],
      "properties": {
        "asc": {
          "description": "The name of the ascending parameter. Usually `Asc`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "desc": {
          "description": "The name of the descending parameter. Usually `Desc`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "OrderByEnumTypeName": {
      "$id": "https://hasura.io/jsonschemas/metadata/OrderByEnumTypeName",
      "title": "OrderByEnumTypeName",
      "description": "Type name for a sort directions enum, with the given set of possible directions.",
      "type": "object",
      "required": [
        "directions",
        "typeName"
      ],
      "properties": {
        "directions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderByDirection"
          }
        },
        "typeName": {
          "$ref": "#/definitions/GraphQlTypeName"
        }
      },
      "additionalProperties": false
    },
    "OrderByInputGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/OrderByInputGraphqlConfig",
      "title": "OrderByInputGraphqlConfig",
      "description": "Configuration for the sort operation.",
      "type": "object",
      "required": [
        "enumDirectionValues",
        "enumTypeNames",
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "description": "The name of the filter operation field. Usually `order_by`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "enumDirectionValues": {
          "description": "The names of the direction parameters.",
          "allOf": [
            {
              "$ref": "#/definitions/OrderByDirectionValues"
            }
          ]
        },
        "enumTypeNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderByEnumTypeName"
          }
        }
      },
      "additionalProperties": false
    },
    "OrderableField": {
      "$id": "https://hasura.io/jsonschemas/metadata/OrderableField",
      "title": "OrderableField",
      "description": "A field that can be used to order the objects in a model.",
      "type": "object",
      "required": [
        "fieldName",
        "orderByDirections"
      ],
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/FieldName"
        },
        "orderByDirections": {
          "$ref": "#/definitions/EnableAllOrSpecific_for_OrderByDirection"
        }
      },
      "additionalProperties": false
    },
    "ProcedureName": {
      "$id": "https://hasura.io/jsonschemas/metadata/ProcedureName",
      "title": "ProcedureName",
      "description": "The name of a procedure backing the command.",
      "type": "string"
    },
    "QueryGraphqlConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/QueryGraphqlConfig",
      "title": "QueryGraphqlConfig",
      "description": "Configuration for the GraphQL schema of Hasura features for queries. `None` means disable the feature.",
      "type": "object",
      "required": [
        "rootOperationTypeName"
      ],
      "properties": {
        "rootOperationTypeName": {
          "description": "The name of the root operation type name for queries. Usually `query`.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            }
          ]
        },
        "argumentsInput": {
          "description": "Configuration for the arguments input.",
          "anyOf": [
            {
              "$ref": "#/definitions/ArgumentsInputGraphqlConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "limitInput": {
          "description": "Configuration for the limit operation.",
          "anyOf": [
            {
              "$ref": "#/definitions/LimitInputGraphqlConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "offsetInput": {
          "description": "Configuration for the offset operation.",
          "anyOf": [
            {
              "$ref": "#/definitions/OffsetInputGraphqlConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "filterInput": {
          "description": "Configuration for the filter operation.",
          "anyOf": [
            {
              "$ref": "#/definitions/FilterInputGraphqlConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "orderByInput": {
          "description": "Configuration for the sort operation.",
          "anyOf": [
            {
              "$ref": "#/definitions/OrderByInputGraphqlConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "aggregate": {
          "description": "Configuration for aggregates",
          "anyOf": [
            {
              "$ref": "#/definitions/AggregateGraphqlConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RawRequestConfig": {
      "$id": "https://hasura.io/jsonschemas/metadata/RawRequestConfig",
      "title": "RawRequestConfig",
      "description": "Configuration for the raw request.",
      "type": "object",
      "properties": {
        "query": {
          "description": "Configuration for the query.",
          "anyOf": [
            {
              "$ref": "#/definitions/LeafConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "variables": {
          "description": "Configuration for the variables.",
          "anyOf": [
            {
              "$ref": "#/definitions/LeafConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ReadWriteUrls": {
      "$id": "https://hasura.io/jsonschemas/metadata/ReadWriteUrls",
      "title": "ReadWriteUrls",
      "description": "A pair of URLs to access a data connector, one for reading and one for writing.",
      "type": "object",
      "required": [
        "read",
        "write"
      ],
      "properties": {
        "read": {
          "$ref": "#/definitions/EnvironmentValue"
        },
        "write": {
          "$ref": "#/definitions/EnvironmentValue"
        }
      },
      "additionalProperties": false
    },
    "RelationshipGraphQlDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipGraphQlDefinition",
      "title": "RelationshipGraphQlDefinition",
      "description": "The definition of how a relationship appears in the GraphQL API",
      "type": "object",
      "properties": {
        "aggregateFieldName": {
          "description": "The field name to use for the field that represents an aggregate over the relationship",
          "anyOf": [
            {
              "$ref": "#/definitions/FieldName"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RelationshipMapping": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipMapping",
      "title": "RelationshipMapping",
      "description": "Definition of a how a particular field in the source maps to a target field or argument.",
      "examples": [
        {
          "source": {
            "fieldPath": [
              {
                "fieldName": "author_id"
              }
            ]
          },
          "target": {
            "modelField": [
              {
                "fieldName": "author_id"
              }
            ]
          }
        }
      ],
      "type": "object",
      "required": [
        "source",
        "target"
      ],
      "properties": {
        "source": {
          "description": "The source configuration for this relationship mapping.",
          "allOf": [
            {
              "$ref": "#/definitions/RelationshipMappingSource"
            }
          ]
        },
        "target": {
          "description": "The target configuration for this relationship mapping.",
          "allOf": [
            {
              "$ref": "#/definitions/RelationshipMappingTarget"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RelationshipMappingSource": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipMappingSource",
      "title": "RelationshipMappingSource",
      "description": "The source configuration for a relationship mapping.",
      "oneOf": [
        {
          "title": "SourceValue",
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "$ref": "#/definitions/ValueExpression"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "SourceField",
          "type": "object",
          "required": [
            "fieldPath"
          ],
          "properties": {
            "fieldPath": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FieldAccess"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RelationshipMappingTarget": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipMappingTarget",
      "title": "RelationshipMappingTarget",
      "description": "The target configuration for a relationship mapping.",
      "oneOf": [
        {
          "title": "TargetArgument",
          "type": "object",
          "required": [
            "argument"
          ],
          "properties": {
            "argument": {
              "$ref": "#/definitions/ArgumentMappingTarget"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "TargetModelField",
          "type": "object",
          "required": [
            "modelField"
          ],
          "properties": {
            "modelField": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FieldAccess"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RelationshipName": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipName",
      "title": "RelationshipName",
      "description": "The name of the GraphQL relationship field.",
      "type": "string",
      "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
    },
    "RelationshipPredicate": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipPredicate",
      "title": "RelationshipPredicate",
      "description": "Relationship predicate filters objects of a source model based on a predicate on the related model.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the relationship of the object type of the model to follow.",
          "allOf": [
            {
              "$ref": "#/definitions/RelationshipName"
            }
          ]
        },
        "predicate": {
          "description": "The predicate to apply on the related objects. If this is null, then the predicate evaluates to true as long as there is at least one related object present.",
          "anyOf": [
            {
              "$ref": "#/definitions/ModelPredicate"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RelationshipTarget": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipTarget",
      "title": "RelationshipTarget",
      "description": "The target for a relationship.",
      "examples": [
        {
          "model": {
            "name": "Articles",
            "subgraph": null,
            "relationshipType": "Array"
          }
        }
      ],
      "oneOf": [
        {
          "type": "object",
          "required": [
            "model"
          ],
          "properties": {
            "model": {
              "$ref": "#/definitions/ModelRelationshipTarget"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "command"
          ],
          "properties": {
            "command": {
              "$ref": "#/definitions/CommandRelationshipTarget"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RelationshipType": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipType",
      "title": "RelationshipType",
      "description": "Type of the relationship.",
      "oneOf": [
        {
          "description": "Select one related object from the target.",
          "type": "string",
          "enum": [
            "Object"
          ]
        },
        {
          "description": "Select multiple related objects from the target.",
          "type": "string",
          "enum": [
            "Array"
          ]
        }
      ]
    },
    "RelationshipV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/RelationshipV1",
      "title": "RelationshipV1",
      "description": "Definition of a relationship on an OpenDD type which allows it to be extended with related models or commands.",
      "type": "object",
      "required": [
        "mapping",
        "name",
        "sourceType",
        "target"
      ],
      "properties": {
        "name": {
          "description": "The name of the relationship.",
          "allOf": [
            {
              "$ref": "#/definitions/RelationshipName"
            }
          ]
        },
        "sourceType": {
          "description": "The source type of the relationship.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "target": {
          "description": "The target of the relationship.",
          "allOf": [
            {
              "$ref": "#/definitions/RelationshipTarget"
            }
          ]
        },
        "mapping": {
          "description": "The mapping configuration of source to target for the relationship.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationshipMapping"
          }
        },
        "description": {
          "description": "The description of the relationship. Gets added to the description of the relationship in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "deprecated": {
          "description": "Whether this relationship is deprecated. If set, the deprecation status is added to the relationship field's graphql schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/Deprecated"
            },
            {
              "type": "null"
            }
          ]
        },
        "graphql": {
          "description": "Configuration for how this relationship should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/RelationshipGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ResponseHeaders": {
      "$id": "https://hasura.io/jsonschemas/metadata/ResponseHeaders",
      "title": "ResponseHeaders",
      "description": "Configuration of what HTTP response headers should be forwarded from a data connector to the client in HTTP response.",
      "type": "object",
      "required": [
        "forwardHeaders",
        "headersField",
        "resultField"
      ],
      "properties": {
        "headersField": {
          "description": "Name of the field in the NDC function/procedure's result which contains the response headers",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorColumnName"
            }
          ]
        },
        "resultField": {
          "description": "Name of the field in the NDC function/procedure's result which contains the result",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorColumnName"
            }
          ]
        },
        "forwardHeaders": {
          "description": "List of actual HTTP response headers from the data connector to be set as response headers",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Role": {
      "$id": "https://hasura.io/jsonschemas/metadata/Role",
      "title": "Role",
      "type": "string"
    },
    "ScalarAggregateOperand": {
      "$id": "https://hasura.io/jsonschemas/metadata/ScalarAggregateOperand",
      "title": "ScalarAggregateOperand",
      "description": "Definition of an aggregate over a scalar-typed operand",
      "type": "object",
      "required": [
        "aggregatedType",
        "aggregationFunctions",
        "dataConnectorAggregationFunctionMapping"
      ],
      "properties": {
        "aggregatedType": {
          "description": "The name of the scalar type the aggregate expression is aggregating",
          "allOf": [
            {
              "$ref": "#/definitions/TypeName"
            }
          ]
        },
        "aggregationFunctions": {
          "description": "The aggregation functions that operate over the scalar type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationFunctionDefinition"
          }
        },
        "dataConnectorAggregationFunctionMapping": {
          "description": "Mapping of aggregation functions to corresponding aggregation functions in various data connectors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataConnectorAggregationFunctionMapping"
          }
        }
      },
      "additionalProperties": false
    },
    "ScalarTypeGraphQLConfiguration": {
      "$id": "https://hasura.io/jsonschemas/metadata/ScalarTypeGraphQLConfiguration",
      "title": "ScalarTypeGraphQLConfiguration",
      "description": "GraphQL configuration of an Open DD scalar type",
      "type": "object",
      "required": [
        "typeName"
      ],
      "properties": {
        "typeName": {
          "description": "The name of the GraphQl type to use for this scalar.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ScalarTypeV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/ScalarTypeV1",
      "title": "ScalarTypeV1",
      "description": "Definition of a user-defined scalar type that that has opaque semantics.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name to give this scalar type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "graphql": {
          "description": "Configuration for how this scalar type should appear in the GraphQL schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/ScalarTypeGraphQLConfiguration"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "The description of this scalar. Gets added to the description of the scalar's definition in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "SelectManyGraphQlDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/SelectManyGraphQlDefinition",
      "title": "SelectManyGraphQlDefinition",
      "description": "The definition of the GraphQL API for selecting rows from a model.",
      "type": "object",
      "required": [
        "queryRootField"
      ],
      "properties": {
        "queryRootField": {
          "description": "The name of the query root field for this API.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "description": {
          "description": "The description of the select many graphql definition of the model. Gets added to the description of the select many root field of the model in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "deprecated": {
          "description": "Whether this select many query field is deprecated. If set, the deprecation status is added to the select many root field's graphql schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/Deprecated"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "SelectPermission": {
      "$id": "https://hasura.io/jsonschemas/metadata/SelectPermission",
      "title": "SelectPermission",
      "description": "Defines the permissions for selecting a model for a role.",
      "type": "object",
      "required": [
        "filter"
      ],
      "properties": {
        "filter": {
          "description": "Filter expression when selecting rows for this model. Null filter implies all rows are selectable.",
          "allOf": [
            {
              "$ref": "#/definitions/NullableModelPredicate"
            }
          ]
        },
        "argumentPresets": {
          "description": "Preset values for arguments for this role",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgumentPreset"
          }
        }
      },
      "additionalProperties": false
    },
    "SelectUniqueGraphQlDefinition": {
      "$id": "https://hasura.io/jsonschemas/metadata/SelectUniqueGraphQlDefinition",
      "title": "SelectUniqueGraphQlDefinition",
      "description": "The definition of the GraphQL API for selecting a unique row/object from a model.",
      "type": "object",
      "required": [
        "queryRootField",
        "uniqueIdentifier"
      ],
      "properties": {
        "queryRootField": {
          "description": "The name of the query root field for this API.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "uniqueIdentifier": {
          "description": "A set of fields which can uniquely identify a row/object in the model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldName"
          }
        },
        "description": {
          "description": "The description of the select unique graphql definition of the model. Gets added to the description of the select unique root field of the model in the graphql schema.",
          "type": [
            "string",
            "null"
          ]
        },
        "deprecated": {
          "description": "Whether this select unique query field is deprecated. If set, the deprecation status is added to the select unique root field's graphql schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/Deprecated"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TypeInputPermission": {
      "$id": "https://hasura.io/jsonschemas/metadata/TypeInputPermission",
      "title": "TypeInputPermission",
      "description": "Permissions for a type for a particular role when used in an input context.",
      "type": "object",
      "properties": {
        "fieldPresets": {
          "description": "Preset values for fields of the type",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldPreset"
          }
        }
      },
      "additionalProperties": false
    },
    "TypeName": {
      "$id": "https://hasura.io/jsonschemas/metadata/TypeName",
      "title": "TypeName",
      "anyOf": [
        {
          "$ref": "#/definitions/InbuiltType"
        },
        {
          "$ref": "#/definitions/CustomTypeName"
        }
      ]
    },
    "TypeOutputPermission": {
      "$id": "https://hasura.io/jsonschemas/metadata/TypeOutputPermission",
      "title": "TypeOutputPermission",
      "description": "Permissions for a type for a particular role when used in an output context.",
      "type": "object",
      "required": [
        "allowedFields"
      ],
      "properties": {
        "allowedFields": {
          "description": "Fields of the type that are accessible for a role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldName"
          },
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },
    "TypePermission": {
      "$id": "https://hasura.io/jsonschemas/metadata/TypePermission",
      "title": "TypePermission",
      "description": "Defines permissions for a particular role for a type.",
      "examples": [
        {
          "role": "user",
          "output": {
            "allowedFields": [
              "article_id",
              "author_id"
            ]
          },
          "input": {
            "fieldPresets": [
              {
                "field": "author_id",
                "value": {
                  "sessionVariable": "x-hasura-user-id"
                }
              }
            ]
          }
        }
      ],
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "description": "The role for which permissions are being defined.",
          "allOf": [
            {
              "$ref": "#/definitions/Role"
            }
          ]
        },
        "output": {
          "description": "Permissions for this role when this type is used in an output context. If null, this type is inaccessible for this role in an output context.",
          "anyOf": [
            {
              "$ref": "#/definitions/TypeOutputPermission"
            },
            {
              "type": "null"
            }
          ]
        },
        "input": {
          "description": "Permissions for this role when this type is used in an input context. If null, this type is accessible for this role in an input context.",
          "anyOf": [
            {
              "$ref": "#/definitions/TypeInputPermission"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TypePermissionsV1": {
      "$id": "https://hasura.io/jsonschemas/metadata/TypePermissionsV1",
      "title": "TypePermissionsV1",
      "description": "Definition of permissions for an OpenDD type.",
      "type": "object",
      "required": [
        "permissions",
        "typeName"
      ],
      "properties": {
        "typeName": {
          "description": "The name of the type for which permissions are being defined. Must be an object type.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "permissions": {
          "description": "A list of type permissions, one for each role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypePermission"
          }
        }
      },
      "additionalProperties": false
    },
    "TypeReference": {
      "$id": "https://hasura.io/jsonschemas/metadata/TypeReference",
      "title": "TypeReference",
      "description": "A reference to an Open DD type including nullable values and arrays.\nSuffix '!' to indicate a non-nullable reference, and wrap in '[]' to indicate an array.\nEg: '[String!]!' is a non-nullable array of non-nullable strings.",
      "type": "string"
    },
    "ValueExpression": {
      "$id": "https://hasura.io/jsonschemas/metadata/ValueExpression",
      "title": "ValueExpression",
      "description": "An expression which evaluates to a value that can be used in permissions and various presets.",
      "oneOf": [
        {
          "title": "Literal",
          "type": "object",
          "required": [
            "literal"
          ],
          "properties": {
            "literal": true
          },
          "additionalProperties": false
        },
        {
          "title": "SessionVariable",
          "type": "object",
          "required": [
            "sessionVariable"
          ],
          "properties": {
            "sessionVariable": {
              "$ref": "#/definitions/OpenDdSessionVariable"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ValueExpressionOrPredicate": {
      "$id": "https://hasura.io/jsonschemas/metadata/ValueExpressionOrPredicate",
      "title": "ValueExpressionOrPredicate",
      "description": "An expression which evaluates to a value that can be used in permissions and various presets.",
      "oneOf": [
        {
          "title": "Literal",
          "type": "object",
          "required": [
            "literal"
          ],
          "properties": {
            "literal": true
          },
          "additionalProperties": false
        },
        {
          "title": "SessionVariable",
          "type": "object",
          "required": [
            "sessionVariable"
          ],
          "properties": {
            "sessionVariable": {
              "$ref": "#/definitions/OpenDdSessionVariable"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "BooleanExpression",
          "type": "object",
          "required": [
            "booleanExpression"
          ],
          "properties": {
            "booleanExpression": {
              "$ref": "#/definitions/ModelPredicate"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "VersionedSchemaAndCapabilities": {
      "$id": "https://hasura.io/jsonschemas/metadata/VersionedSchemaAndCapabilities",
      "title": "VersionedSchemaAndCapabilities",
      "description": "Versioned schema and capabilities for a data connector.",
      "oneOf": [
        {
          "title": "SchemaAndCapabilitiesV01",
          "description": "Version 0.1 of schema and capabilities for a data connector.",
          "type": "object",
          "required": [
            "capabilities",
            "schema",
            "version"
          ],
          "properties": {
            "version": {
              "type": "string",
              "enum": [
                "v0.1"
              ]
            },
            "schema": {
              "$ref": "https://raw.githubusercontent.com/hasura/ndc-spec/v0.1.4/ndc-models/tests/json_schema/schema_response.jsonschema"
            },
            "capabilities": {
              "$ref": "https://raw.githubusercontent.com/hasura/ndc-spec/v0.1.4/ndc-models/tests/json_schema/capabilities_response.jsonschema"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}