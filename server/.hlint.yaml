# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]

- arguments: -XQuasiQuotes

# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules

- ignore: {name: Use <$>}
- ignore: {name: Reduce duplication}
- ignore: {name: Use fromMaybe}
- ignore: {name: Redundant $}
- ignore: {name: Redundant bracket}
- ignore: {name: Use fmap}
- ignore: {name: Use first}
- ignore: {name: Use if}
- ignore: {name: Redundant <$>}
- ignore: {name: Functor law}
- ignore: {name: Move brackets to avoid $}
- ignore: {name: Use null}
- ignore: {name: Use map once}
- ignore: {name: Use ++}
- ignore: {name: Use lambda-case}
- ignore: {name: Use const}
- ignore: {name: Eta reduce}
- ignore: {name: Redundant multi-way if}
- ignore: {name: Use newtype instead of data}
- ignore: {name: Use bimap}
- ignore: {name: Use section}
- ignore: {name: Use $>}
- ignore: {name: Use unless}
- ignore: {name: Redundant $!}
- ignore: {name: "Use ?~"}
- ignore: {name: Use Just}
- ignore: {name: Redundant flip}
- ignore: {name: Use for_}
- ignore: {name: Avoid lambda}
- ignore: {name: Use mapM}
- ignore: {name: Redundant lambda}
- ignore: {name: Use <=<}
- ignore: {name: Replace case with maybe}
- ignore: {name: Use sequenceA}
- ignore: {name: Use camelCase}
- ignore: {name: Avoid lambda using `infix`}
- ignore: {name: Redundant irrefutable pattern}
- ignore: {name: Use tuple-section}
- ignore: {name: Use mapMaybe}
- ignore: {name: Use second}
- ignore: {name: Use isNothing}
- ignore: {name: Use maybe}
- ignore: {name: Redundant return}
- ignore: {name: Unused LANGUAGE pragma}

# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
