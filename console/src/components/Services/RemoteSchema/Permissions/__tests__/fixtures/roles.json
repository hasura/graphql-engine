{
  "userPreset": "schema  { query: query_root }\ntype query_root { users(distinct_on: [users_select_column!] , limit: Int , offset: Int , order_by: [users_order_by!] , where: users_bool_exp @preset(value: {id: {_eq: \"X-Hasura-User-Id\"}})): [users!]! }\nenum order_by {asc  asc_nulls_first  asc_nulls_last  desc  desc_nulls_first  desc_nulls_last  }\ninput users_order_by {books_aggregate: books_aggregate_order_by  id: order_by  name: order_by  }\ninput books_aggregate_order_by {avg: books_avg_order_by  count: order_by  max: books_max_order_by  min: books_min_order_by  stddev: books_stddev_order_by  stddev_pop: books_stddev_pop_order_by  stddev_samp: books_stddev_samp_order_by  sum: books_sum_order_by  var_pop: books_var_pop_order_by  var_samp: books_var_samp_order_by  variance: books_variance_order_by  }\ninput books_avg_order_by {author: order_by  id: order_by  }\ninput books_max_order_by {author: order_by  book_name: order_by  id: order_by  }\ninput books_min_order_by {author: order_by  book_name: order_by  id: order_by  }\ninput books_stddev_order_by {author: order_by  id: order_by  }\ninput books_stddev_pop_order_by {author: order_by  id: order_by  }\ninput books_stddev_samp_order_by {author: order_by  id: order_by  }\ninput books_sum_order_by {author: order_by  id: order_by  }\ninput books_var_pop_order_by {author: order_by  id: order_by  }\ninput books_var_samp_order_by {author: order_by  id: order_by  }\ninput books_variance_order_by {author: order_by  id: order_by  }\ninput books_bool_exp {_and: [books_bool_exp]  _not: books_bool_exp  _or: [books_bool_exp]  author: Int_comparison_exp  book_name: String_comparison_exp  id: Int_comparison_exp  user: users_bool_exp  }\ninput Int_comparison_exp {_eq: Int  _gt: Int  _gte: Int  _in: [Int!]  _is_null: Boolean  _lt: Int  _lte: Int  _neq: Int  _nin: [Int!]  }\ninput String_comparison_exp {_eq: String  _gt: String  _gte: String  _ilike: String  _in: [String!]  _is_null: Boolean  _like: String  _lt: String  _lte: String  _neq: String  _nilike: String  _nin: [String!]  _nlike: String  _nsimilar: String  _similar: String  }\ninput users_bool_exp {_and: [users_bool_exp]  _not: users_bool_exp  _or: [users_bool_exp]  books: books_bool_exp  id: Int_comparison_exp  name: String_comparison_exp  }\ntype books { author: Int! book_name: String! id: Int! user: users! }\ntype users { books: [books!]! books_aggregate: books_aggregate! id: Int! name: String! }\ntype books_aggregate { aggregate: books_aggregate_fields nodes: [books!]! }\ntype books_aggregate_fields { avg: books_avg_fields count: Int max: books_max_fields min: books_min_fields stddev: books_stddev_fields stddev_pop: books_stddev_pop_fields stddev_samp: books_stddev_samp_fields sum: books_sum_fields var_pop: books_var_pop_fields var_samp: books_var_samp_fields variance: books_variance_fields }\ntype books_avg_fields { author: Float id: Float }\ntype books_max_fields { author: Int book_name: String id: Int }\ntype books_min_fields { author: Int book_name: String id: Int }\ntype books_stddev_fields { author: Float id: Float }\ntype books_stddev_pop_fields { author: Float id: Float }\ntype books_stddev_samp_fields { author: Float id: Float }\ntype books_sum_fields { author: Int id: Int }\ntype books_var_pop_fields { author: Float id: Float }\ntype books_var_samp_fields { author: Float id: Float }\ntype books_variance_fields { author: Float id: Float }\nenum users_select_column {id  name  }",
  "continentsPreset": "schema  { query: Query }\ntype Query { continents(filter: ContinentFilterInput @preset(value: {code: {eq: \"AF\"}})): [Continent!]! }\ninput ContinentFilterInput {code: StringQueryOperatorInput  }\ninput StringQueryOperatorInput {eq: String  ne: String  in: [String]  nin: [String]  regex: String  glob: String  }\ntype Continent { code: ID! name: String! countries: [Country!]! }\ntype Country { code: ID! name: String! native: String! phone: String! continent: Continent! capital: String currency: String languages: [Language!]! emoji: String! emojiU: String! states: [State!]! }\ntype Language { code: ID! name: String native: String rtl: Boolean! }\ntype State { code: String name: String! country: Country! }"
}
