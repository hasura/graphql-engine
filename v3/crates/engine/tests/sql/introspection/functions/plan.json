[
  {
    "plan_type": "logical_plan",
    "plan": "Sort: f.function_name ASC NULLS LAST\n  Projection: f.function_name, f.return_type, f.description, a.arguments\n    Left Join: f.function_name = a.function_name\n      SubqueryAlias: f\n        TableScan: hasura.table_valued_function projection=[function_name, return_type, description]\n      SubqueryAlias: a\n        Projection: hasura.table_valued_function_argument.function_name, array_agg(named_struct(Utf8(\"name\"),hasura.table_valued_function_argument.argument_name,Utf8(\"position\"),hasura.table_valued_function_argument.argument_position,Utf8(\"argument_type\"),hasura.table_valued_function_argument.argument_type,Utf8(\"argument_type_normalized\"),hasura.table_valued_function_argument.argument_type_normalized,Utf8(\"is_nullable\"),hasura.table_valued_function_argument.is_nullable,Utf8(\"description\"),hasura.table_valued_function_argument.description)) AS arguments\n          Aggregate: groupBy=[[hasura.table_valued_function_argument.function_name]], aggr=[[array_agg(named_struct(Utf8(\"name\"), hasura.table_valued_function_argument.argument_name, Utf8(\"position\"), hasura.table_valued_function_argument.argument_position, Utf8(\"argument_type\"), hasura.table_valued_function_argument.argument_type, Utf8(\"argument_type_normalized\"), hasura.table_valued_function_argument.argument_type_normalized, Utf8(\"is_nullable\"), hasura.table_valued_function_argument.is_nullable, Utf8(\"description\"), hasura.table_valued_function_argument.description))]]\n            TableScan: hasura.table_valued_function_argument projection=[function_name, argument_name, argument_position, argument_type, argument_type_normalized, is_nullable, description]"
  },
  {
    "plan_type": "physical_plan",
    "plan": "SortExec: expr=[function_name@0 ASC NULLS LAST], preserve_partitioning=[false]\n  ProjectionExec: expr=[function_name@1 as function_name, return_type@2 as return_type, description@3 as description, arguments@0 as arguments]\n    CoalesceBatchesExec: target_batch_size=8192\n      HashJoinExec: mode=CollectLeft, join_type=Right, on=[(function_name@0, function_name@0)], projection=[arguments@1, function_name@2, return_type@3, description@4]\n        ProjectionExec: expr=[function_name@0 as function_name, array_agg(named_struct(Utf8(\"name\"),hasura.table_valued_function_argument.argument_name,Utf8(\"position\"),hasura.table_valued_function_argument.argument_position,Utf8(\"argument_type\"),hasura.table_valued_function_argument.argument_type,Utf8(\"argument_type_normalized\"),hasura.table_valued_function_argument.argument_type_normalized,Utf8(\"is_nullable\"),hasura.table_valued_function_argument.is_nullable,Utf8(\"description\"),hasura.table_valued_function_argument.description))@1 as arguments]\n          AggregateExec: mode=Single, gby=[function_name@0 as function_name], aggr=[array_agg(named_struct(Utf8(\"name\"),hasura.table_valued_function_argument.argument_name,Utf8(\"position\"),hasura.table_valued_function_argument.argument_position,Utf8(\"argument_type\"),hasura.table_valued_function_argument.argument_type,Utf8(\"argument_type_normalized\"),hasura.table_valued_function_argument.argument_type_normalized,Utf8(\"is_nullable\"),hasura.table_valued_function_argument.is_nullable,Utf8(\"description\"),hasura.table_valued_function_argument.description))]\n            ValuesExec\n        ValuesExec\n"
  }
]
