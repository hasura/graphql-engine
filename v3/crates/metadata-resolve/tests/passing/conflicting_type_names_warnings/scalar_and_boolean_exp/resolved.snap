---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/conflicting_type_names_warnings/scalar_and_boolean_exp/metadata.json
---
(
    Metadata {
        object_types: {},
        scalar_types: {
            Qualified {
                subgraph: SubgraphName(
                    "default",
                ),
                name: CustomTypeName(
                    Identifier(
                        "ConflictingType",
                    ),
                ),
            }: ScalarTypeRepresentation {
                graphql_type_name: None,
                description: Some(
                    "This is a scalar type",
                ),
                representations: {},
            },
        },
        models: {},
        commands: {},
        boolean_expression_types: BooleanExpressionTypes {
            objects: {},
            scalars: {
                FromBooleanExpressionType(
                    Qualified {
                        subgraph: SubgraphName(
                            "default",
                        ),
                        name: CustomTypeName(
                            Identifier(
                                "ConflictingType",
                            ),
                        ),
                    },
                ): ResolvedScalarBooleanExpressionType {
                    operand_type: Inbuilt(
                        String,
                    ),
                    comparison_operators: {
                        OperatorName(
                            "_in",
                        ): QualifiedTypeReference {
                            underlying_type: List(
                                QualifiedTypeReference {
                                    underlying_type: Named(
                                        Inbuilt(
                                            String,
                                        ),
                                    ),
                                    nullable: false,
                                },
                            ),
                            nullable: false,
                        },
                        OperatorName(
                            "equals",
                        ): QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                    },
                    data_connector_operator_mappings: {},
                    graphql_name: Some(
                        GraphQlTypeName(
                            "StringBoolExp",
                        ),
                    ),
                    logical_operators: Exclude,
                    is_null_operator: Include {
                        graphql: Some(
                            IsNullOperatorGraphqlConfig {
                                is_null_operator_name: Name(
                                    "_is_null",
                                ),
                            },
                        ),
                    },
                },
            },
            object_aggregates: {},
            scalar_aggregates: {},
        },
        order_by_expressions: OrderByExpressions {
            objects: {},
            scalars: {},
        },
        aggregate_expressions: {},
        graphql_config: GlobalGraphqlConfig {
            query_root_type_name: TypeName(
                Name(
                    "Query",
                ),
            ),
            mutation_root_type_name: TypeName(
                Name(
                    "Mutation",
                ),
            ),
            subscription_root_type_name: None,
            order_by_input: Some(
                OrderByInputGraphqlConfig {
                    asc_direction_field_value: Name(
                        "Asc",
                    ),
                    desc_direction_field_value: Name(
                        "Desc",
                    ),
                    enum_type_name: TypeName(
                        Name(
                            "order_by",
                        ),
                    ),
                },
            ),
            enable_apollo_federation_fields: false,
            bypass_relation_comparisons_ndc_capability: false,
            propagate_boolean_expression_deprecation_status: false,
            multiple_order_by_input_object_fields: Allow,
        },
        plugin_configs: LifecyclePluginConfigs {
            pre_parse_plugins: [],
            pre_response_plugins: [],
            pre_route_plugins: [],
        },
        roles: {},
        runtime_flags: RuntimeFlags(
            {},
        ),
    },
    [
        ScalarBooleanExpressionIssue(
            LogicalOperatorsUnavailable {
                type_name: Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "ConflictingType",
                        ),
                    ),
                },
            },
        ),
        ConflictingNameAcrossTypes(
            ConflictingNameAcrossTypes {
                name: Qualified {
                    subgraph: SubgraphName(
                        "default",
                    ),
                    name: CustomTypeName(
                        Identifier(
                            "ConflictingType",
                        ),
                    ),
                },
                conflicting_sources: ConflictingSources(
                    NonEmpty {
                        head: Scalar,
                        tail: [
                            BooleanExpression,
                        ],
                    },
                ),
            },
        ),
    ],
)
