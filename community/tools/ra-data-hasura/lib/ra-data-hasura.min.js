!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("ra-data-hasura",[],r):"object"==typeof exports?exports["ra-data-hasura"]=r():e["ra-data-hasura"]=r()}("undefined"!=typeof self?self:this,function(){return function(e){var r={};function t(a){if(r[a])return r[a].exports;var n=r[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=r,t.d=function(e,r,a){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:a})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)t.d(a,n,function(r){return e[r]}.bind(null,n));return a},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var a=t(1);var n=function(e){return JSON.parse(JSON.stringify(e))};r.default=function(e,r){var t=function(e,r,t){var u,s,i,o={},d={};switch(e){case"GET_LIST":var c=n(a.selectQuery),l=n(a.countQuery);c.args.table=r,c.args.limit=t.pagination.perPage,c.args.offset=t.pagination.page*t.pagination.perPage-t.pagination.perPage,c.args.where=t.filter,c.args.order_by={column:t.sort.field,type:t.sort.order.toLowerCase()},l.args.table=r,(d=n(a.bulkQuery)).args.push(c),d.args.push(l);break;case"GET_ONE":(d=n(a.selectQuery)).args.table=r,d.args.where={id:{$eq:t.id}};break;case"CREATE":var g=Object.keys(t.data);(d=n(a.insertQuery)).args.table=r,d.args.objects.push(t.data),g.push("id"),d.args.returning=g;break;case"UPDATE":var p=Object.keys(t.data);(d=n(a.updateQuery)).args.table=r,d.args.$set=t.data,d.args.where={id:{$eq:t.id}},p.push("id"),d.args.returning=p;break;case"UPDATE_MANY":var f=Object.keys(t.data);(d=n(a.updateQuery)).args.table=r,d.args.$set=t.data,d.args.where={id:{$in:t.ids}},f.push("id"),d.args.returning=f;break;case"DELETE":var y=Object.keys(t.previousData);(d=n(a.deleteQuery)).args.table=r,d.args.where={id:{$eq:t.id}},y.push("id"),d.args.returning=y;break;case"DELETE_MANY":(d=n(a.deleteQuery)).args.table=r,d.args.where={id:{$in:t.ids}},d.args.returning=["id"];break;case"GET_MANY":(d=n(a.selectQuery)).args.table=r,d.args.where={id:{$in:t.ids}};break;case"GET_MANY_REFERENCE":var b=n(a.selectQuery),E=n(a.countQuery);c.args.table=r,c.args.limit=t.pagination.perPage,c.args.offset=t.pagination.page*t.pagination.perPage-t.pagination.perPage,c.args.where=(u={},s=t.target,i=t.id,s in u?Object.defineProperty(u,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):u[s]=i,u),c.args.order_by={column:t.sort.field,type:t.sort.order.toLowerCase()},l.args.table=r,(d=n(a.bulkQuery)).args.push(b),d.args.push(E);break;default:throw new Error("Unsupported type ".concat(e))}return o.body=JSON.stringify(d),{options:o}};return function(a,n,u){var s=t(a,n,u).options;return s.method="POST",s.headers=r,fetch(e+"/v1/query",s).then(function(e){return e.json().then(function(e){return function(e,r,t,a){if("error"in e||"code"in e)throw new Error(JSON.stringify(e));switch(r){case"GET_LIST":return{data:e[0],total:e[1].count};case"GET_ONE":return{data:e[0]};case"CREATE":case"UPDATE":return{data:e.returning[0]};case"UPDATE_MANY":return{data:e.returning.map(function(e){return e.id})};case"DELETE":return{data:e.returning[0]};case"DELETE_MANY":return{data:e.returning.map(function(e){return e.id})};case"GET_MANY":return{data:e};case"GET_MANY_REFERENCE":return{data:e[0],total:e[1].count};default:return{data:e}}}(e,a)})})}},e.exports=r.default},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.deleteQuery=r.updateQuery=r.insertQuery=r.countQuery=r.selectQuery=r.bulkQuery=void 0;r.bulkQuery={type:"bulk",args:[]};r.selectQuery={type:"select",args:{table:"",columns:["*"]}};r.countQuery={type:"count",args:{table:"",where:{id:{$gt:0}}}};r.insertQuery={type:"insert",args:{table:"",objects:[],returning:[]}};r.updateQuery={type:"update",args:{table:"",$set:{},where:{},returning:[]}};r.deleteQuery={type:"delete",args:{table:"",where:{},returning:[]}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,