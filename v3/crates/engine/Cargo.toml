[package]
name = "engine"
version.workspace = true
edition.workspace = true
license.workspace = true

build = "build.rs"

default-run = "engine"

[lib]
bench = false

[[bin]]
name = "engine"
path = "bin/engine/main.rs"
bench = false

[[bench]]
name = "execute"
harness = false

[dependencies]
axum-ext = { path = "../utils/axum-ext" }
execute = { path = "../execute" }
graphql-frontend = { path = "../frontends/graphql" }
hasura-authn-core = { path = "../auth/hasura-authn-core" }
hasura-authn-jwt = { path = "../auth/hasura-authn-jwt" }
hasura-authn-noauth = { path = "../auth/hasura-authn-noauth" }
hasura-authn-webhook = { path = "../auth/hasura-authn-webhook" }
jsonapi = { path = "../jsonapi" }
jsonpath = { path = "../utils/jsonpath" }
lang-graphql = { path = "../lang-graphql" }
open-dds = { path = "../open-dds" }
opendds-derive = { path = "../utils/opendds-derive" }
pre-execution-plugin = { path = "../plugins/pre-execution-plugin" }
schema = { path = "../schema" }
sql = { path = "../sql" }
tracing-util = { path = "../utils/tracing-util" }
metadata-resolve = {path = "../metadata-resolve" }

anyhow = { workspace = true }
axum = { workspace = true }
base64 = { workspace = true }
clap = { workspace = true, features = ["derive", "env"] }
futures-util = {workspace = true}
json_value_merge = { workspace = true }
jsonapi_library = { workspace =  true }
mimalloc = { workspace = true }
nonempty = { workspace = true }
reqwest = { workspace = true, features = ["json", "multipart"] }
schemars = { workspace = true, features = ["smol_str"] }
serde = { workspace = true }
serde_json = { workspace = true }
serde_path_to_error = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["macros", "parking_lot", "rt-multi-thread", "signal"] }
tower = { workspace = true }
tower-http = { workspace = true, features = ["trace", "cors", "fs"] }

# Dependencies to build and run build.rs file
[build-dependencies]
build-data = { workspace = true } # To set short commit-sha at build time

[dev-dependencies]
criterion = { workspace = true, features = ["html_reports", "async_tokio"] }
goldenfile = { workspace = true }
pretty_assertions = { workspace = true }
tokio-test = { workspace = true }

[package.metadata.cargo-machete]
ignored = [
  "build_data",          # cargo-machete ignores build dependencies
  "jsonpath",            # used by opendds-derive
  "serde_path_to_error", # used by opendds-derive
]

[lints]
workspace = true
